
p_sterownik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a118  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800a2b8  0800a2b8  0001a2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b4  0800a6b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b4  0800a6b4  0001a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6bc  0800a6bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c0  0800a6c0  0001a6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001dc  0800a8a0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800a8a0  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a83  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235f  00000000  00000000  00032c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00034ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00036120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000316d  00000000  00000000  00037190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001394c  00000000  00000000  0003a2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e86b  00000000  00000000  0004dc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec4b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059fc  00000000  00000000  000ec504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2a0 	.word	0x0800a2a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a2a0 	.word	0x0800a2a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <ch_0>:





void ch_0(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
	 ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <ch_0+0x3c>)
 8000ee0:	f000 fde4 	bl	8001aac <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <ch_0+0x32>
  {
    Error_Handler();
 8000eea:	f000 fc17 	bl	800171c <Error_Handler>
  }}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001f8 	.word	0x200001f8

08000efc <ch_10>:

void ch_10(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
	 ADC_ChannelConfTypeDef sConfig = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_10;
 8000f0e:	230a      	movs	r3, #10
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <ch_10+0x3c>)
 8000f20:	f000 fdc4 	bl	8001aac <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <ch_10+0x32>
  {
    Error_Handler();
 8000f2a:	f000 fbf7 	bl	800171c <Error_Handler>
  }}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200001f8 	.word	0x200001f8

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f001 fbb7 	bl	80026b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f8b3 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 fb31 	bl	80015b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f4e:	f000 f987 	bl	8001260 <MX_TIM1_Init>
  MX_DMA_Init();
 8000f52:	f000 fb05 	bl	8001560 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f56:	f000 f955 	bl	8001204 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f5a:	f000 fad7 	bl	800150c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f5e:	f000 fa63 	bl	8001428 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f62:	f000 fa0d 	bl	8001380 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000f66:	f000 f90b 	bl	8001180 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000f6a:	f000 faab 	bl	80014c4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
   __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	4b48      	ldr	r3, [pc, #288]	; (8001094 <main+0x158>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a47      	ldr	r2, [pc, #284]	; (8001094 <main+0x158>)
 8000f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b45      	ldr	r3, [pc, #276]	; (8001094 <main+0x158>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
   __I2C1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <main+0x158>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a40      	ldr	r2, [pc, #256]	; (8001094 <main+0x158>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <main+0x158>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_USART2_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <main+0x158>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a39      	ldr	r2, [pc, #228]	; (8001094 <main+0x158>)
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b37      	ldr	r3, [pc, #220]	; (8001094 <main+0x158>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
   HAL_TIM_Base_Start_IT(&htim1);
 8000fc2:	4835      	ldr	r0, [pc, #212]	; (8001098 <main+0x15c>)
 8000fc4:	f004 fc14 	bl	80057f0 <HAL_TIM_Base_Start_IT>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4833      	ldr	r0, [pc, #204]	; (8001098 <main+0x15c>)
 8000fcc:	f004 fcc2 	bl	8005954 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4831      	ldr	r0, [pc, #196]	; (8001098 <main+0x15c>)
 8000fd4:	f004 fcbe 	bl	8005954 <HAL_TIM_PWM_Start>
   HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000fd8:	213c      	movs	r1, #60	; 0x3c
 8000fda:	4830      	ldr	r0, [pc, #192]	; (800109c <main+0x160>)
 8000fdc:	f004 fe10 	bl	8005c00 <HAL_TIM_Encoder_Start>

   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <main+0x158>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <main+0x158>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <main+0x158>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
   	__HAL_RCC_USART2_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <main+0x158>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a23      	ldr	r2, [pc, #140]	; (8001094 <main+0x158>)
 8001006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <main+0x158>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
   	__HAL_RCC_ADC1_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <main+0x158>)
 800101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <main+0x158>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6453      	str	r3, [r2, #68]	; 0x44
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <main+0x158>)
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
   //	HAL_ADCEx_Calibration_Start(&hadc1);

    HAL_ADC_Start(&hadc1);
 8001034:	481a      	ldr	r0, [pc, #104]	; (80010a0 <main+0x164>)
 8001036:	f000 fbb9 	bl	80017ac <HAL_ADC_Start>
   // HAL_ADC_PollForConversion(&hadc1, 1);
  //  Vamb = HAL_ADC_GetValue(&hadc1);
  //  DC_Multiplier = 65535/(4096-Vamb);

    HAL_TIM_Base_Start_IT(&htim10);
 800103a:	481a      	ldr	r0, [pc, #104]	; (80010a4 <main+0x168>)
 800103c:	f004 fbd8 	bl	80057f0 <HAL_TIM_Base_Start_IT>
    // move_(88);


    while(1){

    	    ch_0();
 8001040:	f7ff ff3c 	bl	8000ebc <ch_0>
    		  HAL_ADC_Start(&hadc1);
 8001044:	4816      	ldr	r0, [pc, #88]	; (80010a0 <main+0x164>)
 8001046:	f000 fbb1 	bl	80017ac <HAL_ADC_Start>
    		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800104a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <main+0x164>)
 8001050:	f000 fc93 	bl	800197a <HAL_ADC_PollForConversion>
    		  Vamb = HAL_ADC_GetValue(&hadc1);
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <main+0x164>)
 8001056:	f000 fd1b 	bl	8001a90 <HAL_ADC_GetValue>
 800105a:	4603      	mov	r3, r0
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <main+0x16c>)
 8001060:	801a      	strh	r2, [r3, #0]
    		  HAL_ADC_Stop(&hadc1);
 8001062:	480f      	ldr	r0, [pc, #60]	; (80010a0 <main+0x164>)
 8001064:	f000 fc56 	bl	8001914 <HAL_ADC_Stop>

    		  ch_10();
 8001068:	f7ff ff48 	bl	8000efc <ch_10>
    		  HAL_ADC_Start(&hadc1);
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <main+0x164>)
 800106e:	f000 fb9d 	bl	80017ac <HAL_ADC_Start>
    		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <main+0x164>)
 8001078:	f000 fc7f 	bl	800197a <HAL_ADC_PollForConversion>
    		  Vamb_1= HAL_ADC_GetValue(&hadc1);
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <main+0x164>)
 800107e:	f000 fd07 	bl	8001a90 <HAL_ADC_GetValue>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <main+0x170>)
 8001088:	801a      	strh	r2, [r3, #0]
    		  HAL_ADC_Stop(&hadc1);
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <main+0x164>)
 800108c:	f000 fc42 	bl	8001914 <HAL_ADC_Stop>
    	    ch_0();
 8001090:	e7d6      	b.n	8001040 <main+0x104>
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	20000294 	.word	0x20000294
 800109c:	200002dc 	.word	0x200002dc
 80010a0:	200001f8 	.word	0x200001f8
 80010a4:	2000036c 	.word	0x2000036c
 80010a8:	200004b8 	.word	0x200004b8
 80010ac:	200004ba 	.word	0x200004ba

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	2230      	movs	r2, #48	; 0x30
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 fbce 	bl	8007860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <SystemClock_Config+0xc8>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	4a26      	ldr	r2, [pc, #152]	; (8001178 <SystemClock_Config+0xc8>)
 80010de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <SystemClock_Config+0xc8>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <SystemClock_Config+0xcc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <SystemClock_Config+0xcc>)
 80010fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <SystemClock_Config+0xcc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001120:	2308      	movs	r3, #8
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001124:	23a0      	movs	r3, #160	; 0xa0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fe73 	bl	8004e20 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001140:	f000 faec 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2102      	movs	r1, #2
 8001160:	4618      	mov	r0, r3
 8001162:	f004 f8d5 	bl	8005310 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800116c:	f000 fad6 	bl	800171c <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	; 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_ADC1_Init+0x78>)
 8001194:	4a19      	ldr	r2, [pc, #100]	; (80011fc <MX_ADC1_Init+0x7c>)
 8001196:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_ADC1_Init+0x78>)
 800119a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800119e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011bc:	2200      	movs	r2, #0
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <MX_ADC1_Init+0x80>)
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011dc:	2201      	movs	r2, #1
 80011de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_ADC1_Init+0x78>)
 80011e2:	f000 faa0 	bl	8001726 <HAL_ADC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011ec:	f000 fa96 	bl	800171c <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200001f8 	.word	0x200001f8
 80011fc:	40012000 	.word	0x40012000
 8001200:	0f000001 	.word	0x0f000001

08001204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2C1_Init+0x50>)
 800120a:	4a13      	ldr	r2, [pc, #76]	; (8001258 <MX_I2C1_Init+0x54>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_I2C1_Init+0x50>)
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_I2C1_Init+0x58>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_I2C1_Init+0x50>)
 8001222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001226:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_I2C1_Init+0x50>)
 8001242:	f002 f8e3 	bl	800340c <HAL_I2C_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800124c:	f000 fa66 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000240 	.word	0x20000240
 8001258:	40005400 	.word	0x40005400
 800125c:	000186a0 	.word	0x000186a0

08001260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b092      	sub	sp, #72	; 0x48
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2220      	movs	r2, #32
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f006 fae8 	bl	8007860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <MX_TIM1_Init+0x118>)
 8001292:	4a3a      	ldr	r2, [pc, #232]	; (800137c <MX_TIM1_Init+0x11c>)
 8001294:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <MX_TIM1_Init+0x118>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <MX_TIM1_Init+0x118>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <MX_TIM1_Init+0x118>)
 80012a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <MX_TIM1_Init+0x118>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <MX_TIM1_Init+0x118>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_TIM1_Init+0x118>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012bc:	482e      	ldr	r0, [pc, #184]	; (8001378 <MX_TIM1_Init+0x118>)
 80012be:	f004 faf9 	bl	80058b4 <HAL_TIM_PWM_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012c8:	f000 fa28 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d8:	4619      	mov	r1, r3
 80012da:	4827      	ldr	r0, [pc, #156]	; (8001378 <MX_TIM1_Init+0x118>)
 80012dc:	f005 faae 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80012e6:	f000 fa19 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ea:	2360      	movs	r3, #96	; 0x60
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 300;
 80012ee:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	4819      	ldr	r0, [pc, #100]	; (8001378 <MX_TIM1_Init+0x118>)
 8001312:	f004 fe0b 	bl	8005f2c <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800131c:	f000 f9fe 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	2204      	movs	r2, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM1_Init+0x118>)
 800132a:	f004 fdff 	bl	8005f2c <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001334:	f000 f9f2 	bl	800171c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM1_Init+0x118>)
 800135c:	f005 fadc 	bl	8006918 <HAL_TIMEx_ConfigBreakDeadTime>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001366:	f000 f9d9 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <MX_TIM1_Init+0x118>)
 800136c:	f000 ff50 	bl	8002210 <HAL_TIM_MspPostInit>

}
 8001370:	bf00      	nop
 8001372:	3748      	adds	r7, #72	; 0x48
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000294 	.word	0x20000294
 800137c:	40010000 	.word	0x40010000

08001380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2224      	movs	r2, #36	; 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f006 fa66 	bl	8007860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_TIM2_Init+0xa4>)
 800139e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_TIM2_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_TIM2_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3839;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_TIM2_Init+0xa4>)
 80013b2:	f640 62ff 	movw	r2, #3839	; 0xeff
 80013b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_TIM2_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_TIM2_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c4:	2303      	movs	r3, #3
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013d4:	230f      	movs	r3, #15
 80013d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80013e4:	230f      	movs	r3, #15
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_TIM2_Init+0xa4>)
 80013f0:	f004 fb60 	bl	8005ab4 <HAL_TIM_Encoder_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013fa:	f000 f98f 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <MX_TIM2_Init+0xa4>)
 800140c:	f005 fa16 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001416:	f000 f981 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	; 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200002dc 	.word	0x200002dc

08001428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM3_Init+0x94>)
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <MX_TIM3_Init+0x98>)
 8001448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM3_Init+0x94>)
 800144c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001450:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM3_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM3_Init+0x94>)
 800145a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800145e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_TIM3_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_TIM3_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_TIM3_Init+0x94>)
 800146e:	f004 f96f 	bl	8005750 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001478:	f000 f950 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM3_Init+0x94>)
 800148a:	f004 fe11 	bl	80060b0 <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 f942 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM3_Init+0x94>)
 80014a6:	f005 f9c9 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b0:	f000 f934 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000324 	.word	0x20000324
 80014c0:	40000400 	.word	0x40000400

080014c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_TIM10_Init+0x40>)
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <MX_TIM10_Init+0x44>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_TIM10_Init+0x40>)
 80014d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80014d4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_TIM10_Init+0x40>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 80;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_TIM10_Init+0x40>)
 80014de:	2250      	movs	r2, #80	; 0x50
 80014e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_TIM10_Init+0x40>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_TIM10_Init+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM10_Init+0x40>)
 80014f0:	f004 f92e 	bl	8005750 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80014fa:	f000 f90f 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000036c 	.word	0x2000036c
 8001508:	40014400 	.word	0x40014400

0800150c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001544:	f005 fa4e 	bl	80069e4 <HAL_UART_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800154e:	f000 f8e5 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200003b4 	.word	0x200003b4
 800155c:	40004400 	.word	0x40004400

08001560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_DMA_Init+0x4c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <MX_DMA_Init+0x4c>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_DMA_Init+0x4c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2010      	movs	r0, #16
 8001588:	f001 f9e1 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800158c:	2010      	movs	r0, #16
 800158e:	f001 f9fa 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2011      	movs	r0, #17
 8001598:	f001 f9d9 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800159c:	2011      	movs	r0, #17
 800159e:	f001 f9f2 	bl	8002986 <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <MX_GPIO_Init+0x15c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a4f      	ldr	r2, [pc, #316]	; (800170c <MX_GPIO_Init+0x15c>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <MX_GPIO_Init+0x15c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b49      	ldr	r3, [pc, #292]	; (800170c <MX_GPIO_Init+0x15c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a48      	ldr	r2, [pc, #288]	; (800170c <MX_GPIO_Init+0x15c>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <MX_GPIO_Init+0x15c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <MX_GPIO_Init+0x15c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a41      	ldr	r2, [pc, #260]	; (800170c <MX_GPIO_Init+0x15c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <MX_GPIO_Init+0x15c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <MX_GPIO_Init+0x15c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a3a      	ldr	r2, [pc, #232]	; (800170c <MX_GPIO_Init+0x15c>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <MX_GPIO_Init+0x15c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800163c:	4834      	ldr	r0, [pc, #208]	; (8001710 <MX_GPIO_Init+0x160>)
 800163e:	f001 fecb 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2110      	movs	r1, #16
 8001646:	4833      	ldr	r0, [pc, #204]	; (8001714 <MX_GPIO_Init+0x164>)
 8001648:	f001 fec6 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f242 0108 	movw	r1, #8200	; 0x2008
 8001652:	4831      	ldr	r0, [pc, #196]	; (8001718 <MX_GPIO_Init+0x168>)
 8001654:	f001 fec0 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4829      	ldr	r0, [pc, #164]	; (8001714 <MX_GPIO_Init+0x164>)
 800166e:	f001 fd2f 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001672:	2320      	movs	r3, #32
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	2302      	movs	r3, #2
 8001680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4821      	ldr	r0, [pc, #132]	; (8001710 <MX_GPIO_Init+0x160>)
 800168a:	f001 fd21 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800168e:	2310      	movs	r3, #16
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	481b      	ldr	r0, [pc, #108]	; (8001714 <MX_GPIO_Init+0x164>)
 80016a6:	f001 fd13 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4815      	ldr	r0, [pc, #84]	; (8001718 <MX_GPIO_Init+0x168>)
 80016c4:	f001 fd04 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <MX_GPIO_Init+0x160>)
 80016e2:	f001 fcf5 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016e6:	2308      	movs	r3, #8
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_GPIO_Init+0x168>)
 80016fe:	f001 fce7 	bl	80030d0 <HAL_GPIO_Init>

}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020800 	.word	0x40020800
 8001718:	40020400 	.word	0x40020400

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>

08001726 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e033      	b.n	80017a4 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fc07 	bl	8001f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d118      	bne.n	8001796 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800176c:	f023 0302 	bic.w	r3, r3, #2
 8001770:	f043 0202 	orr.w	r2, r3, #2
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fac9 	bl	8001d10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f023 0303 	bic.w	r3, r3, #3
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
 8001794:	e001      	b.n	800179a <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Start+0x1a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e097      	b.n	80018f6 <HAL_ADC_Start+0x14a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d018      	beq.n	800180e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ec:	4b45      	ldr	r3, [pc, #276]	; (8001904 <HAL_ADC_Start+0x158>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a45      	ldr	r2, [pc, #276]	; (8001908 <HAL_ADC_Start+0x15c>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0c9a      	lsrs	r2, r3, #18
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001800:	e002      	b.n	8001808 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3b01      	subs	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d15f      	bne.n	80018dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185a:	d106      	bne.n	800186a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	f023 0206 	bic.w	r2, r3, #6
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	645a      	str	r2, [r3, #68]	; 0x44
 8001868:	e002      	b.n	8001870 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_ADC_Start+0x160>)
 800187a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001884:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d129      	bne.n	80018f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	e020      	b.n	80018f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_ADC_Start+0x164>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d11b      	bne.n	80018f4 <HAL_ADC_Start+0x148>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d114      	bne.n	80018f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	e00b      	b.n	80018f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f043 0210 	orr.w	r2, r3, #16
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83
 800190c:	40012300 	.word	0x40012300
 8001910:	40012000 	.word	0x40012000

08001914 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_ADC_Stop+0x16>
 8001926:	2302      	movs	r3, #2
 8001928:	e021      	b.n	800196e <HAL_ADC_Stop+0x5a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d113      	bne.n	80019c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a6:	d10b      	bne.n	80019c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f043 0220 	orr.w	r2, r3, #32
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e063      	b.n	8001a88 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c0:	f000 fede 	bl	8002780 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019c6:	e021      	b.n	8001a0c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ce:	d01d      	beq.n	8001a0c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_ADC_PollForConversion+0x6c>
 80019d6:	f000 fed3 	bl	8002780 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d212      	bcs.n	8001a0c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d00b      	beq.n	8001a0c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f043 0204 	orr.w	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e03d      	b.n	8001a88 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d1d6      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f06f 0212 	mvn.w	r2, #18
 8001a22:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d123      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11f      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d111      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1c>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e113      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x244>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d925      	bls.n	8001b24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68d9      	ldr	r1, [r3, #12]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	3b1e      	subs	r3, #30
 8001aee:	2207      	movs	r2, #7
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43da      	mvns	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	400a      	ands	r2, r1
 8001afc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68d9      	ldr	r1, [r3, #12]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4603      	mov	r3, r0
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4403      	add	r3, r0
 8001b16:	3b1e      	subs	r3, #30
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	e022      	b.n	8001b6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	2207      	movs	r2, #7
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	400a      	ands	r2, r1
 8001b46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4403      	add	r3, r0
 8001b60:	409a      	lsls	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d824      	bhi.n	8001bbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	3b05      	subs	r3, #5
 8001b84:	221f      	movs	r2, #31
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	400a      	ands	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b05      	subs	r3, #5
 8001bae:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bba:	e04c      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	d824      	bhi.n	8001c0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b23      	subs	r3, #35	; 0x23
 8001bd6:	221f      	movs	r2, #31
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	400a      	ands	r2, r1
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b23      	subs	r3, #35	; 0x23
 8001c00:	fa00 f203 	lsl.w	r2, r0, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0c:	e023      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b41      	subs	r3, #65	; 0x41
 8001c20:	221f      	movs	r2, #31
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b41      	subs	r3, #65	; 0x41
 8001c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_ADC_ConfigChannel+0x250>)
 8001c58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_ADC_ConfigChannel+0x254>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d10f      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1d8>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b12      	cmp	r3, #18
 8001c6a:	d10b      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_ADC_ConfigChannel+0x254>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12b      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x23a>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_ADC_ConfigChannel+0x258>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d003      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x1f4>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b11      	cmp	r3, #17
 8001c9e:	d122      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_ADC_ConfigChannel+0x258>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d111      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_ADC_ConfigChannel+0x25c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_ADC_ConfigChannel+0x260>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	0c9a      	lsrs	r2, r3, #18
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40012300 	.word	0x40012300
 8001d00:	40012000 	.word	0x40012000
 8001d04:	10000012 	.word	0x10000012
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d18:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <ADC_Init+0x1f0>)
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <ADC_Init+0x1f4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d022      	beq.n	8001dee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6899      	ldr	r1, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e00f      	b.n	8001e0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0202 	bic.w	r2, r2, #2
 8001e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
 8001e28:	005a      	lsls	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01b      	beq.n	8001e74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	035a      	lsls	r2, r3, #13
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e007      	b.n	8001e84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	051a      	lsls	r2, r3, #20
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec6:	025a      	lsls	r2, r3, #9
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	029a      	lsls	r2, r3, #10
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40012300 	.word	0x40012300
 8001f04:	0f000001 	.word	0x0f000001

08001f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <HAL_ADC_MspInit+0xb0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d141      	bne.n	8001ffe <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b23      	ldr	r3, [pc, #140]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_ADC_MspInit+0xb4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <HAL_ADC_MspInit+0xb8>)
 8001fe2:	f001 f875 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fea:	2303      	movs	r3, #3
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4806      	ldr	r0, [pc, #24]	; (8002014 <HAL_ADC_MspInit+0xbc>)
 8001ffa:	f001 f869 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40012000 	.word	0x40012000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020800 	.word	0x40020800
 8002014:	40020000 	.word	0x40020000

08002018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_I2C_MspInit+0x94>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d133      	bne.n	80020a2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <HAL_I2C_MspInit+0x98>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_I2C_MspInit+0x98>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_I2C_MspInit+0x98>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002066:	2304      	movs	r3, #4
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4810      	ldr	r0, [pc, #64]	; (80020b4 <HAL_I2C_MspInit+0x9c>)
 8002072:	f001 f82d 	bl	80030d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_I2C_MspInit+0x98>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <HAL_I2C_MspInit+0x98>)
 8002080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_I2C_MspInit+0x98>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	201f      	movs	r0, #31
 8002098:	f000 fc59 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800209c:	201f      	movs	r0, #31
 800209e:	f000 fc72 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40005400 	.word	0x40005400
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020400 	.word	0x40020400

080020b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_TIM_PWM_MspInit+0x48>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d115      	bne.n	80020f6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_TIM_PWM_MspInit+0x4c>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <HAL_TIM_PWM_MspInit+0x4c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_TIM_PWM_MspInit+0x4c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2019      	movs	r0, #25
 80020ec:	f000 fc2f 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020f0:	2019      	movs	r0, #25
 80020f2:	f000 fc48 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40010000 	.word	0x40010000
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d12c      	bne.n	8002184 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_TIM_Encoder_MspInit+0x84>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_TIM_Encoder_MspInit+0x84>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_TIM_Encoder_MspInit+0x84>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_TIM_Encoder_MspInit+0x84>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <HAL_TIM_Encoder_MspInit+0x84>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_TIM_Encoder_MspInit+0x84>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002162:	f248 0302 	movw	r3, #32770	; 0x8002
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002174:	2301      	movs	r3, #1
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	4804      	ldr	r0, [pc, #16]	; (8002190 <HAL_TIM_Encoder_MspInit+0x88>)
 8002180:	f000 ffa6 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_TIM_Base_MspInit+0x70>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_TIM_Base_MspInit+0x74>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_TIM_Base_MspInit+0x74>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_TIM_Base_MspInit+0x74>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80021c2:	e01a      	b.n	80021fa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_TIM_Base_MspInit+0x78>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d115      	bne.n	80021fa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_TIM_Base_MspInit+0x74>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_TIM_Base_MspInit+0x74>)
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_TIM_Base_MspInit+0x74>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	2019      	movs	r0, #25
 80021f0:	f000 fbad 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021f4:	2019      	movs	r0, #25
 80021f6:	f000 fbc6 	bl	8002986 <HAL_NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40000400 	.word	0x40000400
 8002208:	40023800 	.word	0x40023800
 800220c:	40014400 	.word	0x40014400

08002210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a12      	ldr	r2, [pc, #72]	; (8002278 <HAL_TIM_MspPostInit+0x68>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d11e      	bne.n	8002270 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_TIM_MspPostInit+0x6c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_TIM_MspPostInit+0x6c>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_TIM_MspPostInit+0x6c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800224e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002260:	2301      	movs	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4619      	mov	r1, r3
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_TIM_MspPostInit+0x70>)
 800226c:	f000 ff30 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40010000 	.word	0x40010000
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a4c      	ldr	r2, [pc, #304]	; (80023d4 <HAL_UART_MspInit+0x150>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f040 8092 	bne.w	80023cc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <HAL_UART_MspInit+0x154>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	4a49      	ldr	r2, [pc, #292]	; (80023d8 <HAL_UART_MspInit+0x154>)
 80022b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b6:	6413      	str	r3, [r2, #64]	; 0x40
 80022b8:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_UART_MspInit+0x154>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_UART_MspInit+0x154>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	4a42      	ldr	r2, [pc, #264]	; (80023d8 <HAL_UART_MspInit+0x154>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6313      	str	r3, [r2, #48]	; 0x30
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_UART_MspInit+0x154>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022e0:	230c      	movs	r3, #12
 80022e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f0:	2307      	movs	r3, #7
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4619      	mov	r1, r3
 80022fa:	4838      	ldr	r0, [pc, #224]	; (80023dc <HAL_UART_MspInit+0x158>)
 80022fc:	f000 fee8 	bl	80030d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002300:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002302:	4a38      	ldr	r2, [pc, #224]	; (80023e4 <HAL_UART_MspInit+0x160>)
 8002304:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800230c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 800231c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002320:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002322:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002324:	2200      	movs	r2, #0
 8002326:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800232e:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002334:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002338:	2200      	movs	r2, #0
 800233a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 800233e:	2200      	movs	r2, #0
 8002340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002342:	4827      	ldr	r0, [pc, #156]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002344:	f000 fb3a 	bl	80029bc <HAL_DMA_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800234e:	f7ff f9e5 	bl	800171c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
 8002358:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_UART_MspInit+0x15c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002360:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_UART_MspInit+0x168>)
 8002362:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800236a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_UART_MspInit+0x164>)
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_UART_MspInit+0x164>)
 800237a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002382:	2200      	movs	r2, #0
 8002384:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_UART_MspInit+0x164>)
 800238e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002392:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_UART_MspInit+0x164>)
 8002396:	2200      	movs	r2, #0
 8002398:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_UART_MspInit+0x164>)
 800239c:	2200      	movs	r2, #0
 800239e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023a0:	4811      	ldr	r0, [pc, #68]	; (80023e8 <HAL_UART_MspInit+0x164>)
 80023a2:	f000 fb0b 	bl	80029bc <HAL_DMA_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80023ac:	f7ff f9b6 	bl	800171c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_UART_MspInit+0x164>)
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <HAL_UART_MspInit+0x164>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	2026      	movs	r0, #38	; 0x26
 80023c2:	f000 fac4 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c6:	2026      	movs	r0, #38	; 0x26
 80023c8:	f000 fadd 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40004400 	.word	0x40004400
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	200003f8 	.word	0x200003f8
 80023e4:	40026088 	.word	0x40026088
 80023e8:	20000458 	.word	0x20000458
 80023ec:	400260a0 	.word	0x400260a0

080023f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <NMI_Handler+0x4>

080023f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <HardFault_Handler+0x4>

080023fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <MemManage_Handler+0x4>

08002402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <BusFault_Handler+0x4>

08002408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <UsageFault_Handler+0x4>

0800240e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243c:	f000 f98c 	bl	8002758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}

08002444 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <DMA1_Stream5_IRQHandler+0x10>)
 800244a:	f000 fbf7 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200003f8 	.word	0x200003f8

08002458 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <DMA1_Stream6_IRQHandler+0x10>)
 800245e:	f000 fbed 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000458 	.word	0x20000458

0800246c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002472:	f003 fc53 	bl	8005d1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002478:	f003 fc50 	bl	8005d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000294 	.word	0x20000294
 8002484:	2000036c 	.word	0x2000036c

08002488 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <I2C1_EV_IRQHandler+0x10>)
 800248e:	f001 f901 	bl	8003694 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000240 	.word	0x20000240

0800249c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <USART2_IRQHandler+0x10>)
 80024a2:	f004 faed 	bl	8006a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200003b4 	.word	0x200003b4

080024b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	return 1;
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_kill>:

int _kill(int pid, int sig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ca:	f005 f99f 	bl	800780c <__errno>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2216      	movs	r2, #22
 80024d2:	601a      	str	r2, [r3, #0]
	return -1;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_exit>:

void _exit (int status)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ffe7 	bl	80024c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f2:	e7fe      	b.n	80024f2 <_exit+0x12>

080024f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e00a      	b.n	800251c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002506:	f3af 8000 	nop.w
 800250a:	4601      	mov	r1, r0
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	b2ca      	uxtb	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf0      	blt.n	8002506 <_read+0x12>
	}

return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e009      	b.n	8002554 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	60ba      	str	r2, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbf1      	blt.n	8002540 <_write+0x12>
	}
	return len;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_close>:

int _close(int file)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	return -1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	605a      	str	r2, [r3, #4]
	return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_isatty>:

int _isatty(int file)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	return 1;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <_sbrk+0x5c>)
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <_sbrk+0x60>)
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <_sbrk+0x64>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <_sbrk+0x68>)
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d207      	bcs.n	8002610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002600:	f005 f904 	bl	800780c <__errno>
 8002604:	4603      	mov	r3, r0
 8002606:	220c      	movs	r2, #12
 8002608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e009      	b.n	8002624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <_sbrk+0x64>)
 8002620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20020000 	.word	0x20020000
 8002630:	00000400 	.word	0x00000400
 8002634:	200004bc 	.word	0x200004bc
 8002638:	200004d8 	.word	0x200004d8

0800263c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <SystemInit+0x20>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <SystemInit+0x20>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002664:	480d      	ldr	r0, [pc, #52]	; (800269c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002666:	490e      	ldr	r1, [pc, #56]	; (80026a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800267c:	4c0b      	ldr	r4, [pc, #44]	; (80026ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800268a:	f7ff ffd7 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800268e:	f005 f8c3 	bl	8007818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002692:	f7fe fc53 	bl	8000f3c <main>
  bx  lr    
 8002696:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80026a4:	0800a6c4 	.word	0x0800a6c4
  ldr r2, =_sbss
 80026a8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80026ac:	200004d4 	.word	0x200004d4

080026b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <ADC_IRQHandler>
	...

080026b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_Init+0x40>)
 80026be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_Init+0x40>)
 80026ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_Init+0x40>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026dc:	2003      	movs	r0, #3
 80026de:	f000 f92b 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e2:	200f      	movs	r0, #15
 80026e4:	f000 f808 	bl	80026f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e8:	f7ff fc0e 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_InitTick+0x54>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_InitTick+0x58>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f943 	bl	80029a2 <HAL_SYSTICK_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00e      	b.n	8002744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b0f      	cmp	r3, #15
 800272a:	d80a      	bhi.n	8002742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272c:	2200      	movs	r2, #0
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f000 f90b 	bl	800294e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <HAL_InitTick+0x5c>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000000 	.word	0x20000000
 8002750:	20000008 	.word	0x20000008
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_IncTick+0x20>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_IncTick+0x24>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_IncTick+0x24>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000008 	.word	0x20000008
 800277c:	200004c0 	.word	0x200004c0

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	200004c0 	.word	0x200004c0

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <__NVIC_EnableIRQ+0x38>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	; (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
         );
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002904:	d301      	bcc.n	800290a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <SysTick_Config+0x40>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002912:	210f      	movs	r1, #15
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f7ff ff8e 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <SysTick_Config+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <SysTick_Config+0x40>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff29 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff ff3e 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff8e 	bl	800288c <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5d 	bl	8002838 <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff31 	bl	80027fc <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffa2 	bl	80028f4 <SysTick_Config>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff feda 	bl	8002780 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e099      	b.n	8002b0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f8:	e00f      	b.n	8002a1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029fa:	f7ff fec1 	bl	8002780 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d908      	bls.n	8002a1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2203      	movs	r2, #3
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e078      	b.n	8002b0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e8      	bne.n	80029fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_DMA_Init+0x158>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f023 0307 	bic.w	r3, r3, #7
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d117      	bne.n	8002ade <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00e      	beq.n	8002ade <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fa89 	bl	8002fd8 <DMA_CheckFifoParam>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2240      	movs	r2, #64	; 0x40
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ada:	2301      	movs	r3, #1
 8002adc:	e016      	b.n	8002b0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa40 	bl	8002f6c <DMA_CalcBaseAndBitshift>
 8002aec:	4603      	mov	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	223f      	movs	r2, #63	; 0x3f
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	f010803f 	.word	0xf010803f

08002b18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b26:	f7ff fe2b 	bl	8002780 <HAL_GetTick>
 8002b2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d008      	beq.n	8002b4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e052      	b.n	8002bf0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0216 	bic.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_DMA_Abort+0x62>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0208 	bic.w	r2, r2, #8
 8002b88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9a:	e013      	b.n	8002bc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9c:	f7ff fdf0 	bl	8002780 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d90c      	bls.n	8002bc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e015      	b.n	8002bf0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e4      	bne.n	8002b9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	223f      	movs	r2, #63	; 0x3f
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d004      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00c      	b.n	8002c30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2205      	movs	r2, #5
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c48:	4b8e      	ldr	r3, [pc, #568]	; (8002e84 <HAL_DMA_IRQHandler+0x248>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a8e      	ldr	r2, [pc, #568]	; (8002e88 <HAL_DMA_IRQHandler+0x24c>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0a9b      	lsrs	r3, r3, #10
 8002c54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	2208      	movs	r2, #8
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01a      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	2208      	movs	r2, #8
 8002c96:	409a      	lsls	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d012      	beq.n	8002cde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	2201      	movs	r2, #1
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f043 0202 	orr.w	r2, r3, #2
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	2204      	movs	r2, #4
 8002d02:	409a      	lsls	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f043 0204 	orr.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	2210      	movs	r2, #16
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d043      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d03c      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d36:	2210      	movs	r2, #16
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d024      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
 8002d6a:	e01f      	b.n	8002dac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01b      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
 8002d7c:	e016      	b.n	8002dac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0208 	bic.w	r2, r2, #8
 8002d9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2220      	movs	r2, #32
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 808f 	beq.w	8002edc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8087 	beq.w	8002edc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d136      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0216 	bic.w	r2, r2, #22
 8002df4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x1da>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0208 	bic.w	r2, r2, #8
 8002e24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	223f      	movs	r2, #63	; 0x3f
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d07e      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
        }
        return;
 8002e52:	e079      	b.n	8002f48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d031      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	e02c      	b.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000
 8002e88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
 8002e9c:	e01e      	b.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10f      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0210 	bic.w	r2, r2, #16
 8002eba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d032      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d022      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d307      	bcc.n	8002f24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f2      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x2cc>
 8002f22:	e000      	b.n	8002f26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
 8002f46:	e000      	b.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f48:	bf00      	nop
    }
  }
}
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f5e:	b2db      	uxtb	r3, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	3b10      	subs	r3, #16
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d909      	bls.n	8002fae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	1d1a      	adds	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	659a      	str	r2, [r3, #88]	; 0x58
 8002fac:	e007      	b.n	8002fbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	aaaaaaab 	.word	0xaaaaaaab
 8002fd4:	0800a2d0 	.word	0x0800a2d0

08002fd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11f      	bne.n	8003032 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d856      	bhi.n	80030a6 <DMA_CheckFifoParam+0xce>
 8002ff8:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <DMA_CheckFifoParam+0x28>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	08003011 	.word	0x08003011
 8003004:	08003023 	.word	0x08003023
 8003008:	08003011 	.word	0x08003011
 800300c:	080030a7 	.word	0x080030a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d046      	beq.n	80030aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003020:	e043      	b.n	80030aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800302a:	d140      	bne.n	80030ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003030:	e03d      	b.n	80030ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303a:	d121      	bne.n	8003080 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d837      	bhi.n	80030b2 <DMA_CheckFifoParam+0xda>
 8003042:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <DMA_CheckFifoParam+0x70>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	08003059 	.word	0x08003059
 800304c:	0800305f 	.word	0x0800305f
 8003050:	08003059 	.word	0x08003059
 8003054:	08003071 	.word	0x08003071
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      break;
 800305c:	e030      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d025      	beq.n	80030b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306e:	e022      	b.n	80030b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003078:	d11f      	bne.n	80030ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800307e:	e01c      	b.n	80030ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d903      	bls.n	800308e <DMA_CheckFifoParam+0xb6>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d003      	beq.n	8003094 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800308c:	e018      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
      break;
 8003092:	e015      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00e      	beq.n	80030be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	e00b      	b.n	80030be <DMA_CheckFifoParam+0xe6>
      break;
 80030a6:	bf00      	nop
 80030a8:	e00a      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e008      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e006      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e004      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030b6:	bf00      	nop
 80030b8:	e002      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80030ba:	bf00      	nop
 80030bc:	e000      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030be:	bf00      	nop
    }
  } 
  
  return status; 
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	; 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e159      	b.n	80033a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ec:	2201      	movs	r2, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	f040 8148 	bne.w	800339a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d005      	beq.n	8003122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	2b02      	cmp	r3, #2
 8003120:	d130      	bne.n	8003184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	2203      	movs	r2, #3
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 0201 	and.w	r2, r3, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b03      	cmp	r3, #3
 800318e:	d017      	beq.n	80031c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d123      	bne.n	8003214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	08da      	lsrs	r2, r3, #3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3208      	adds	r2, #8
 80031d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	08da      	lsrs	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3208      	adds	r2, #8
 800320e:	69b9      	ldr	r1, [r7, #24]
 8003210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0203 	and.w	r2, r3, #3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a2 	beq.w	800339a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_GPIO_Init+0x2e8>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	4a56      	ldr	r2, [pc, #344]	; (80033b8 <HAL_GPIO_Init+0x2e8>)
 8003260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003264:	6453      	str	r3, [r2, #68]	; 0x44
 8003266:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <HAL_GPIO_Init+0x2e8>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003272:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_GPIO_Init+0x2ec>)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	3302      	adds	r3, #2
 800327a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	220f      	movs	r2, #15
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a49      	ldr	r2, [pc, #292]	; (80033c0 <HAL_GPIO_Init+0x2f0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d019      	beq.n	80032d2 <HAL_GPIO_Init+0x202>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a48      	ldr	r2, [pc, #288]	; (80033c4 <HAL_GPIO_Init+0x2f4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_GPIO_Init+0x1fe>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a47      	ldr	r2, [pc, #284]	; (80033c8 <HAL_GPIO_Init+0x2f8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00d      	beq.n	80032ca <HAL_GPIO_Init+0x1fa>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a46      	ldr	r2, [pc, #280]	; (80033cc <HAL_GPIO_Init+0x2fc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <HAL_GPIO_Init+0x1f6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a45      	ldr	r2, [pc, #276]	; (80033d0 <HAL_GPIO_Init+0x300>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_GPIO_Init+0x1f2>
 80032be:	2304      	movs	r3, #4
 80032c0:	e008      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032c2:	2307      	movs	r3, #7
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032d2:	2300      	movs	r3, #0
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e4:	4935      	ldr	r1, [pc, #212]	; (80033bc <HAL_GPIO_Init+0x2ec>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f2:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_GPIO_Init+0x304>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800331c:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <HAL_GPIO_Init+0x304>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003346:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336a:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <HAL_GPIO_Init+0x304>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003370:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003394:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_GPIO_Init+0x304>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	f67f aea2 	bls.w	80030ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40013c00 	.word	0x40013c00

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e12b      	b.n	8003676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe fdf0 	bl	8002018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003470:	f002 f946 	bl	8005700 <HAL_RCC_GetPCLK1Freq>
 8003474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a81      	ldr	r2, [pc, #516]	; (8003680 <HAL_I2C_Init+0x274>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d807      	bhi.n	8003490 <HAL_I2C_Init+0x84>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a80      	ldr	r2, [pc, #512]	; (8003684 <HAL_I2C_Init+0x278>)
 8003484:	4293      	cmp	r3, r2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e006      	b.n	800349e <HAL_I2C_Init+0x92>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a7d      	ldr	r2, [pc, #500]	; (8003688 <HAL_I2C_Init+0x27c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	bf94      	ite	ls
 8003498:	2301      	movls	r3, #1
 800349a:	2300      	movhi	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0e7      	b.n	8003676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a78      	ldr	r2, [pc, #480]	; (800368c <HAL_I2C_Init+0x280>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0c9b      	lsrs	r3, r3, #18
 80034b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a6a      	ldr	r2, [pc, #424]	; (8003680 <HAL_I2C_Init+0x274>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d802      	bhi.n	80034e0 <HAL_I2C_Init+0xd4>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3301      	adds	r3, #1
 80034de:	e009      	b.n	80034f4 <HAL_I2C_Init+0xe8>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	4a69      	ldr	r2, [pc, #420]	; (8003690 <HAL_I2C_Init+0x284>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	3301      	adds	r3, #1
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003506:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	495c      	ldr	r1, [pc, #368]	; (8003680 <HAL_I2C_Init+0x274>)
 8003510:	428b      	cmp	r3, r1
 8003512:	d819      	bhi.n	8003548 <HAL_I2C_Init+0x13c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e59      	subs	r1, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003528:	400b      	ands	r3, r1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_I2C_Init+0x138>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1e59      	subs	r1, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fbb1 f3f3 	udiv	r3, r1, r3
 800353c:	3301      	adds	r3, #1
 800353e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003542:	e051      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 8003544:	2304      	movs	r3, #4
 8003546:	e04f      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d111      	bne.n	8003574 <HAL_I2C_Init+0x168>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	440b      	add	r3, r1
 800355e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e012      	b.n	800359a <HAL_I2C_Init+0x18e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e58      	subs	r0, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	0099      	lsls	r1, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	fbb0 f3f3 	udiv	r3, r0, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Init+0x196>
 800359e:	2301      	movs	r3, #1
 80035a0:	e022      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10e      	bne.n	80035c8 <HAL_I2C_Init+0x1bc>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1e58      	subs	r0, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	440b      	add	r3, r1
 80035b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c6:	e00f      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1e58      	subs	r0, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	0099      	lsls	r1, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	fbb0 f3f3 	udiv	r3, r0, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	6809      	ldr	r1, [r1, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6911      	ldr	r1, [r2, #16]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	000186a0 	.word	0x000186a0
 8003684:	001e847f 	.word	0x001e847f
 8003688:	003d08ff 	.word	0x003d08ff
 800368c:	431bde83 	.word	0x431bde83
 8003690:	10624dd3 	.word	0x10624dd3

08003694 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d003      	beq.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	f040 80c1 	bne.w	800384e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10d      	bne.n	8003702 <HAL_I2C_EV_IRQHandler+0x6e>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80036ec:	d003      	beq.n	80036f6 <HAL_I2C_EV_IRQHandler+0x62>
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_EV_IRQHandler+0x66>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_I2C_EV_IRQHandler+0x68>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	f000 8132 	beq.w	8003966 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_I2C_EV_IRQHandler+0x92>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	0a5b      	lsrs	r3, r3, #9
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f001 fb65 	bl	8004de8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fcdc 	bl	80040dc <I2C_Master_SB>
 8003724:	e092      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	08db      	lsrs	r3, r3, #3
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0xb2>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	0a5b      	lsrs	r3, r3, #9
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fd52 	bl	80041e8 <I2C_Master_ADD10>
 8003744:	e082      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0xd2>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	0a5b      	lsrs	r3, r3, #9
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fd6c 	bl	800423c <I2C_Master_ADDR>
 8003764:	e072      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03b      	beq.n	80037ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003780:	f000 80f3 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	09db      	lsrs	r3, r3, #7
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00f      	beq.n	80037b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f94c 	bl	8003a46 <I2C_MasterTransmit_TXE>
 80037ae:	e04d      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80d6 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	0a5b      	lsrs	r3, r3, #9
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80cf 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037cc:	7bbb      	ldrb	r3, [r7, #14]
 80037ce:	2b21      	cmp	r3, #33	; 0x21
 80037d0:	d103      	bne.n	80037da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f9d3 	bl	8003b7e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d8:	e0c7      	b.n	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	f040 80c4 	bne.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa41 	bl	8003c6a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e8:	e0bf      	b.n	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f8:	f000 80b7 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00f      	beq.n	8003828 <HAL_I2C_EV_IRQHandler+0x194>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	0a9b      	lsrs	r3, r3, #10
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <HAL_I2C_EV_IRQHandler+0x194>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fab6 	bl	8003d92 <I2C_MasterReceive_RXNE>
 8003826:	e011      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 809a 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	0a5b      	lsrs	r3, r3, #9
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8093 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fb5f 	bl	8003f08 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800384a:	e08e      	b.n	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
 800384c:	e08d      	b.n	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e007      	b.n	8003870 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	0a5b      	lsrs	r3, r3, #9
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003898:	69b9      	ldr	r1, [r7, #24]
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 ff1d 	bl	80046da <I2C_Slave_ADDR>
 80038a0:	e066      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	0a5b      	lsrs	r3, r3, #9
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 ff58 	bl	8004770 <I2C_Slave_STOPF>
 80038c0:	e056      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038c2:	7bbb      	ldrb	r3, [r7, #14]
 80038c4:	2b21      	cmp	r3, #33	; 0x21
 80038c6:	d002      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0x23a>
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	2b29      	cmp	r3, #41	; 0x29
 80038cc:	d125      	bne.n	800391a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	09db      	lsrs	r3, r3, #7
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00f      	beq.n	80038fa <HAL_I2C_EV_IRQHandler+0x266>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0a9b      	lsrs	r3, r3, #10
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_I2C_EV_IRQHandler+0x266>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fe33 	bl	800455e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038f8:	e039      	b.n	800396e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d033      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x2da>
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	0a5b      	lsrs	r3, r3, #9
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02d      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fe60 	bl	80045d8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003918:	e029      	b.n	800396e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00f      	beq.n	8003946 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	0a9b      	lsrs	r3, r3, #10
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fe6b 	bl	800461a <I2C_SlaveReceive_RXNE>
 8003944:	e014      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00e      	beq.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	0a5b      	lsrs	r3, r3, #9
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fe99 	bl	8004696 <I2C_SlaveReceive_BTF>
 8003964:	e004      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003966:	bf00      	nop
 8003968:	e002      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800396e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	70fb      	strb	r3, [r7, #3]
 80039d2:	4613      	mov	r3, r2
 80039d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d150      	bne.n	8003b0e <I2C_MasterTransmit_TXE+0xc8>
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b21      	cmp	r3, #33	; 0x21
 8003a70:	d14d      	bne.n	8003b0e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d01d      	beq.n	8003ab4 <I2C_MasterTransmit_TXE+0x6e>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d01a      	beq.n	8003ab4 <I2C_MasterTransmit_TXE+0x6e>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a84:	d016      	beq.n	8003ab4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a94:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2211      	movs	r2, #17
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff62 	bl	8003976 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ab2:	e060      	b.n	8003b76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ac2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d107      	bne.n	8003afe <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ff7d 	bl	80039f6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003afc:	e03b      	b.n	8003b76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ff35 	bl	8003976 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b0c:	e033      	b.n	8003b76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b21      	cmp	r3, #33	; 0x21
 8003b12:	d005      	beq.n	8003b20 <I2C_MasterTransmit_TXE+0xda>
 8003b14:	7bbb      	ldrb	r3, [r7, #14]
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d12d      	bne.n	8003b76 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b22      	cmp	r3, #34	; 0x22
 8003b1e:	d12a      	bne.n	8003b76 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d108      	bne.n	8003b3c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b3a:	e01c      	b.n	8003b76 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d103      	bne.n	8003b50 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f88e 	bl	8003c6a <I2C_MemoryTransmit_TXE_BTF>
}
 8003b4e:	e012      	b.n	8003b76 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b74:	e7ff      	b.n	8003b76 <I2C_MasterTransmit_TXE+0x130>
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b21      	cmp	r3, #33	; 0x21
 8003b96:	d164      	bne.n	8003c62 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bc6:	e04c      	b.n	8003c62 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d01d      	beq.n	8003c0a <I2C_MasterTransmit_BTF+0x8c>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d01a      	beq.n	8003c0a <I2C_MasterTransmit_BTF+0x8c>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bda:	d016      	beq.n	8003c0a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bea:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2211      	movs	r2, #17
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff feb7 	bl	8003976 <HAL_I2C_MasterTxCpltCallback>
}
 8003c08:	e02b      	b.n	8003c62 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c18:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c28:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d107      	bne.n	8003c54 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fed2 	bl	80039f6 <HAL_I2C_MemTxCpltCallback>
}
 8003c52:	e006      	b.n	8003c62 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fe8a 	bl	8003976 <HAL_I2C_MasterTxCpltCallback>
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11d      	bne.n	8003cbe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d10b      	bne.n	8003ca2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ca0:	e073      	b.n	8003d8a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	121b      	asrs	r3, r3, #8
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cbc:	e065      	b.n	8003d8a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10b      	bne.n	8003cde <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cdc:	e055      	b.n	8003d8a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d151      	bne.n	8003d8a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b22      	cmp	r3, #34	; 0x22
 8003cea:	d10d      	bne.n	8003d08 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d06:	e040      	b.n	8003d8a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d015      	beq.n	8003d3e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b21      	cmp	r3, #33	; 0x21
 8003d16:	d112      	bne.n	8003d3e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d3c:	e025      	b.n	8003d8a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d120      	bne.n	8003d8a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b21      	cmp	r3, #33	; 0x21
 8003d4c:	d11d      	bne.n	8003d8a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d5c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fe36 	bl	80039f6 <HAL_I2C_MemTxCpltCallback>
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b22      	cmp	r3, #34	; 0x22
 8003da4:	f040 80ac 	bne.w	8003f00 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d921      	bls.n	8003dfa <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	f040 808c 	bne.w	8003f00 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003df8:	e082      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d075      	beq.n	8003eee <I2C_MasterReceive_RXNE+0x15c>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d002      	beq.n	8003e0e <I2C_MasterReceive_RXNE+0x7c>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d16f      	bne.n	8003eee <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 ffb8 	bl	8004d84 <I2C_WaitOnSTOPRequestThroughIT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d142      	bne.n	8003ea0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e38:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d10a      	bne.n	8003e8a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fdc1 	bl	8003a0a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e88:	e03a      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2212      	movs	r2, #18
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fd76 	bl	800398a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e9e:	e02f      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fd99 	bl	8003a1e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eec:	e008      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efc:	605a      	str	r2, [r3, #4]
}
 8003efe:	e7ff      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x16e>
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d11b      	bne.n	8003f58 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f56:	e0bd      	b.n	80040d4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d129      	bne.n	8003fb6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00a      	beq.n	8003f8e <I2C_MasterReceive_BTF+0x86>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d007      	beq.n	8003f8e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fb4:	e08e      	b.n	80040d4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d176      	bne.n	80040ae <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <I2C_MasterReceive_BTF+0xc4>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d108      	bne.n	8003fde <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e019      	b.n	8004012 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d002      	beq.n	8003fea <I2C_MasterReceive_BTF+0xe2>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d108      	bne.n	8003ffc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e00a      	b.n	8004012 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d007      	beq.n	8004012 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004010:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800406c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d10a      	bne.n	8004098 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fcba 	bl	8003a0a <HAL_I2C_MemRxCpltCallback>
}
 8004096:	e01d      	b.n	80040d4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2212      	movs	r2, #18
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fc6f 	bl	800398a <HAL_I2C_MasterRxCpltCallback>
}
 80040ac:	e012      	b.n	80040d4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d117      	bne.n	8004120 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004108:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800410a:	e067      	b.n	80041dc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2da      	uxtb	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]
}
 800411e:	e05d      	b.n	80041dc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004128:	d133      	bne.n	8004192 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b21      	cmp	r3, #33	; 0x21
 8004134:	d109      	bne.n	800414a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004146:	611a      	str	r2, [r3, #16]
 8004148:	e008      	b.n	800415c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	b2da      	uxtb	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <I2C_Master_SB+0x92>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d032      	beq.n	80041dc <I2C_Master_SB+0x100>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d02d      	beq.n	80041dc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418e:	605a      	str	r2, [r3, #4]
}
 8004190:	e024      	b.n	80041dc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10e      	bne.n	80041b8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	b29b      	uxth	r3, r3
 80041a0:	11db      	asrs	r3, r3, #7
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 0306 	and.w	r3, r3, #6
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f063 030f 	orn	r3, r3, #15
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]
}
 80041b6:	e011      	b.n	80041dc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d10d      	bne.n	80041dc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	11db      	asrs	r3, r3, #7
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0306 	and.w	r3, r3, #6
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f063 030e 	orn	r3, r3, #14
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <I2C_Master_ADD10+0x26>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d108      	bne.n	8004220 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <I2C_Master_ADD10+0x48>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422e:	605a      	str	r2, [r3, #4]
  }
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800423c:	b480      	push	{r7}
 800423e:	b091      	sub	sp, #68	; 0x44
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b22      	cmp	r3, #34	; 0x22
 8004264:	f040 8169 	bne.w	800453a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10f      	bne.n	8004290 <I2C_Master_ADDR+0x54>
 8004270:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d10b      	bne.n	8004290 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004278:	2300      	movs	r3, #0
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	e160      	b.n	8004552 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	2b00      	cmp	r3, #0
 8004296:	d11d      	bne.n	80042d4 <I2C_Master_ADDR+0x98>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042a0:	d118      	bne.n	80042d4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
 80042d2:	e13e      	b.n	8004552 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d113      	bne.n	8004306 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042de:	2300      	movs	r3, #0
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e115      	b.n	8004532 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	f040 808a 	bne.w	8004426 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004318:	d137      	bne.n	800438a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004338:	d113      	bne.n	8004362 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004348:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	e0e7      	b.n	8004532 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e0d3      	b.n	8004532 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438c:	2b08      	cmp	r3, #8
 800438e:	d02e      	beq.n	80043ee <I2C_Master_ADDR+0x1b2>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	2b20      	cmp	r3, #32
 8004394:	d02b      	beq.n	80043ee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	2b12      	cmp	r3, #18
 800439a:	d102      	bne.n	80043a2 <I2C_Master_ADDR+0x166>
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d125      	bne.n	80043ee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d00e      	beq.n	80043c6 <I2C_Master_ADDR+0x18a>
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d00b      	beq.n	80043c6 <I2C_Master_ADDR+0x18a>
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d008      	beq.n	80043c6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e007      	b.n	80043d6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	e0a1      	b.n	8004532 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e085      	b.n	8004532 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d14d      	bne.n	80044cc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	2b04      	cmp	r3, #4
 8004434:	d016      	beq.n	8004464 <I2C_Master_ADDR+0x228>
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	2b02      	cmp	r3, #2
 800443a:	d013      	beq.n	8004464 <I2C_Master_ADDR+0x228>
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	2b10      	cmp	r3, #16
 8004440:	d010      	beq.n	8004464 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004450:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e007      	b.n	8004474 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004472:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004482:	d117      	bne.n	80044b4 <I2C_Master_ADDR+0x278>
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800448a:	d00b      	beq.n	80044a4 <I2C_Master_ADDR+0x268>
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	2b01      	cmp	r3, #1
 8004490:	d008      	beq.n	80044a4 <I2C_Master_ADDR+0x268>
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	2b08      	cmp	r3, #8
 8004496:	d005      	beq.n	80044a4 <I2C_Master_ADDR+0x268>
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	2b10      	cmp	r3, #16
 800449c:	d002      	beq.n	80044a4 <I2C_Master_ADDR+0x268>
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d107      	bne.n	80044b4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044b2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	e032      	b.n	8004532 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044da:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ea:	d117      	bne.n	800451c <I2C_Master_ADDR+0x2e0>
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044f2:	d00b      	beq.n	800450c <I2C_Master_ADDR+0x2d0>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d008      	beq.n	800450c <I2C_Master_ADDR+0x2d0>
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d005      	beq.n	800450c <I2C_Master_ADDR+0x2d0>
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	2b10      	cmp	r3, #16
 8004504:	d002      	beq.n	800450c <I2C_Master_ADDR+0x2d0>
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	2b20      	cmp	r3, #32
 800450a:	d107      	bne.n	800451c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800451a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004538:	e00b      	b.n	8004552 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	e7ff      	b.n	8004552 <I2C_Master_ADDR+0x316>
 8004552:	bf00      	nop
 8004554:	3744      	adds	r7, #68	; 0x44
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d02b      	beq.n	80045d0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d114      	bne.n	80045d0 <I2C_SlaveTransmit_TXE+0x72>
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b29      	cmp	r3, #41	; 0x29
 80045aa:	d111      	bne.n	80045d0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2221      	movs	r2, #33	; 0x21
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2228      	movs	r2, #40	; 0x28
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff f9e7 	bl	800399e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d011      	beq.n	800460e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02c      	beq.n	800468e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d114      	bne.n	800468e <I2C_SlaveReceive_RXNE+0x74>
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b2a      	cmp	r3, #42	; 0x2a
 8004668:	d111      	bne.n	800468e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004678:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2222      	movs	r2, #34	; 0x22
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2228      	movs	r2, #40	; 0x28
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff f992 	bl	80039b2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d012      	beq.n	80046ce <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046f4:	2b28      	cmp	r3, #40	; 0x28
 80046f6:	d127      	bne.n	8004748 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	089b      	lsrs	r3, r3, #2
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	09db      	lsrs	r3, r3, #7
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	81bb      	strh	r3, [r7, #12]
 800472a:	e002      	b.n	8004732 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800473a:	89ba      	ldrh	r2, [r7, #12]
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff f940 	bl	80039c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004746:	e00e      	b.n	8004766 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800478e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047cc:	d172      	bne.n	80048b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	2b22      	cmp	r3, #34	; 0x22
 80047d2:	d002      	beq.n	80047da <I2C_Slave_STOPF+0x6a>
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b2a      	cmp	r3, #42	; 0x2a
 80047d8:	d135      	bne.n	8004846 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fb9c 	bl	8002f50 <HAL_DMA_GetState>
 8004818:	4603      	mov	r3, r0
 800481a:	2b01      	cmp	r3, #1
 800481c:	d049      	beq.n	80048b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	4a69      	ldr	r2, [pc, #420]	; (80049c8 <I2C_Slave_STOPF+0x258>)
 8004824:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe f9e4 	bl	8002bf8 <HAL_DMA_Abort_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d03d      	beq.n	80048b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004844:	e035      	b.n	80048b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0204 	orr.w	r2, r3, #4
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004878:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fb66 	bl	8002f50 <HAL_DMA_GetState>
 8004884:	4603      	mov	r3, r0
 8004886:	2b01      	cmp	r3, #1
 8004888:	d014      	beq.n	80048b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	4a4e      	ldr	r2, [pc, #312]	; (80049c8 <I2C_Slave_STOPF+0x258>)
 8004890:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe f9ae 	bl	8002bf8 <HAL_DMA_Abort_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048ac:	4610      	mov	r0, r2
 80048ae:	4798      	blx	r3
 80048b0:	e000      	b.n	80048b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d03e      	beq.n	800493c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d112      	bne.n	80048f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	d112      	bne.n	8004926 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f043 0204 	orr.w	r2, r3, #4
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f843 	bl	80049d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800494a:	e039      	b.n	80049c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b2a      	cmp	r3, #42	; 0x2a
 8004950:	d109      	bne.n	8004966 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2228      	movs	r2, #40	; 0x28
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff f826 	bl	80039b2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b28      	cmp	r3, #40	; 0x28
 8004970:	d111      	bne.n	8004996 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <I2C_Slave_STOPF+0x25c>)
 8004976:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff f827 	bl	80039e2 <HAL_I2C_ListenCpltCallback>
}
 8004994:	e014      	b.n	80049c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	2b22      	cmp	r3, #34	; 0x22
 800499c:	d002      	beq.n	80049a4 <I2C_Slave_STOPF+0x234>
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b22      	cmp	r3, #34	; 0x22
 80049a2:	d10d      	bne.n	80049c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fe fff9 	bl	80039b2 <HAL_I2C_SlaveRxCpltCallback>
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	08004c35 	.word	0x08004c35
 80049cc:	ffff0000 	.word	0xffff0000

080049d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d002      	beq.n	80049f4 <I2C_ITError+0x24>
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d10a      	bne.n	8004a0a <I2C_ITError+0x3a>
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b22      	cmp	r3, #34	; 0x22
 80049f8:	d107      	bne.n	8004a0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a10:	2b28      	cmp	r3, #40	; 0x28
 8004a12:	d107      	bne.n	8004a24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2228      	movs	r2, #40	; 0x28
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a22:	e015      	b.n	8004a50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a32:	d00a      	beq.n	8004a4a <I2C_ITError+0x7a>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b60      	cmp	r3, #96	; 0x60
 8004a38:	d007      	beq.n	8004a4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5e:	d162      	bne.n	8004b26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d020      	beq.n	8004ac0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a82:	4a6a      	ldr	r2, [pc, #424]	; (8004c2c <I2C_ITError+0x25c>)
 8004a84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe f8b4 	bl	8002bf8 <HAL_DMA_Abort_IT>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8089 	beq.w	8004baa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aba:	4610      	mov	r0, r2
 8004abc:	4798      	blx	r3
 8004abe:	e074      	b.n	8004baa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	4a59      	ldr	r2, [pc, #356]	; (8004c2c <I2C_ITError+0x25c>)
 8004ac6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe f893 	bl	8002bf8 <HAL_DMA_Abort_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d068      	beq.n	8004baa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d10b      	bne.n	8004afe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b20:	4610      	mov	r0, r2
 8004b22:	4798      	blx	r3
 8004b24:	e041      	b.n	8004baa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b60      	cmp	r3, #96	; 0x60
 8004b30:	d125      	bne.n	8004b7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d10b      	bne.n	8004b66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fe ff5b 	bl	8003a32 <HAL_I2C_AbortCpltCallback>
 8004b7c:	e015      	b.n	8004baa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d10b      	bne.n	8004ba4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7fe ff3a 	bl	8003a1e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004be6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d113      	bne.n	8004c24 <I2C_ITError+0x254>
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b28      	cmp	r3, #40	; 0x28
 8004c00:	d110      	bne.n	8004c24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <I2C_ITError+0x260>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fe fedf 	bl	80039e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	08004c35 	.word	0x08004c35
 8004c30:	ffff0000 	.word	0xffff0000

08004c34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c4e:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <I2C_DMAAbort+0x148>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	08db      	lsrs	r3, r3, #3
 8004c54:	4a4a      	ldr	r2, [pc, #296]	; (8004d80 <I2C_DMAAbort+0x14c>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	0a1a      	lsrs	r2, r3, #8
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	00da      	lsls	r2, r3, #3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c7a:	e00a      	b.n	8004c92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c90:	d0ea      	beq.n	8004c68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	2200      	movs	r2, #0
 8004cb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b60      	cmp	r3, #96	; 0x60
 8004d02:	d10e      	bne.n	8004d22 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2200      	movs	r2, #0
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d1a:	6978      	ldr	r0, [r7, #20]
 8004d1c:	f7fe fe89 	bl	8003a32 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d20:	e027      	b.n	8004d72 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d22:	7cfb      	ldrb	r3, [r7, #19]
 8004d24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d28:	2b28      	cmp	r3, #40	; 0x28
 8004d2a:	d117      	bne.n	8004d5c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2228      	movs	r2, #40	; 0x28
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d5a:	e007      	b.n	8004d6c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d6c:	6978      	ldr	r0, [r7, #20]
 8004d6e:	f7fe fe56 	bl	8003a1e <HAL_I2C_ErrorCallback>
}
 8004d72:	bf00      	nop
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000000 	.word	0x20000000
 8004d80:	14f8b589 	.word	0x14f8b589

08004d84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	08db      	lsrs	r3, r3, #3
 8004d96:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	0a1a      	lsrs	r2, r3, #8
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e008      	b.n	8004dd4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd0:	d0e9      	beq.n	8004da6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	20000000 	.word	0x20000000
 8004de4:	14f8b589 	.word	0x14f8b589

08004de8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004df8:	d103      	bne.n	8004e02 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e00:	e007      	b.n	8004e12 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e0a:	d102      	bne.n	8004e12 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2208      	movs	r2, #8
 8004e10:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e267      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d075      	beq.n	8004f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e3e:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d00c      	beq.n	8004e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e4a:	4b85      	ldr	r3, [pc, #532]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d112      	bne.n	8004e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e56:	4b82      	ldr	r3, [pc, #520]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	4b7e      	ldr	r3, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d05b      	beq.n	8004f28 <HAL_RCC_OscConfig+0x108>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d157      	bne.n	8004f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e242      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d106      	bne.n	8004e94 <HAL_RCC_OscConfig+0x74>
 8004e86:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a75      	ldr	r2, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e01d      	b.n	8004ed0 <HAL_RCC_OscConfig+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x98>
 8004e9e:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6f      	ldr	r2, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4b6d      	ldr	r3, [pc, #436]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6c      	ldr	r2, [pc, #432]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCC_OscConfig+0xb0>
 8004eb8:	4b69      	ldr	r3, [pc, #420]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a68      	ldr	r2, [pc, #416]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d013      	beq.n	8004f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fc52 	bl	8002780 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee0:	f7fd fc4e 	bl	8002780 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e207      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef2:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0xc0>
 8004efe:	e014      	b.n	8004f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fd fc3e 	bl	8002780 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f08:	f7fd fc3a 	bl	8002780 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1f3      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1a:	4b51      	ldr	r3, [pc, #324]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0xe8>
 8004f26:	e000      	b.n	8004f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d063      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d11c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4e:	4b44      	ldr	r3, [pc, #272]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d116      	bne.n	8004f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_RCC_OscConfig+0x152>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e1c7      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4937      	ldr	r1, [pc, #220]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f86:	e03a      	b.n	8004ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d020      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <HAL_RCC_OscConfig+0x244>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7fd fbf3 	bl	8002780 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f9e:	f7fd fbef 	bl	8002780 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e1a8      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4925      	ldr	r1, [pc, #148]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]
 8004fd0:	e015      	b.n	8004ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_OscConfig+0x244>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fd fbd2 	bl	8002780 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe0:	f7fd fbce 	bl	8002780 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e187      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d036      	beq.n	8005078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <HAL_RCC_OscConfig+0x248>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fd fbb2 	bl	8002780 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005020:	f7fd fbae 	bl	8002780 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e167      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8005034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x200>
 800503e:	e01b      	b.n	8005078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_OscConfig+0x248>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005046:	f7fd fb9b 	bl	8002780 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504c:	e00e      	b.n	800506c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504e:	f7fd fb97 	bl	8002780 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d907      	bls.n	800506c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e150      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
 8005060:	40023800 	.word	0x40023800
 8005064:	42470000 	.word	0x42470000
 8005068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506c:	4b88      	ldr	r3, [pc, #544]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ea      	bne.n	800504e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8097 	beq.w	80051b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508a:	4b81      	ldr	r3, [pc, #516]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	4b7d      	ldr	r3, [pc, #500]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a7c      	ldr	r2, [pc, #496]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
 80050a6:	4b7a      	ldr	r3, [pc, #488]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b6:	4b77      	ldr	r3, [pc, #476]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d118      	bne.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050c2:	4b74      	ldr	r3, [pc, #464]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a73      	ldr	r2, [pc, #460]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ce:	f7fd fb57 	bl	8002780 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d6:	f7fd fb53 	bl	8002780 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e10c      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e8:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <HAL_RCC_OscConfig+0x2ea>
 80050fc:	4b64      	ldr	r3, [pc, #400]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a63      	ldr	r2, [pc, #396]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
 8005108:	e01c      	b.n	8005144 <HAL_RCC_OscConfig+0x324>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b05      	cmp	r3, #5
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0x30c>
 8005112:	4b5f      	ldr	r3, [pc, #380]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a5e      	ldr	r2, [pc, #376]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	4b5c      	ldr	r3, [pc, #368]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a5b      	ldr	r2, [pc, #364]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0x324>
 800512c:	4b58      	ldr	r3, [pc, #352]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a57      	ldr	r2, [pc, #348]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	4b55      	ldr	r3, [pc, #340]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a54      	ldr	r2, [pc, #336]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800513e:	f023 0304 	bic.w	r3, r3, #4
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fd fb18 	bl	8002780 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005154:	f7fd fb14 	bl	8002780 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0cb      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516a:	4b49      	ldr	r3, [pc, #292]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0ee      	beq.n	8005154 <HAL_RCC_OscConfig+0x334>
 8005176:	e014      	b.n	80051a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005178:	f7fd fb02 	bl	8002780 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517e:	e00a      	b.n	8005196 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005180:	f7fd fafe 	bl	8002780 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	; 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0b5      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005196:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ee      	bne.n	8005180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a8:	4b39      	ldr	r3, [pc, #228]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	4a38      	ldr	r2, [pc, #224]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80a1 	beq.w	8005300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051be:	4b34      	ldr	r3, [pc, #208]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d05c      	beq.n	8005284 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d141      	bne.n	8005256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	4b31      	ldr	r3, [pc, #196]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fd fad2 	bl	8002780 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fd face 	bl	8002780 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e087      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	4b27      	ldr	r3, [pc, #156]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	019b      	lsls	r3, r3, #6
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	3b01      	subs	r3, #1
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	491b      	ldr	r1, [pc, #108]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005228:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522e:	f7fd faa7 	bl	8002780 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fd faa3 	bl	8002780 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e05c      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x416>
 8005254:	e054      	b.n	8005300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525c:	f7fd fa90 	bl	8002780 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005264:	f7fd fa8c 	bl	8002780 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e045      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x444>
 8005282:	e03d      	b.n	8005300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d107      	bne.n	800529c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e038      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
 8005290:	40023800 	.word	0x40023800
 8005294:	40007000 	.word	0x40007000
 8005298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_RCC_OscConfig+0x4ec>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d028      	beq.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d121      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d11a      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d111      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	3b01      	subs	r3, #1
 80052e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800

08005310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0cc      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005324:	4b68      	ldr	r3, [pc, #416]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d90c      	bls.n	800534c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4b65      	ldr	r3, [pc, #404]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533a:	4b63      	ldr	r3, [pc, #396]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0b8      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d020      	beq.n	800539a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005364:	4b59      	ldr	r3, [pc, #356]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a58      	ldr	r2, [pc, #352]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800536e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800537c:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4a52      	ldr	r2, [pc, #328]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005388:	4b50      	ldr	r3, [pc, #320]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	494d      	ldr	r1, [pc, #308]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d044      	beq.n	8005430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d119      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d003      	beq.n	80053ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d107      	bne.n	80053de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ce:	4b3f      	ldr	r3, [pc, #252]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e06f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053de:	4b3b      	ldr	r3, [pc, #236]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e067      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ee:	4b37      	ldr	r3, [pc, #220]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 0203 	bic.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4934      	ldr	r1, [pc, #208]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005400:	f7fd f9be 	bl	8002780 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	e00a      	b.n	800541e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005408:	f7fd f9ba 	bl	8002780 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	; 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e04f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541e:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 020c 	and.w	r2, r3, #12
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	429a      	cmp	r2, r3
 800542e:	d1eb      	bne.n	8005408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d20c      	bcs.n	8005458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e032      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4916      	ldr	r1, [pc, #88]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	490e      	ldr	r1, [pc, #56]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005496:	f000 f821 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 800549a:	4602      	mov	r2, r0
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	490a      	ldr	r1, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x1c0>)
 80054a8:	5ccb      	ldrb	r3, [r1, r3]
 80054aa:	fa22 f303 	lsr.w	r3, r2, r3
 80054ae:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 80054b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fd f91e 	bl	80026f8 <HAL_InitTick>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40023c00 	.word	0x40023c00
 80054cc:	40023800 	.word	0x40023800
 80054d0:	0800a2b8 	.word	0x0800a2b8
 80054d4:	20000000 	.word	0x20000000
 80054d8:	20000004 	.word	0x20000004

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b094      	sub	sp, #80	; 0x50
 80054e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
 80054e8:	2300      	movs	r3, #0
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ec:	2300      	movs	r3, #0
 80054ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f4:	4b79      	ldr	r3, [pc, #484]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d00d      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x40>
 8005500:	2b08      	cmp	r3, #8
 8005502:	f200 80e1 	bhi.w	80056c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x34>
 800550a:	2b04      	cmp	r3, #4
 800550c:	d003      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0x3a>
 800550e:	e0db      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b73      	ldr	r3, [pc, #460]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005512:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005514:	e0db      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005516:	4b73      	ldr	r3, [pc, #460]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800551a:	e0d8      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800551c:	4b6f      	ldr	r3, [pc, #444]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005524:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005526:	4b6d      	ldr	r3, [pc, #436]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d063      	beq.n	80055fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	2200      	movs	r2, #0
 800553a:	63bb      	str	r3, [r7, #56]	; 0x38
 800553c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	633b      	str	r3, [r7, #48]	; 0x30
 8005546:	2300      	movs	r3, #0
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800554e:	4622      	mov	r2, r4
 8005550:	462b      	mov	r3, r5
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	0159      	lsls	r1, r3, #5
 800555c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005560:	0150      	lsls	r0, r2, #5
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4621      	mov	r1, r4
 8005568:	1a51      	subs	r1, r2, r1
 800556a:	6139      	str	r1, [r7, #16]
 800556c:	4629      	mov	r1, r5
 800556e:	eb63 0301 	sbc.w	r3, r3, r1
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005580:	4659      	mov	r1, fp
 8005582:	018b      	lsls	r3, r1, #6
 8005584:	4651      	mov	r1, sl
 8005586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800558a:	4651      	mov	r1, sl
 800558c:	018a      	lsls	r2, r1, #6
 800558e:	4651      	mov	r1, sl
 8005590:	ebb2 0801 	subs.w	r8, r2, r1
 8005594:	4659      	mov	r1, fp
 8005596:	eb63 0901 	sbc.w	r9, r3, r1
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ae:	4690      	mov	r8, r2
 80055b0:	4699      	mov	r9, r3
 80055b2:	4623      	mov	r3, r4
 80055b4:	eb18 0303 	adds.w	r3, r8, r3
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	462b      	mov	r3, r5
 80055bc:	eb49 0303 	adc.w	r3, r9, r3
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055ce:	4629      	mov	r1, r5
 80055d0:	024b      	lsls	r3, r1, #9
 80055d2:	4621      	mov	r1, r4
 80055d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055d8:	4621      	mov	r1, r4
 80055da:	024a      	lsls	r2, r1, #9
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e2:	2200      	movs	r2, #0
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ec:	f7fb fae4 	bl	8000bb8 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4613      	mov	r3, r2
 80055f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f8:	e058      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	099b      	lsrs	r3, r3, #6
 8005600:	2200      	movs	r2, #0
 8005602:	4618      	mov	r0, r3
 8005604:	4611      	mov	r1, r2
 8005606:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800560a:	623b      	str	r3, [r7, #32]
 800560c:	2300      	movs	r3, #0
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005614:	4642      	mov	r2, r8
 8005616:	464b      	mov	r3, r9
 8005618:	f04f 0000 	mov.w	r0, #0
 800561c:	f04f 0100 	mov.w	r1, #0
 8005620:	0159      	lsls	r1, r3, #5
 8005622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005626:	0150      	lsls	r0, r2, #5
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4641      	mov	r1, r8
 800562e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005632:	4649      	mov	r1, r9
 8005634:	eb63 0b01 	sbc.w	fp, r3, r1
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005644:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005648:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800564c:	ebb2 040a 	subs.w	r4, r2, sl
 8005650:	eb63 050b 	sbc.w	r5, r3, fp
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	00eb      	lsls	r3, r5, #3
 800565e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005662:	00e2      	lsls	r2, r4, #3
 8005664:	4614      	mov	r4, r2
 8005666:	461d      	mov	r5, r3
 8005668:	4643      	mov	r3, r8
 800566a:	18e3      	adds	r3, r4, r3
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	464b      	mov	r3, r9
 8005670:	eb45 0303 	adc.w	r3, r5, r3
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005682:	4629      	mov	r1, r5
 8005684:	028b      	lsls	r3, r1, #10
 8005686:	4621      	mov	r1, r4
 8005688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800568c:	4621      	mov	r1, r4
 800568e:	028a      	lsls	r2, r1, #10
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005696:	2200      	movs	r2, #0
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	61fa      	str	r2, [r7, #28]
 800569c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a0:	f7fb fa8a 	bl	8000bb8 <__aeabi_uldivmod>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4613      	mov	r3, r2
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCC_GetSysClockFreq+0x200>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	3301      	adds	r3, #1
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056c6:	e002      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3750      	adds	r7, #80	; 0x50
 80056d4:	46bd      	mov	sp, r7
 80056d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800
 80056e0:	00f42400 	.word	0x00f42400
 80056e4:	007a1200 	.word	0x007a1200

080056e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <HAL_RCC_GetHCLKFreq+0x14>)
 80056ee:	681b      	ldr	r3, [r3, #0]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20000000 	.word	0x20000000

08005700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005704:	f7ff fff0 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	0a9b      	lsrs	r3, r3, #10
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	4903      	ldr	r1, [pc, #12]	; (8005724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40023800 	.word	0x40023800
 8005724:	0800a2c8 	.word	0x0800a2c8

08005728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800572c:	f7ff ffdc 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 8005730:	4602      	mov	r2, r0
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	0b5b      	lsrs	r3, r3, #13
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <HAL_RCC_GetPCLK2Freq+0x24>)
 800573e:	5ccb      	ldrb	r3, [r1, r3]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40023800 	.word	0x40023800
 800574c:	0800a2c8 	.word	0x0800a2c8

08005750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e041      	b.n	80057e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc fd0c 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 fd88 	bl	80062a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	d001      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e044      	b.n	8005892 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d018      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x6c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005832:	d013      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x6c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00e      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x6c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d009      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x6c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <HAL_TIM_Base_Start_IT+0xbc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d004      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x6c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d111      	bne.n	8005880 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b06      	cmp	r3, #6
 800586c:	d010      	beq.n	8005890 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	e007      	b.n	8005890 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40000c00 	.word	0x40000c00
 80058b0:	40014000 	.word	0x40014000

080058b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e041      	b.n	800594a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fc fbec 	bl	80020b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f000 fcd6 	bl	80062a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <HAL_TIM_PWM_Start+0x24>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	e022      	b.n	80059be <HAL_TIM_PWM_Start+0x6a>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b04      	cmp	r3, #4
 800597c:	d109      	bne.n	8005992 <HAL_TIM_PWM_Start+0x3e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	bf14      	ite	ne
 800598a:	2301      	movne	r3, #1
 800598c:	2300      	moveq	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	e015      	b.n	80059be <HAL_TIM_PWM_Start+0x6a>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b08      	cmp	r3, #8
 8005996:	d109      	bne.n	80059ac <HAL_TIM_PWM_Start+0x58>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	e008      	b.n	80059be <HAL_TIM_PWM_Start+0x6a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e068      	b.n	8005a98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_PWM_Start+0x82>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d4:	e013      	b.n	80059fe <HAL_TIM_PWM_Start+0xaa>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_PWM_Start+0x92>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	e00b      	b.n	80059fe <HAL_TIM_PWM_Start+0xaa>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Start+0xa2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f4:	e003      	b.n	80059fe <HAL_TIM_PWM_Start+0xaa>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2201      	movs	r2, #1
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fef2 	bl	80067f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a23      	ldr	r2, [pc, #140]	; (8005aa0 <HAL_TIM_PWM_Start+0x14c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d107      	bne.n	8005a26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <HAL_TIM_PWM_Start+0x14c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d018      	beq.n	8005a62 <HAL_TIM_PWM_Start+0x10e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d013      	beq.n	8005a62 <HAL_TIM_PWM_Start+0x10e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <HAL_TIM_PWM_Start+0x150>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00e      	beq.n	8005a62 <HAL_TIM_PWM_Start+0x10e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <HAL_TIM_PWM_Start+0x154>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d009      	beq.n	8005a62 <HAL_TIM_PWM_Start+0x10e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a16      	ldr	r2, [pc, #88]	; (8005aac <HAL_TIM_PWM_Start+0x158>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_TIM_PWM_Start+0x10e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <HAL_TIM_PWM_Start+0x15c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d111      	bne.n	8005a86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b06      	cmp	r3, #6
 8005a72:	d010      	beq.n	8005a96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a84:	e007      	b.n	8005a96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0201 	orr.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40014000 	.word	0x40014000

08005ab4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e097      	b.n	8005bf8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d106      	bne.n	8005ae2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7fc fb13 	bl	8002108 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af8:	f023 0307 	bic.w	r3, r3, #7
 8005afc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f000 fbcb 	bl	80062a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	4313      	orrs	r3, r2
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b54:	f023 030c 	bic.w	r3, r3, #12
 8005b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	4313      	orrs	r3, r2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	011a      	lsls	r2, r3, #4
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	031b      	lsls	r3, r3, #12
 8005b84:	4313      	orrs	r3, r2
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d110      	bne.n	8005c52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d102      	bne.n	8005c3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c36:	7b7b      	ldrb	r3, [r7, #13]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d001      	beq.n	8005c40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e069      	b.n	8005d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c50:	e031      	b.n	8005cb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d110      	bne.n	8005c7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d102      	bne.n	8005c64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c5e:	7b3b      	ldrb	r3, [r7, #12]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d001      	beq.n	8005c68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e055      	b.n	8005d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c78:	e01d      	b.n	8005cb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d108      	bne.n	8005c92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c80:	7bbb      	ldrb	r3, [r7, #14]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d105      	bne.n	8005c92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c86:	7b7b      	ldrb	r3, [r7, #13]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d102      	bne.n	8005c92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c8c:	7b3b      	ldrb	r3, [r7, #12]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e03e      	b.n	8005d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_TIM_Encoder_Start+0xc4>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d008      	beq.n	8005cd4 <HAL_TIM_Encoder_Start+0xd4>
 8005cc2:	e00f      	b.n	8005ce4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fd8f 	bl	80067f0 <TIM_CCxChannelCmd>
      break;
 8005cd2:	e016      	b.n	8005d02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	2104      	movs	r1, #4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fd87 	bl	80067f0 <TIM_CCxChannelCmd>
      break;
 8005ce2:	e00e      	b.n	8005d02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fd7f 	bl	80067f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	2104      	movs	r1, #4
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fd78 	bl	80067f0 <TIM_CCxChannelCmd>
      break;
 8005d00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0201 	orr.w	r2, r2, #1
 8005d10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d122      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d11b      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0202 	mvn.w	r2, #2
 8005d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa81 	bl	8006266 <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa73 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fa84 	bl	800627a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d122      	bne.n	8005dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d11b      	bne.n	8005dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0204 	mvn.w	r2, #4
 8005d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa57 	bl	8006266 <HAL_TIM_IC_CaptureCallback>
 8005db8:	e005      	b.n	8005dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa49 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fa5a 	bl	800627a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d122      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d11b      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0208 	mvn.w	r2, #8
 8005df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2204      	movs	r2, #4
 8005df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa2d 	bl	8006266 <HAL_TIM_IC_CaptureCallback>
 8005e0c:	e005      	b.n	8005e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa1f 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa30 	bl	800627a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d122      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d11b      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0210 	mvn.w	r2, #16
 8005e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa03 	bl	8006266 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9f5 	bl	8006252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa06 	bl	800627a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d10e      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d107      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0201 	mvn.w	r2, #1
 8005e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9cf 	bl	800623e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d10e      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d107      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fd82 	bl	80069d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d10e      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d107      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f9cb 	bl	800628e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0220 	mvn.w	r2, #32
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fd4c 	bl	80069bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e0ae      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	f200 809f 	bhi.w	8006098 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08006099 	.word	0x08006099
 8005f68:	08006099 	.word	0x08006099
 8005f6c:	08006099 	.word	0x08006099
 8005f70:	08005fd5 	.word	0x08005fd5
 8005f74:	08006099 	.word	0x08006099
 8005f78:	08006099 	.word	0x08006099
 8005f7c:	08006099 	.word	0x08006099
 8005f80:	08006017 	.word	0x08006017
 8005f84:	08006099 	.word	0x08006099
 8005f88:	08006099 	.word	0x08006099
 8005f8c:	08006099 	.word	0x08006099
 8005f90:	08006057 	.word	0x08006057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fa02 	bl	80063a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0208 	orr.w	r2, r2, #8
 8005fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0204 	bic.w	r2, r2, #4
 8005fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6999      	ldr	r1, [r3, #24]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	619a      	str	r2, [r3, #24]
      break;
 8005fd2:	e064      	b.n	800609e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fa48 	bl	8006470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6999      	ldr	r1, [r3, #24]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	021a      	lsls	r2, r3, #8
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	619a      	str	r2, [r3, #24]
      break;
 8006014:	e043      	b.n	800609e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fa93 	bl	8006548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0208 	orr.w	r2, r2, #8
 8006030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0204 	bic.w	r2, r2, #4
 8006040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69d9      	ldr	r1, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	61da      	str	r2, [r3, #28]
      break;
 8006054:	e023      	b.n	800609e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fadd 	bl	800661c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69d9      	ldr	r1, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	021a      	lsls	r2, r3, #8
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	61da      	str	r2, [r3, #28]
      break;
 8006096:	e002      	b.n	800609e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
      break;
 800609c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_TIM_ConfigClockSource+0x1c>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e0b4      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x186>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006104:	d03e      	beq.n	8006184 <HAL_TIM_ConfigClockSource+0xd4>
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610a:	f200 8087 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	f000 8086 	beq.w	8006222 <HAL_TIM_ConfigClockSource+0x172>
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611a:	d87f      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b70      	cmp	r3, #112	; 0x70
 800611e:	d01a      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0xa6>
 8006120:	2b70      	cmp	r3, #112	; 0x70
 8006122:	d87b      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b60      	cmp	r3, #96	; 0x60
 8006126:	d050      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x11a>
 8006128:	2b60      	cmp	r3, #96	; 0x60
 800612a:	d877      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b50      	cmp	r3, #80	; 0x50
 800612e:	d03c      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0xfa>
 8006130:	2b50      	cmp	r3, #80	; 0x50
 8006132:	d873      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b40      	cmp	r3, #64	; 0x40
 8006136:	d058      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x13a>
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d86f      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b30      	cmp	r3, #48	; 0x30
 800613e:	d064      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15a>
 8006140:	2b30      	cmp	r3, #48	; 0x30
 8006142:	d86b      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b20      	cmp	r3, #32
 8006146:	d060      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15a>
 8006148:	2b20      	cmp	r3, #32
 800614a:	d867      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d05c      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15a>
 8006150:	2b10      	cmp	r3, #16
 8006152:	d05a      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15a>
 8006154:	e062      	b.n	800621c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f000 fb23 	bl	80067b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	609a      	str	r2, [r3, #8]
      break;
 8006182:	e04f      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6899      	ldr	r1, [r3, #8]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f000 fb0c 	bl	80067b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a6:	609a      	str	r2, [r3, #8]
      break;
 80061a8:	e03c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 fa80 	bl	80066bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2150      	movs	r1, #80	; 0x50
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fad9 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 80061c8:	e02c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 fa9f 	bl	800671a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2160      	movs	r1, #96	; 0x60
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fac9 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 80061e8:	e01c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f000 fa60 	bl	80066bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2140      	movs	r1, #64	; 0x40
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fab9 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 8006208:	e00c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f000 fab0 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 800621a:	e003      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e000      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a34      	ldr	r2, [pc, #208]	; (8006388 <TIM_Base_SetConfig+0xe4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00f      	beq.n	80062dc <TIM_Base_SetConfig+0x38>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d00b      	beq.n	80062dc <TIM_Base_SetConfig+0x38>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a31      	ldr	r2, [pc, #196]	; (800638c <TIM_Base_SetConfig+0xe8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_Base_SetConfig+0x38>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a30      	ldr	r2, [pc, #192]	; (8006390 <TIM_Base_SetConfig+0xec>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0x38>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a2f      	ldr	r2, [pc, #188]	; (8006394 <TIM_Base_SetConfig+0xf0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d108      	bne.n	80062ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a25      	ldr	r2, [pc, #148]	; (8006388 <TIM_Base_SetConfig+0xe4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01b      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fc:	d017      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a22      	ldr	r2, [pc, #136]	; (800638c <TIM_Base_SetConfig+0xe8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a21      	ldr	r2, [pc, #132]	; (8006390 <TIM_Base_SetConfig+0xec>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00f      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a20      	ldr	r2, [pc, #128]	; (8006394 <TIM_Base_SetConfig+0xf0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00b      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <TIM_Base_SetConfig+0xf4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a1e      	ldr	r2, [pc, #120]	; (800639c <TIM_Base_SetConfig+0xf8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_Base_SetConfig+0x8a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <TIM_Base_SetConfig+0xfc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a08      	ldr	r2, [pc, #32]	; (8006388 <TIM_Base_SetConfig+0xe4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d103      	bne.n	8006374 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	615a      	str	r2, [r3, #20]
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40010000 	.word	0x40010000
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40014000 	.word	0x40014000
 800639c:	40014400 	.word	0x40014400
 80063a0:	40014800 	.word	0x40014800

080063a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 0302 	bic.w	r3, r3, #2
 80063ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a1c      	ldr	r2, [pc, #112]	; (800646c <TIM_OC1_SetConfig+0xc8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10c      	bne.n	800641a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0308 	bic.w	r3, r3, #8
 8006406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f023 0304 	bic.w	r3, r3, #4
 8006418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a13      	ldr	r2, [pc, #76]	; (800646c <TIM_OC1_SetConfig+0xc8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d111      	bne.n	8006446 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40010000 	.word	0x40010000

08006470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0210 	bic.w	r2, r3, #16
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f023 0320 	bic.w	r3, r3, #32
 80064ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <TIM_OC2_SetConfig+0xd4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10d      	bne.n	80064ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a15      	ldr	r2, [pc, #84]	; (8006544 <TIM_OC2_SetConfig+0xd4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d113      	bne.n	800651c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000

08006548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1d      	ldr	r2, [pc, #116]	; (8006618 <TIM_OC3_SetConfig+0xd0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10d      	bne.n	80065c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a14      	ldr	r2, [pc, #80]	; (8006618 <TIM_OC3_SetConfig+0xd0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d113      	bne.n	80065f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	621a      	str	r2, [r3, #32]
}
 800660c:	bf00      	nop
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	40010000 	.word	0x40010000

0800661c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	031b      	lsls	r3, r3, #12
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a10      	ldr	r2, [pc, #64]	; (80066b8 <TIM_OC4_SetConfig+0x9c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d109      	bne.n	8006690 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	019b      	lsls	r3, r3, #6
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40010000 	.word	0x40010000

080066bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f023 0201 	bic.w	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 030a 	bic.w	r3, r3, #10
 80066f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671a:	b480      	push	{r7}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0210 	bic.w	r2, r3, #16
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	f043 0307 	orr.w	r3, r3, #7
 800679c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	021a      	lsls	r2, r3, #8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	609a      	str	r2, [r3, #8]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2201      	movs	r2, #1
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	43db      	mvns	r3, r3
 8006812:	401a      	ands	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	fa01 f303 	lsl.w	r3, r1, r3
 8006828:	431a      	orrs	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006850:	2302      	movs	r3, #2
 8006852:	e050      	b.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1c      	ldr	r2, [pc, #112]	; (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d018      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a0:	d013      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a16      	ldr	r2, [pc, #88]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a15      	ldr	r2, [pc, #84]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a13      	ldr	r2, [pc, #76]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d10c      	bne.n	80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40014000 	.word	0x40014000

08006918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006930:	2302      	movs	r3, #2
 8006932:	e03d      	b.n	80069b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e03f      	b.n	8006a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fb fc3a 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	; 0x24
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fc7b 	bl	8007324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695a      	ldr	r2, [r3, #20]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b0ba      	sub	sp, #232	; 0xe8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10f      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x66>
 8006ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fb65 	bl	80071ae <UART_Receive_IT>
      return;
 8006ae4:	e256      	b.n	8006f94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 80de 	beq.w	8006cac <HAL_UART_IRQHandler+0x22c>
 8006af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80d1 	beq.w	8006cac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <HAL_UART_IRQHandler+0xae>
 8006b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f043 0201 	orr.w	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <HAL_UART_IRQHandler+0xd2>
 8006b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f043 0202 	orr.w	r2, r3, #2
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <HAL_UART_IRQHandler+0xf6>
 8006b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f043 0204 	orr.w	r2, r3, #4
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d011      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x126>
 8006b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d105      	bne.n	8006b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f043 0208 	orr.w	r2, r3, #8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 81ed 	beq.w	8006f8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <HAL_UART_IRQHandler+0x14e>
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 faf0 	bl	80071ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d103      	bne.n	8006bfa <HAL_UART_IRQHandler+0x17a>
 8006bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d04f      	beq.n	8006c9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9f8 	bl	8006ff0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d141      	bne.n	8006c92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3314      	adds	r3, #20
 8006c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1d9      	bne.n	8006c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d013      	beq.n	8006c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	4a7d      	ldr	r2, [pc, #500]	; (8006e5c <HAL_UART_IRQHandler+0x3dc>)
 8006c68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fb ffc2 	bl	8002bf8 <HAL_DMA_Abort_IT>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d016      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c84:	4610      	mov	r0, r2
 8006c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	e00e      	b.n	8006ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f99a 	bl	8006fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c90:	e00a      	b.n	8006ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f996 	bl	8006fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	e006      	b.n	8006ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f992 	bl	8006fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ca6:	e170      	b.n	8006f8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca8:	bf00      	nop
    return;
 8006caa:	e16e      	b.n	8006f8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	f040 814a 	bne.w	8006f4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 8143 	beq.w	8006f4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 813c 	beq.w	8006f4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	f040 80b4 	bne.w	8006e60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8140 	beq.w	8006f8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d16:	429a      	cmp	r2, r3
 8006d18:	f080 8139 	bcs.w	8006f8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2e:	f000 8088 	beq.w	8006e42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d6e:	e841 2300 	strex	r3, r2, [r1]
 8006d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1d9      	bne.n	8006d32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3314      	adds	r3, #20
 8006d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3314      	adds	r3, #20
 8006d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006da2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006da6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e1      	bne.n	8006d7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3314      	adds	r3, #20
 8006dc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3314      	adds	r3, #20
 8006dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006de0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006de4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e3      	bne.n	8006dba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e12:	f023 0310 	bic.w	r3, r3, #16
 8006e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e3      	bne.n	8006e00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fb fe6b 	bl	8002b18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8c0 	bl	8006fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e58:	e099      	b.n	8006f8e <HAL_UART_IRQHandler+0x50e>
 8006e5a:	bf00      	nop
 8006e5c:	080070b7 	.word	0x080070b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 808b 	beq.w	8006f92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8086 	beq.w	8006f92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e3      	bne.n	8006e86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3314      	adds	r3, #20
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	f023 0301 	bic.w	r3, r3, #1
 8006ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3314      	adds	r3, #20
 8006ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e3      	bne.n	8006ebe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0310 	bic.w	r3, r3, #16
 8006f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f28:	61fa      	str	r2, [r7, #28]
 8006f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	617b      	str	r3, [r7, #20]
   return(result);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e3      	bne.n	8006f04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f848 	bl	8006fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f48:	e023      	b.n	8006f92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <HAL_UART_IRQHandler+0x4ea>
 8006f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f8bb 	bl	80070de <UART_Transmit_IT>
    return;
 8006f68:	e014      	b.n	8006f94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00e      	beq.n	8006f94 <HAL_UART_IRQHandler+0x514>
 8006f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f8fb 	bl	800717e <UART_EndTransmit_IT>
    return;
 8006f88:	e004      	b.n	8006f94 <HAL_UART_IRQHandler+0x514>
    return;
 8006f8a:	bf00      	nop
 8006f8c:	e002      	b.n	8006f94 <HAL_UART_IRQHandler+0x514>
      return;
 8006f8e:	bf00      	nop
 8006f90:	e000      	b.n	8006f94 <HAL_UART_IRQHandler+0x514>
      return;
 8006f92:	bf00      	nop
  }
}
 8006f94:	37e8      	adds	r7, #232	; 0xe8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop

08006f9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b095      	sub	sp, #84	; 0x54
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	330c      	adds	r3, #12
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007018:	643a      	str	r2, [r7, #64]	; 0x40
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800701e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e5      	bne.n	8006ff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3314      	adds	r3, #20
 8007032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	61fb      	str	r3, [r7, #28]
   return(result);
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f023 0301 	bic.w	r3, r3, #1
 8007042:	64bb      	str	r3, [r7, #72]	; 0x48
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3314      	adds	r3, #20
 800704a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800704c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e5      	bne.n	800702c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	2b01      	cmp	r3, #1
 8007066:	d119      	bne.n	800709c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	330c      	adds	r3, #12
 800706e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	60bb      	str	r3, [r7, #8]
   return(result);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f023 0310 	bic.w	r3, r3, #16
 800707e:	647b      	str	r3, [r7, #68]	; 0x44
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	330c      	adds	r3, #12
 8007086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007088:	61ba      	str	r2, [r7, #24]
 800708a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6979      	ldr	r1, [r7, #20]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	613b      	str	r3, [r7, #16]
   return(result);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e5      	bne.n	8007068 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070aa:	bf00      	nop
 80070ac:	3754      	adds	r7, #84	; 0x54
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7ff ff77 	bl	8006fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070de:	b480      	push	{r7}
 80070e0:	b085      	sub	sp, #20
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b21      	cmp	r3, #33	; 0x21
 80070f0:	d13e      	bne.n	8007170 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fa:	d114      	bne.n	8007126 <UART_Transmit_IT+0x48>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d110      	bne.n	8007126 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007118:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	1c9a      	adds	r2, r3, #2
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	621a      	str	r2, [r3, #32]
 8007124:	e008      	b.n	8007138 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	1c59      	adds	r1, r3, #1
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6211      	str	r1, [r2, #32]
 8007130:	781a      	ldrb	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	4619      	mov	r1, r3
 8007146:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10f      	bne.n	800716c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800715a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800716a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	e000      	b.n	8007172 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007170:	2302      	movs	r3, #2
  }
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007194:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff fefc 	bl	8006f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b08c      	sub	sp, #48	; 0x30
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b22      	cmp	r3, #34	; 0x22
 80071c0:	f040 80ab 	bne.w	800731a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071cc:	d117      	bne.n	80071fe <UART_Receive_IT+0x50>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d113      	bne.n	80071fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	629a      	str	r2, [r3, #40]	; 0x28
 80071fc:	e026      	b.n	800724c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007204:	2300      	movs	r3, #0
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007210:	d007      	beq.n	8007222 <UART_Receive_IT+0x74>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <UART_Receive_IT+0x82>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	b2da      	uxtb	r2, r3
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e008      	b.n	8007242 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723c:	b2da      	uxtb	r2, r3
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007250:	b29b      	uxth	r3, r3
 8007252:	3b01      	subs	r3, #1
 8007254:	b29b      	uxth	r3, r3
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4619      	mov	r1, r3
 800725a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800725c:	2b00      	cmp	r3, #0
 800725e:	d15a      	bne.n	8007316 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0220 	bic.w	r2, r2, #32
 800726e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800727e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695a      	ldr	r2, [r3, #20]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	2b01      	cmp	r3, #1
 800729e:	d135      	bne.n	800730c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	330c      	adds	r3, #12
 80072ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	613b      	str	r3, [r7, #16]
   return(result);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f023 0310 	bic.w	r3, r3, #16
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c6:	623a      	str	r2, [r7, #32]
 80072c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	69f9      	ldr	r1, [r7, #28]
 80072cc:	6a3a      	ldr	r2, [r7, #32]
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b10      	cmp	r3, #16
 80072e6:	d10a      	bne.n	80072fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff fe67 	bl	8006fd8 <HAL_UARTEx_RxEventCallback>
 800730a:	e002      	b.n	8007312 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff fe4f 	bl	8006fb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	e002      	b.n	800731c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	e000      	b.n	800731c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800731a:	2302      	movs	r3, #2
  }
}
 800731c:	4618      	mov	r0, r3
 800731e:	3730      	adds	r7, #48	; 0x30
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007328:	b0c0      	sub	sp, #256	; 0x100
 800732a:	af00      	add	r7, sp, #0
 800732c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007340:	68d9      	ldr	r1, [r3, #12]
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	ea40 0301 	orr.w	r3, r0, r1
 800734c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800734e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	431a      	orrs	r2, r3
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	431a      	orrs	r2, r3
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800737c:	f021 010c 	bic.w	r1, r1, #12
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800738a:	430b      	orrs	r3, r1
 800738c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800739a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739e:	6999      	ldr	r1, [r3, #24]
 80073a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	ea40 0301 	orr.w	r3, r0, r1
 80073aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4b8f      	ldr	r3, [pc, #572]	; (80075f0 <UART_SetConfig+0x2cc>)
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d005      	beq.n	80073c4 <UART_SetConfig+0xa0>
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	4b8d      	ldr	r3, [pc, #564]	; (80075f4 <UART_SetConfig+0x2d0>)
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d104      	bne.n	80073ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073c4:	f7fe f9b0 	bl	8005728 <HAL_RCC_GetPCLK2Freq>
 80073c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80073cc:	e003      	b.n	80073d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073ce:	f7fe f997 	bl	8005700 <HAL_RCC_GetPCLK1Freq>
 80073d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e0:	f040 810c 	bne.w	80075fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073f6:	4622      	mov	r2, r4
 80073f8:	462b      	mov	r3, r5
 80073fa:	1891      	adds	r1, r2, r2
 80073fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80073fe:	415b      	adcs	r3, r3
 8007400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007406:	4621      	mov	r1, r4
 8007408:	eb12 0801 	adds.w	r8, r2, r1
 800740c:	4629      	mov	r1, r5
 800740e:	eb43 0901 	adc.w	r9, r3, r1
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800741e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007426:	4690      	mov	r8, r2
 8007428:	4699      	mov	r9, r3
 800742a:	4623      	mov	r3, r4
 800742c:	eb18 0303 	adds.w	r3, r8, r3
 8007430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007434:	462b      	mov	r3, r5
 8007436:	eb49 0303 	adc.w	r3, r9, r3
 800743a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800744a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800744e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007452:	460b      	mov	r3, r1
 8007454:	18db      	adds	r3, r3, r3
 8007456:	653b      	str	r3, [r7, #80]	; 0x50
 8007458:	4613      	mov	r3, r2
 800745a:	eb42 0303 	adc.w	r3, r2, r3
 800745e:	657b      	str	r3, [r7, #84]	; 0x54
 8007460:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007464:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007468:	f7f9 fba6 	bl	8000bb8 <__aeabi_uldivmod>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4b61      	ldr	r3, [pc, #388]	; (80075f8 <UART_SetConfig+0x2d4>)
 8007472:	fba3 2302 	umull	r2, r3, r3, r2
 8007476:	095b      	lsrs	r3, r3, #5
 8007478:	011c      	lsls	r4, r3, #4
 800747a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800747e:	2200      	movs	r2, #0
 8007480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007484:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007488:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	1891      	adds	r1, r2, r2
 8007492:	64b9      	str	r1, [r7, #72]	; 0x48
 8007494:	415b      	adcs	r3, r3
 8007496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800749c:	4641      	mov	r1, r8
 800749e:	eb12 0a01 	adds.w	sl, r2, r1
 80074a2:	4649      	mov	r1, r9
 80074a4:	eb43 0b01 	adc.w	fp, r3, r1
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074bc:	4692      	mov	sl, r2
 80074be:	469b      	mov	fp, r3
 80074c0:	4643      	mov	r3, r8
 80074c2:	eb1a 0303 	adds.w	r3, sl, r3
 80074c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074ca:	464b      	mov	r3, r9
 80074cc:	eb4b 0303 	adc.w	r3, fp, r3
 80074d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80074e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074e8:	460b      	mov	r3, r1
 80074ea:	18db      	adds	r3, r3, r3
 80074ec:	643b      	str	r3, [r7, #64]	; 0x40
 80074ee:	4613      	mov	r3, r2
 80074f0:	eb42 0303 	adc.w	r3, r2, r3
 80074f4:	647b      	str	r3, [r7, #68]	; 0x44
 80074f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074fe:	f7f9 fb5b 	bl	8000bb8 <__aeabi_uldivmod>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4611      	mov	r1, r2
 8007508:	4b3b      	ldr	r3, [pc, #236]	; (80075f8 <UART_SetConfig+0x2d4>)
 800750a:	fba3 2301 	umull	r2, r3, r3, r1
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	2264      	movs	r2, #100	; 0x64
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	1acb      	subs	r3, r1, r3
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800751e:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <UART_SetConfig+0x2d4>)
 8007520:	fba3 2302 	umull	r2, r3, r3, r2
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800752c:	441c      	add	r4, r3
 800752e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007532:	2200      	movs	r2, #0
 8007534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007538:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800753c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	1891      	adds	r1, r2, r2
 8007546:	63b9      	str	r1, [r7, #56]	; 0x38
 8007548:	415b      	adcs	r3, r3
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800754c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007550:	4641      	mov	r1, r8
 8007552:	1851      	adds	r1, r2, r1
 8007554:	6339      	str	r1, [r7, #48]	; 0x30
 8007556:	4649      	mov	r1, r9
 8007558:	414b      	adcs	r3, r1
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007568:	4659      	mov	r1, fp
 800756a:	00cb      	lsls	r3, r1, #3
 800756c:	4651      	mov	r1, sl
 800756e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007572:	4651      	mov	r1, sl
 8007574:	00ca      	lsls	r2, r1, #3
 8007576:	4610      	mov	r0, r2
 8007578:	4619      	mov	r1, r3
 800757a:	4603      	mov	r3, r0
 800757c:	4642      	mov	r2, r8
 800757e:	189b      	adds	r3, r3, r2
 8007580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007584:	464b      	mov	r3, r9
 8007586:	460a      	mov	r2, r1
 8007588:	eb42 0303 	adc.w	r3, r2, r3
 800758c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800759c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075a4:	460b      	mov	r3, r1
 80075a6:	18db      	adds	r3, r3, r3
 80075a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80075aa:	4613      	mov	r3, r2
 80075ac:	eb42 0303 	adc.w	r3, r2, r3
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075ba:	f7f9 fafd 	bl	8000bb8 <__aeabi_uldivmod>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <UART_SetConfig+0x2d4>)
 80075c4:	fba3 1302 	umull	r1, r3, r3, r2
 80075c8:	095b      	lsrs	r3, r3, #5
 80075ca:	2164      	movs	r1, #100	; 0x64
 80075cc:	fb01 f303 	mul.w	r3, r1, r3
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	3332      	adds	r3, #50	; 0x32
 80075d6:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <UART_SetConfig+0x2d4>)
 80075d8:	fba2 2303 	umull	r2, r3, r2, r3
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	f003 0207 	and.w	r2, r3, #7
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4422      	add	r2, r4
 80075ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075ec:	e105      	b.n	80077fa <UART_SetConfig+0x4d6>
 80075ee:	bf00      	nop
 80075f0:	40011000 	.word	0x40011000
 80075f4:	40011400 	.word	0x40011400
 80075f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007600:	2200      	movs	r2, #0
 8007602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800760a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800760e:	4642      	mov	r2, r8
 8007610:	464b      	mov	r3, r9
 8007612:	1891      	adds	r1, r2, r2
 8007614:	6239      	str	r1, [r7, #32]
 8007616:	415b      	adcs	r3, r3
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
 800761a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800761e:	4641      	mov	r1, r8
 8007620:	1854      	adds	r4, r2, r1
 8007622:	4649      	mov	r1, r9
 8007624:	eb43 0501 	adc.w	r5, r3, r1
 8007628:	f04f 0200 	mov.w	r2, #0
 800762c:	f04f 0300 	mov.w	r3, #0
 8007630:	00eb      	lsls	r3, r5, #3
 8007632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007636:	00e2      	lsls	r2, r4, #3
 8007638:	4614      	mov	r4, r2
 800763a:	461d      	mov	r5, r3
 800763c:	4643      	mov	r3, r8
 800763e:	18e3      	adds	r3, r4, r3
 8007640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007644:	464b      	mov	r3, r9
 8007646:	eb45 0303 	adc.w	r3, r5, r3
 800764a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800764e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800765a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	f04f 0300 	mov.w	r3, #0
 8007666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800766a:	4629      	mov	r1, r5
 800766c:	008b      	lsls	r3, r1, #2
 800766e:	4621      	mov	r1, r4
 8007670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007674:	4621      	mov	r1, r4
 8007676:	008a      	lsls	r2, r1, #2
 8007678:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800767c:	f7f9 fa9c 	bl	8000bb8 <__aeabi_uldivmod>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4b60      	ldr	r3, [pc, #384]	; (8007808 <UART_SetConfig+0x4e4>)
 8007686:	fba3 2302 	umull	r2, r3, r3, r2
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	011c      	lsls	r4, r3, #4
 800768e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007692:	2200      	movs	r2, #0
 8007694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007698:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800769c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076a0:	4642      	mov	r2, r8
 80076a2:	464b      	mov	r3, r9
 80076a4:	1891      	adds	r1, r2, r2
 80076a6:	61b9      	str	r1, [r7, #24]
 80076a8:	415b      	adcs	r3, r3
 80076aa:	61fb      	str	r3, [r7, #28]
 80076ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076b0:	4641      	mov	r1, r8
 80076b2:	1851      	adds	r1, r2, r1
 80076b4:	6139      	str	r1, [r7, #16]
 80076b6:	4649      	mov	r1, r9
 80076b8:	414b      	adcs	r3, r1
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076c8:	4659      	mov	r1, fp
 80076ca:	00cb      	lsls	r3, r1, #3
 80076cc:	4651      	mov	r1, sl
 80076ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076d2:	4651      	mov	r1, sl
 80076d4:	00ca      	lsls	r2, r1, #3
 80076d6:	4610      	mov	r0, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	4603      	mov	r3, r0
 80076dc:	4642      	mov	r2, r8
 80076de:	189b      	adds	r3, r3, r2
 80076e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076e4:	464b      	mov	r3, r9
 80076e6:	460a      	mov	r2, r1
 80076e8:	eb42 0303 	adc.w	r3, r2, r3
 80076ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80076fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007708:	4649      	mov	r1, r9
 800770a:	008b      	lsls	r3, r1, #2
 800770c:	4641      	mov	r1, r8
 800770e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007712:	4641      	mov	r1, r8
 8007714:	008a      	lsls	r2, r1, #2
 8007716:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800771a:	f7f9 fa4d 	bl	8000bb8 <__aeabi_uldivmod>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4b39      	ldr	r3, [pc, #228]	; (8007808 <UART_SetConfig+0x4e4>)
 8007724:	fba3 1302 	umull	r1, r3, r3, r2
 8007728:	095b      	lsrs	r3, r3, #5
 800772a:	2164      	movs	r1, #100	; 0x64
 800772c:	fb01 f303 	mul.w	r3, r1, r3
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	3332      	adds	r3, #50	; 0x32
 8007736:	4a34      	ldr	r2, [pc, #208]	; (8007808 <UART_SetConfig+0x4e4>)
 8007738:	fba2 2303 	umull	r2, r3, r2, r3
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007742:	441c      	add	r4, r3
 8007744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007748:	2200      	movs	r2, #0
 800774a:	673b      	str	r3, [r7, #112]	; 0x70
 800774c:	677a      	str	r2, [r7, #116]	; 0x74
 800774e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007752:	4642      	mov	r2, r8
 8007754:	464b      	mov	r3, r9
 8007756:	1891      	adds	r1, r2, r2
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	415b      	adcs	r3, r3
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007762:	4641      	mov	r1, r8
 8007764:	1851      	adds	r1, r2, r1
 8007766:	6039      	str	r1, [r7, #0]
 8007768:	4649      	mov	r1, r9
 800776a:	414b      	adcs	r3, r1
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	f04f 0300 	mov.w	r3, #0
 8007776:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800777a:	4659      	mov	r1, fp
 800777c:	00cb      	lsls	r3, r1, #3
 800777e:	4651      	mov	r1, sl
 8007780:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007784:	4651      	mov	r1, sl
 8007786:	00ca      	lsls	r2, r1, #3
 8007788:	4610      	mov	r0, r2
 800778a:	4619      	mov	r1, r3
 800778c:	4603      	mov	r3, r0
 800778e:	4642      	mov	r2, r8
 8007790:	189b      	adds	r3, r3, r2
 8007792:	66bb      	str	r3, [r7, #104]	; 0x68
 8007794:	464b      	mov	r3, r9
 8007796:	460a      	mov	r2, r1
 8007798:	eb42 0303 	adc.w	r3, r2, r3
 800779c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	663b      	str	r3, [r7, #96]	; 0x60
 80077a8:	667a      	str	r2, [r7, #100]	; 0x64
 80077aa:	f04f 0200 	mov.w	r2, #0
 80077ae:	f04f 0300 	mov.w	r3, #0
 80077b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077b6:	4649      	mov	r1, r9
 80077b8:	008b      	lsls	r3, r1, #2
 80077ba:	4641      	mov	r1, r8
 80077bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077c0:	4641      	mov	r1, r8
 80077c2:	008a      	lsls	r2, r1, #2
 80077c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80077c8:	f7f9 f9f6 	bl	8000bb8 <__aeabi_uldivmod>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <UART_SetConfig+0x4e4>)
 80077d2:	fba3 1302 	umull	r1, r3, r3, r2
 80077d6:	095b      	lsrs	r3, r3, #5
 80077d8:	2164      	movs	r1, #100	; 0x64
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	3332      	adds	r3, #50	; 0x32
 80077e4:	4a08      	ldr	r2, [pc, #32]	; (8007808 <UART_SetConfig+0x4e4>)
 80077e6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	f003 020f 	and.w	r2, r3, #15
 80077f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4422      	add	r2, r4
 80077f8:	609a      	str	r2, [r3, #8]
}
 80077fa:	bf00      	nop
 80077fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007800:	46bd      	mov	sp, r7
 8007802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007806:	bf00      	nop
 8007808:	51eb851f 	.word	0x51eb851f

0800780c <__errno>:
 800780c:	4b01      	ldr	r3, [pc, #4]	; (8007814 <__errno+0x8>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	2000000c 	.word	0x2000000c

08007818 <__libc_init_array>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	4d0d      	ldr	r5, [pc, #52]	; (8007850 <__libc_init_array+0x38>)
 800781c:	4c0d      	ldr	r4, [pc, #52]	; (8007854 <__libc_init_array+0x3c>)
 800781e:	1b64      	subs	r4, r4, r5
 8007820:	10a4      	asrs	r4, r4, #2
 8007822:	2600      	movs	r6, #0
 8007824:	42a6      	cmp	r6, r4
 8007826:	d109      	bne.n	800783c <__libc_init_array+0x24>
 8007828:	4d0b      	ldr	r5, [pc, #44]	; (8007858 <__libc_init_array+0x40>)
 800782a:	4c0c      	ldr	r4, [pc, #48]	; (800785c <__libc_init_array+0x44>)
 800782c:	f002 fd38 	bl	800a2a0 <_init>
 8007830:	1b64      	subs	r4, r4, r5
 8007832:	10a4      	asrs	r4, r4, #2
 8007834:	2600      	movs	r6, #0
 8007836:	42a6      	cmp	r6, r4
 8007838:	d105      	bne.n	8007846 <__libc_init_array+0x2e>
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007840:	4798      	blx	r3
 8007842:	3601      	adds	r6, #1
 8007844:	e7ee      	b.n	8007824 <__libc_init_array+0xc>
 8007846:	f855 3b04 	ldr.w	r3, [r5], #4
 800784a:	4798      	blx	r3
 800784c:	3601      	adds	r6, #1
 800784e:	e7f2      	b.n	8007836 <__libc_init_array+0x1e>
 8007850:	0800a6bc 	.word	0x0800a6bc
 8007854:	0800a6bc 	.word	0x0800a6bc
 8007858:	0800a6bc 	.word	0x0800a6bc
 800785c:	0800a6c0 	.word	0x0800a6c0

08007860 <memset>:
 8007860:	4402      	add	r2, r0
 8007862:	4603      	mov	r3, r0
 8007864:	4293      	cmp	r3, r2
 8007866:	d100      	bne.n	800786a <memset+0xa>
 8007868:	4770      	bx	lr
 800786a:	f803 1b01 	strb.w	r1, [r3], #1
 800786e:	e7f9      	b.n	8007864 <memset+0x4>

08007870 <__cvt>:
 8007870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	ec55 4b10 	vmov	r4, r5, d0
 8007878:	2d00      	cmp	r5, #0
 800787a:	460e      	mov	r6, r1
 800787c:	4619      	mov	r1, r3
 800787e:	462b      	mov	r3, r5
 8007880:	bfbb      	ittet	lt
 8007882:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007886:	461d      	movlt	r5, r3
 8007888:	2300      	movge	r3, #0
 800788a:	232d      	movlt	r3, #45	; 0x2d
 800788c:	700b      	strb	r3, [r1, #0]
 800788e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007890:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007894:	4691      	mov	r9, r2
 8007896:	f023 0820 	bic.w	r8, r3, #32
 800789a:	bfbc      	itt	lt
 800789c:	4622      	movlt	r2, r4
 800789e:	4614      	movlt	r4, r2
 80078a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078a4:	d005      	beq.n	80078b2 <__cvt+0x42>
 80078a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078aa:	d100      	bne.n	80078ae <__cvt+0x3e>
 80078ac:	3601      	adds	r6, #1
 80078ae:	2102      	movs	r1, #2
 80078b0:	e000      	b.n	80078b4 <__cvt+0x44>
 80078b2:	2103      	movs	r1, #3
 80078b4:	ab03      	add	r3, sp, #12
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	ab02      	add	r3, sp, #8
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	ec45 4b10 	vmov	d0, r4, r5
 80078c0:	4653      	mov	r3, sl
 80078c2:	4632      	mov	r2, r6
 80078c4:	f000 fccc 	bl	8008260 <_dtoa_r>
 80078c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078cc:	4607      	mov	r7, r0
 80078ce:	d102      	bne.n	80078d6 <__cvt+0x66>
 80078d0:	f019 0f01 	tst.w	r9, #1
 80078d4:	d022      	beq.n	800791c <__cvt+0xac>
 80078d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078da:	eb07 0906 	add.w	r9, r7, r6
 80078de:	d110      	bne.n	8007902 <__cvt+0x92>
 80078e0:	783b      	ldrb	r3, [r7, #0]
 80078e2:	2b30      	cmp	r3, #48	; 0x30
 80078e4:	d10a      	bne.n	80078fc <__cvt+0x8c>
 80078e6:	2200      	movs	r2, #0
 80078e8:	2300      	movs	r3, #0
 80078ea:	4620      	mov	r0, r4
 80078ec:	4629      	mov	r1, r5
 80078ee:	f7f9 f8f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80078f2:	b918      	cbnz	r0, 80078fc <__cvt+0x8c>
 80078f4:	f1c6 0601 	rsb	r6, r6, #1
 80078f8:	f8ca 6000 	str.w	r6, [sl]
 80078fc:	f8da 3000 	ldr.w	r3, [sl]
 8007900:	4499      	add	r9, r3
 8007902:	2200      	movs	r2, #0
 8007904:	2300      	movs	r3, #0
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f9 f8e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800790e:	b108      	cbz	r0, 8007914 <__cvt+0xa4>
 8007910:	f8cd 900c 	str.w	r9, [sp, #12]
 8007914:	2230      	movs	r2, #48	; 0x30
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	454b      	cmp	r3, r9
 800791a:	d307      	bcc.n	800792c <__cvt+0xbc>
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007920:	1bdb      	subs	r3, r3, r7
 8007922:	4638      	mov	r0, r7
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	b004      	add	sp, #16
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	1c59      	adds	r1, r3, #1
 800792e:	9103      	str	r1, [sp, #12]
 8007930:	701a      	strb	r2, [r3, #0]
 8007932:	e7f0      	b.n	8007916 <__cvt+0xa6>

08007934 <__exponent>:
 8007934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007936:	4603      	mov	r3, r0
 8007938:	2900      	cmp	r1, #0
 800793a:	bfb8      	it	lt
 800793c:	4249      	neglt	r1, r1
 800793e:	f803 2b02 	strb.w	r2, [r3], #2
 8007942:	bfb4      	ite	lt
 8007944:	222d      	movlt	r2, #45	; 0x2d
 8007946:	222b      	movge	r2, #43	; 0x2b
 8007948:	2909      	cmp	r1, #9
 800794a:	7042      	strb	r2, [r0, #1]
 800794c:	dd2a      	ble.n	80079a4 <__exponent+0x70>
 800794e:	f10d 0407 	add.w	r4, sp, #7
 8007952:	46a4      	mov	ip, r4
 8007954:	270a      	movs	r7, #10
 8007956:	46a6      	mov	lr, r4
 8007958:	460a      	mov	r2, r1
 800795a:	fb91 f6f7 	sdiv	r6, r1, r7
 800795e:	fb07 1516 	mls	r5, r7, r6, r1
 8007962:	3530      	adds	r5, #48	; 0x30
 8007964:	2a63      	cmp	r2, #99	; 0x63
 8007966:	f104 34ff 	add.w	r4, r4, #4294967295
 800796a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800796e:	4631      	mov	r1, r6
 8007970:	dcf1      	bgt.n	8007956 <__exponent+0x22>
 8007972:	3130      	adds	r1, #48	; 0x30
 8007974:	f1ae 0502 	sub.w	r5, lr, #2
 8007978:	f804 1c01 	strb.w	r1, [r4, #-1]
 800797c:	1c44      	adds	r4, r0, #1
 800797e:	4629      	mov	r1, r5
 8007980:	4561      	cmp	r1, ip
 8007982:	d30a      	bcc.n	800799a <__exponent+0x66>
 8007984:	f10d 0209 	add.w	r2, sp, #9
 8007988:	eba2 020e 	sub.w	r2, r2, lr
 800798c:	4565      	cmp	r5, ip
 800798e:	bf88      	it	hi
 8007990:	2200      	movhi	r2, #0
 8007992:	4413      	add	r3, r2
 8007994:	1a18      	subs	r0, r3, r0
 8007996:	b003      	add	sp, #12
 8007998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800799e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079a2:	e7ed      	b.n	8007980 <__exponent+0x4c>
 80079a4:	2330      	movs	r3, #48	; 0x30
 80079a6:	3130      	adds	r1, #48	; 0x30
 80079a8:	7083      	strb	r3, [r0, #2]
 80079aa:	70c1      	strb	r1, [r0, #3]
 80079ac:	1d03      	adds	r3, r0, #4
 80079ae:	e7f1      	b.n	8007994 <__exponent+0x60>

080079b0 <_printf_float>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	ed2d 8b02 	vpush	{d8}
 80079b8:	b08d      	sub	sp, #52	; 0x34
 80079ba:	460c      	mov	r4, r1
 80079bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079c0:	4616      	mov	r6, r2
 80079c2:	461f      	mov	r7, r3
 80079c4:	4605      	mov	r5, r0
 80079c6:	f001 fa39 	bl	8008e3c <_localeconv_r>
 80079ca:	f8d0 a000 	ldr.w	sl, [r0]
 80079ce:	4650      	mov	r0, sl
 80079d0:	f7f8 fc06 	bl	80001e0 <strlen>
 80079d4:	2300      	movs	r3, #0
 80079d6:	930a      	str	r3, [sp, #40]	; 0x28
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	f8d8 3000 	ldr.w	r3, [r8]
 80079e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80079e4:	3307      	adds	r3, #7
 80079e6:	f023 0307 	bic.w	r3, r3, #7
 80079ea:	f103 0208 	add.w	r2, r3, #8
 80079ee:	f8c8 2000 	str.w	r2, [r8]
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a02:	9307      	str	r3, [sp, #28]
 8007a04:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a08:	ee08 0a10 	vmov	s16, r0
 8007a0c:	4b9f      	ldr	r3, [pc, #636]	; (8007c8c <_printf_float+0x2dc>)
 8007a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	f7f9 f891 	bl	8000b3c <__aeabi_dcmpun>
 8007a1a:	bb88      	cbnz	r0, 8007a80 <_printf_float+0xd0>
 8007a1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a20:	4b9a      	ldr	r3, [pc, #616]	; (8007c8c <_printf_float+0x2dc>)
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295
 8007a26:	f7f9 f86b 	bl	8000b00 <__aeabi_dcmple>
 8007a2a:	bb48      	cbnz	r0, 8007a80 <_printf_float+0xd0>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2300      	movs	r3, #0
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f9 f85a 	bl	8000aec <__aeabi_dcmplt>
 8007a38:	b110      	cbz	r0, 8007a40 <_printf_float+0x90>
 8007a3a:	232d      	movs	r3, #45	; 0x2d
 8007a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a40:	4b93      	ldr	r3, [pc, #588]	; (8007c90 <_printf_float+0x2e0>)
 8007a42:	4894      	ldr	r0, [pc, #592]	; (8007c94 <_printf_float+0x2e4>)
 8007a44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a48:	bf94      	ite	ls
 8007a4a:	4698      	movls	r8, r3
 8007a4c:	4680      	movhi	r8, r0
 8007a4e:	2303      	movs	r3, #3
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	9b05      	ldr	r3, [sp, #20]
 8007a54:	f023 0204 	bic.w	r2, r3, #4
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	f04f 0900 	mov.w	r9, #0
 8007a5e:	9700      	str	r7, [sp, #0]
 8007a60:	4633      	mov	r3, r6
 8007a62:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a64:	4621      	mov	r1, r4
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 f9d8 	bl	8007e1c <_printf_common>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	f040 8090 	bne.w	8007b92 <_printf_float+0x1e2>
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	b00d      	add	sp, #52	; 0x34
 8007a78:	ecbd 8b02 	vpop	{d8}
 8007a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a80:	4642      	mov	r2, r8
 8007a82:	464b      	mov	r3, r9
 8007a84:	4640      	mov	r0, r8
 8007a86:	4649      	mov	r1, r9
 8007a88:	f7f9 f858 	bl	8000b3c <__aeabi_dcmpun>
 8007a8c:	b140      	cbz	r0, 8007aa0 <_printf_float+0xf0>
 8007a8e:	464b      	mov	r3, r9
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	bfbc      	itt	lt
 8007a94:	232d      	movlt	r3, #45	; 0x2d
 8007a96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a9a:	487f      	ldr	r0, [pc, #508]	; (8007c98 <_printf_float+0x2e8>)
 8007a9c:	4b7f      	ldr	r3, [pc, #508]	; (8007c9c <_printf_float+0x2ec>)
 8007a9e:	e7d1      	b.n	8007a44 <_printf_float+0x94>
 8007aa0:	6863      	ldr	r3, [r4, #4]
 8007aa2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007aa6:	9206      	str	r2, [sp, #24]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	d13f      	bne.n	8007b2c <_printf_float+0x17c>
 8007aac:	2306      	movs	r3, #6
 8007aae:	6063      	str	r3, [r4, #4]
 8007ab0:	9b05      	ldr	r3, [sp, #20]
 8007ab2:	6861      	ldr	r1, [r4, #4]
 8007ab4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9303      	str	r3, [sp, #12]
 8007abc:	ab0a      	add	r3, sp, #40	; 0x28
 8007abe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ac2:	ab09      	add	r3, sp, #36	; 0x24
 8007ac4:	ec49 8b10 	vmov	d0, r8, r9
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	6022      	str	r2, [r4, #0]
 8007acc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f7ff fecd 	bl	8007870 <__cvt>
 8007ad6:	9b06      	ldr	r3, [sp, #24]
 8007ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ada:	2b47      	cmp	r3, #71	; 0x47
 8007adc:	4680      	mov	r8, r0
 8007ade:	d108      	bne.n	8007af2 <_printf_float+0x142>
 8007ae0:	1cc8      	adds	r0, r1, #3
 8007ae2:	db02      	blt.n	8007aea <_printf_float+0x13a>
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	dd41      	ble.n	8007b6e <_printf_float+0x1be>
 8007aea:	f1ab 0b02 	sub.w	fp, fp, #2
 8007aee:	fa5f fb8b 	uxtb.w	fp, fp
 8007af2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007af6:	d820      	bhi.n	8007b3a <_printf_float+0x18a>
 8007af8:	3901      	subs	r1, #1
 8007afa:	465a      	mov	r2, fp
 8007afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b00:	9109      	str	r1, [sp, #36]	; 0x24
 8007b02:	f7ff ff17 	bl	8007934 <__exponent>
 8007b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b08:	1813      	adds	r3, r2, r0
 8007b0a:	2a01      	cmp	r2, #1
 8007b0c:	4681      	mov	r9, r0
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	dc02      	bgt.n	8007b18 <_printf_float+0x168>
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	07d2      	lsls	r2, r2, #31
 8007b16:	d501      	bpl.n	8007b1c <_printf_float+0x16c>
 8007b18:	3301      	adds	r3, #1
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d09c      	beq.n	8007a5e <_printf_float+0xae>
 8007b24:	232d      	movs	r3, #45	; 0x2d
 8007b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b2a:	e798      	b.n	8007a5e <_printf_float+0xae>
 8007b2c:	9a06      	ldr	r2, [sp, #24]
 8007b2e:	2a47      	cmp	r2, #71	; 0x47
 8007b30:	d1be      	bne.n	8007ab0 <_printf_float+0x100>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1bc      	bne.n	8007ab0 <_printf_float+0x100>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e7b9      	b.n	8007aae <_printf_float+0xfe>
 8007b3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b3e:	d118      	bne.n	8007b72 <_printf_float+0x1c2>
 8007b40:	2900      	cmp	r1, #0
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	dd0b      	ble.n	8007b5e <_printf_float+0x1ae>
 8007b46:	6121      	str	r1, [r4, #16]
 8007b48:	b913      	cbnz	r3, 8007b50 <_printf_float+0x1a0>
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	07d0      	lsls	r0, r2, #31
 8007b4e:	d502      	bpl.n	8007b56 <_printf_float+0x1a6>
 8007b50:	3301      	adds	r3, #1
 8007b52:	440b      	add	r3, r1
 8007b54:	6123      	str	r3, [r4, #16]
 8007b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b58:	f04f 0900 	mov.w	r9, #0
 8007b5c:	e7de      	b.n	8007b1c <_printf_float+0x16c>
 8007b5e:	b913      	cbnz	r3, 8007b66 <_printf_float+0x1b6>
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	07d2      	lsls	r2, r2, #31
 8007b64:	d501      	bpl.n	8007b6a <_printf_float+0x1ba>
 8007b66:	3302      	adds	r3, #2
 8007b68:	e7f4      	b.n	8007b54 <_printf_float+0x1a4>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e7f2      	b.n	8007b54 <_printf_float+0x1a4>
 8007b6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b74:	4299      	cmp	r1, r3
 8007b76:	db05      	blt.n	8007b84 <_printf_float+0x1d4>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	6121      	str	r1, [r4, #16]
 8007b7c:	07d8      	lsls	r0, r3, #31
 8007b7e:	d5ea      	bpl.n	8007b56 <_printf_float+0x1a6>
 8007b80:	1c4b      	adds	r3, r1, #1
 8007b82:	e7e7      	b.n	8007b54 <_printf_float+0x1a4>
 8007b84:	2900      	cmp	r1, #0
 8007b86:	bfd4      	ite	le
 8007b88:	f1c1 0202 	rsble	r2, r1, #2
 8007b8c:	2201      	movgt	r2, #1
 8007b8e:	4413      	add	r3, r2
 8007b90:	e7e0      	b.n	8007b54 <_printf_float+0x1a4>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	055a      	lsls	r2, r3, #21
 8007b96:	d407      	bmi.n	8007ba8 <_printf_float+0x1f8>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	4642      	mov	r2, r8
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d12c      	bne.n	8007c00 <_printf_float+0x250>
 8007ba6:	e764      	b.n	8007a72 <_printf_float+0xc2>
 8007ba8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bac:	f240 80e0 	bls.w	8007d70 <_printf_float+0x3c0>
 8007bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f7f8 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d034      	beq.n	8007c2a <_printf_float+0x27a>
 8007bc0:	4a37      	ldr	r2, [pc, #220]	; (8007ca0 <_printf_float+0x2f0>)
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f af51 	beq.w	8007a72 <_printf_float+0xc2>
 8007bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	db02      	blt.n	8007bde <_printf_float+0x22e>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	07d8      	lsls	r0, r3, #31
 8007bdc:	d510      	bpl.n	8007c00 <_printf_float+0x250>
 8007bde:	ee18 3a10 	vmov	r3, s16
 8007be2:	4652      	mov	r2, sl
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	f43f af41 	beq.w	8007a72 <_printf_float+0xc2>
 8007bf0:	f04f 0800 	mov.w	r8, #0
 8007bf4:	f104 091a 	add.w	r9, r4, #26
 8007bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	4543      	cmp	r3, r8
 8007bfe:	dc09      	bgt.n	8007c14 <_printf_float+0x264>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	079b      	lsls	r3, r3, #30
 8007c04:	f100 8105 	bmi.w	8007e12 <_printf_float+0x462>
 8007c08:	68e0      	ldr	r0, [r4, #12]
 8007c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c0c:	4298      	cmp	r0, r3
 8007c0e:	bfb8      	it	lt
 8007c10:	4618      	movlt	r0, r3
 8007c12:	e730      	b.n	8007a76 <_printf_float+0xc6>
 8007c14:	2301      	movs	r3, #1
 8007c16:	464a      	mov	r2, r9
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f43f af27 	beq.w	8007a72 <_printf_float+0xc2>
 8007c24:	f108 0801 	add.w	r8, r8, #1
 8007c28:	e7e6      	b.n	8007bf8 <_printf_float+0x248>
 8007c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dc39      	bgt.n	8007ca4 <_printf_float+0x2f4>
 8007c30:	4a1b      	ldr	r2, [pc, #108]	; (8007ca0 <_printf_float+0x2f0>)
 8007c32:	2301      	movs	r3, #1
 8007c34:	4631      	mov	r1, r6
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f43f af19 	beq.w	8007a72 <_printf_float+0xc2>
 8007c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c44:	4313      	orrs	r3, r2
 8007c46:	d102      	bne.n	8007c4e <_printf_float+0x29e>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	07d9      	lsls	r1, r3, #31
 8007c4c:	d5d8      	bpl.n	8007c00 <_printf_float+0x250>
 8007c4e:	ee18 3a10 	vmov	r3, s16
 8007c52:	4652      	mov	r2, sl
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b8      	blx	r7
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	f43f af09 	beq.w	8007a72 <_printf_float+0xc2>
 8007c60:	f04f 0900 	mov.w	r9, #0
 8007c64:	f104 0a1a 	add.w	sl, r4, #26
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	425b      	negs	r3, r3
 8007c6c:	454b      	cmp	r3, r9
 8007c6e:	dc01      	bgt.n	8007c74 <_printf_float+0x2c4>
 8007c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c72:	e792      	b.n	8007b9a <_printf_float+0x1ea>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4652      	mov	r2, sl
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f aef7 	beq.w	8007a72 <_printf_float+0xc2>
 8007c84:	f109 0901 	add.w	r9, r9, #1
 8007c88:	e7ee      	b.n	8007c68 <_printf_float+0x2b8>
 8007c8a:	bf00      	nop
 8007c8c:	7fefffff 	.word	0x7fefffff
 8007c90:	0800a2dc 	.word	0x0800a2dc
 8007c94:	0800a2e0 	.word	0x0800a2e0
 8007c98:	0800a2e8 	.word	0x0800a2e8
 8007c9c:	0800a2e4 	.word	0x0800a2e4
 8007ca0:	0800a2ec 	.word	0x0800a2ec
 8007ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	bfa8      	it	ge
 8007cac:	461a      	movge	r2, r3
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	4691      	mov	r9, r2
 8007cb2:	dc37      	bgt.n	8007d24 <_printf_float+0x374>
 8007cb4:	f04f 0b00 	mov.w	fp, #0
 8007cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cbc:	f104 021a 	add.w	r2, r4, #26
 8007cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cc2:	9305      	str	r3, [sp, #20]
 8007cc4:	eba3 0309 	sub.w	r3, r3, r9
 8007cc8:	455b      	cmp	r3, fp
 8007cca:	dc33      	bgt.n	8007d34 <_printf_float+0x384>
 8007ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	db3b      	blt.n	8007d4c <_printf_float+0x39c>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	07da      	lsls	r2, r3, #31
 8007cd8:	d438      	bmi.n	8007d4c <_printf_float+0x39c>
 8007cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cdc:	9a05      	ldr	r2, [sp, #20]
 8007cde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ce0:	1a9a      	subs	r2, r3, r2
 8007ce2:	eba3 0901 	sub.w	r9, r3, r1
 8007ce6:	4591      	cmp	r9, r2
 8007ce8:	bfa8      	it	ge
 8007cea:	4691      	movge	r9, r2
 8007cec:	f1b9 0f00 	cmp.w	r9, #0
 8007cf0:	dc35      	bgt.n	8007d5e <_printf_float+0x3ae>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cfa:	f104 0a1a 	add.w	sl, r4, #26
 8007cfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d02:	1a9b      	subs	r3, r3, r2
 8007d04:	eba3 0309 	sub.w	r3, r3, r9
 8007d08:	4543      	cmp	r3, r8
 8007d0a:	f77f af79 	ble.w	8007c00 <_printf_float+0x250>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4652      	mov	r2, sl
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	f43f aeaa 	beq.w	8007a72 <_printf_float+0xc2>
 8007d1e:	f108 0801 	add.w	r8, r8, #1
 8007d22:	e7ec      	b.n	8007cfe <_printf_float+0x34e>
 8007d24:	4613      	mov	r3, r2
 8007d26:	4631      	mov	r1, r6
 8007d28:	4642      	mov	r2, r8
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d1c0      	bne.n	8007cb4 <_printf_float+0x304>
 8007d32:	e69e      	b.n	8007a72 <_printf_float+0xc2>
 8007d34:	2301      	movs	r3, #1
 8007d36:	4631      	mov	r1, r6
 8007d38:	4628      	mov	r0, r5
 8007d3a:	9205      	str	r2, [sp, #20]
 8007d3c:	47b8      	blx	r7
 8007d3e:	3001      	adds	r0, #1
 8007d40:	f43f ae97 	beq.w	8007a72 <_printf_float+0xc2>
 8007d44:	9a05      	ldr	r2, [sp, #20]
 8007d46:	f10b 0b01 	add.w	fp, fp, #1
 8007d4a:	e7b9      	b.n	8007cc0 <_printf_float+0x310>
 8007d4c:	ee18 3a10 	vmov	r3, s16
 8007d50:	4652      	mov	r2, sl
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d1be      	bne.n	8007cda <_printf_float+0x32a>
 8007d5c:	e689      	b.n	8007a72 <_printf_float+0xc2>
 8007d5e:	9a05      	ldr	r2, [sp, #20]
 8007d60:	464b      	mov	r3, r9
 8007d62:	4442      	add	r2, r8
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d1c1      	bne.n	8007cf2 <_printf_float+0x342>
 8007d6e:	e680      	b.n	8007a72 <_printf_float+0xc2>
 8007d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d72:	2a01      	cmp	r2, #1
 8007d74:	dc01      	bgt.n	8007d7a <_printf_float+0x3ca>
 8007d76:	07db      	lsls	r3, r3, #31
 8007d78:	d538      	bpl.n	8007dec <_printf_float+0x43c>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	f43f ae74 	beq.w	8007a72 <_printf_float+0xc2>
 8007d8a:	ee18 3a10 	vmov	r3, s16
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f ae6b 	beq.w	8007a72 <_printf_float+0xc2>
 8007d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007da0:	2200      	movs	r2, #0
 8007da2:	2300      	movs	r3, #0
 8007da4:	f7f8 fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8007da8:	b9d8      	cbnz	r0, 8007de2 <_printf_float+0x432>
 8007daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dac:	f108 0201 	add.w	r2, r8, #1
 8007db0:	3b01      	subs	r3, #1
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	d10e      	bne.n	8007dda <_printf_float+0x42a>
 8007dbc:	e659      	b.n	8007a72 <_printf_float+0xc2>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f43f ae52 	beq.w	8007a72 <_printf_float+0xc2>
 8007dce:	f108 0801 	add.w	r8, r8, #1
 8007dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	4543      	cmp	r3, r8
 8007dd8:	dcf1      	bgt.n	8007dbe <_printf_float+0x40e>
 8007dda:	464b      	mov	r3, r9
 8007ddc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007de0:	e6dc      	b.n	8007b9c <_printf_float+0x1ec>
 8007de2:	f04f 0800 	mov.w	r8, #0
 8007de6:	f104 0a1a 	add.w	sl, r4, #26
 8007dea:	e7f2      	b.n	8007dd2 <_printf_float+0x422>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4642      	mov	r2, r8
 8007df0:	e7df      	b.n	8007db2 <_printf_float+0x402>
 8007df2:	2301      	movs	r3, #1
 8007df4:	464a      	mov	r2, r9
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	f43f ae38 	beq.w	8007a72 <_printf_float+0xc2>
 8007e02:	f108 0801 	add.w	r8, r8, #1
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e0a:	1a5b      	subs	r3, r3, r1
 8007e0c:	4543      	cmp	r3, r8
 8007e0e:	dcf0      	bgt.n	8007df2 <_printf_float+0x442>
 8007e10:	e6fa      	b.n	8007c08 <_printf_float+0x258>
 8007e12:	f04f 0800 	mov.w	r8, #0
 8007e16:	f104 0919 	add.w	r9, r4, #25
 8007e1a:	e7f4      	b.n	8007e06 <_printf_float+0x456>

08007e1c <_printf_common>:
 8007e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	4616      	mov	r6, r2
 8007e22:	4699      	mov	r9, r3
 8007e24:	688a      	ldr	r2, [r1, #8]
 8007e26:	690b      	ldr	r3, [r1, #16]
 8007e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	bfb8      	it	lt
 8007e30:	4613      	movlt	r3, r2
 8007e32:	6033      	str	r3, [r6, #0]
 8007e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e38:	4607      	mov	r7, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	b10a      	cbz	r2, 8007e42 <_printf_common+0x26>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6033      	str	r3, [r6, #0]
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	0699      	lsls	r1, r3, #26
 8007e46:	bf42      	ittt	mi
 8007e48:	6833      	ldrmi	r3, [r6, #0]
 8007e4a:	3302      	addmi	r3, #2
 8007e4c:	6033      	strmi	r3, [r6, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	f015 0506 	ands.w	r5, r5, #6
 8007e54:	d106      	bne.n	8007e64 <_printf_common+0x48>
 8007e56:	f104 0a19 	add.w	sl, r4, #25
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	6832      	ldr	r2, [r6, #0]
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dc26      	bgt.n	8007eb2 <_printf_common+0x96>
 8007e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e68:	1e13      	subs	r3, r2, #0
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	0692      	lsls	r2, r2, #26
 8007e72:	d42b      	bmi.n	8007ecc <_printf_common+0xb0>
 8007e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c0      	blx	r8
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d01e      	beq.n	8007ec0 <_printf_common+0xa4>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	68e5      	ldr	r5, [r4, #12]
 8007e86:	6832      	ldr	r2, [r6, #0]
 8007e88:	f003 0306 	and.w	r3, r3, #6
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	bf08      	it	eq
 8007e90:	1aad      	subeq	r5, r5, r2
 8007e92:	68a3      	ldr	r3, [r4, #8]
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	bf0c      	ite	eq
 8007e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e9c:	2500      	movne	r5, #0
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	bfc4      	itt	gt
 8007ea2:	1a9b      	subgt	r3, r3, r2
 8007ea4:	18ed      	addgt	r5, r5, r3
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	341a      	adds	r4, #26
 8007eaa:	42b5      	cmp	r5, r6
 8007eac:	d11a      	bne.n	8007ee4 <_printf_common+0xc8>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e008      	b.n	8007ec4 <_printf_common+0xa8>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4638      	mov	r0, r7
 8007eba:	47c0      	blx	r8
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d103      	bne.n	8007ec8 <_printf_common+0xac>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	3501      	adds	r5, #1
 8007eca:	e7c6      	b.n	8007e5a <_printf_common+0x3e>
 8007ecc:	18e1      	adds	r1, r4, r3
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	2030      	movs	r0, #48	; 0x30
 8007ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ed6:	4422      	add	r2, r4
 8007ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	e7c7      	b.n	8007e74 <_printf_common+0x58>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c0      	blx	r8
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d0e6      	beq.n	8007ec0 <_printf_common+0xa4>
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7d9      	b.n	8007eaa <_printf_common+0x8e>
	...

08007ef8 <_printf_i>:
 8007ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	7e0f      	ldrb	r7, [r1, #24]
 8007efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f00:	2f78      	cmp	r7, #120	; 0x78
 8007f02:	4691      	mov	r9, r2
 8007f04:	4680      	mov	r8, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f0e:	d807      	bhi.n	8007f20 <_printf_i+0x28>
 8007f10:	2f62      	cmp	r7, #98	; 0x62
 8007f12:	d80a      	bhi.n	8007f2a <_printf_i+0x32>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	f000 80d8 	beq.w	80080ca <_printf_i+0x1d2>
 8007f1a:	2f58      	cmp	r7, #88	; 0x58
 8007f1c:	f000 80a3 	beq.w	8008066 <_printf_i+0x16e>
 8007f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f28:	e03a      	b.n	8007fa0 <_printf_i+0xa8>
 8007f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f2e:	2b15      	cmp	r3, #21
 8007f30:	d8f6      	bhi.n	8007f20 <_printf_i+0x28>
 8007f32:	a101      	add	r1, pc, #4	; (adr r1, 8007f38 <_printf_i+0x40>)
 8007f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f38:	08007f91 	.word	0x08007f91
 8007f3c:	08007fa5 	.word	0x08007fa5
 8007f40:	08007f21 	.word	0x08007f21
 8007f44:	08007f21 	.word	0x08007f21
 8007f48:	08007f21 	.word	0x08007f21
 8007f4c:	08007f21 	.word	0x08007f21
 8007f50:	08007fa5 	.word	0x08007fa5
 8007f54:	08007f21 	.word	0x08007f21
 8007f58:	08007f21 	.word	0x08007f21
 8007f5c:	08007f21 	.word	0x08007f21
 8007f60:	08007f21 	.word	0x08007f21
 8007f64:	080080b1 	.word	0x080080b1
 8007f68:	08007fd5 	.word	0x08007fd5
 8007f6c:	08008093 	.word	0x08008093
 8007f70:	08007f21 	.word	0x08007f21
 8007f74:	08007f21 	.word	0x08007f21
 8007f78:	080080d3 	.word	0x080080d3
 8007f7c:	08007f21 	.word	0x08007f21
 8007f80:	08007fd5 	.word	0x08007fd5
 8007f84:	08007f21 	.word	0x08007f21
 8007f88:	08007f21 	.word	0x08007f21
 8007f8c:	0800809b 	.word	0x0800809b
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	602a      	str	r2, [r5, #0]
 8007f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0a3      	b.n	80080ec <_printf_i+0x1f4>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	6829      	ldr	r1, [r5, #0]
 8007fa8:	0606      	lsls	r6, r0, #24
 8007faa:	f101 0304 	add.w	r3, r1, #4
 8007fae:	d50a      	bpl.n	8007fc6 <_printf_i+0xce>
 8007fb0:	680e      	ldr	r6, [r1, #0]
 8007fb2:	602b      	str	r3, [r5, #0]
 8007fb4:	2e00      	cmp	r6, #0
 8007fb6:	da03      	bge.n	8007fc0 <_printf_i+0xc8>
 8007fb8:	232d      	movs	r3, #45	; 0x2d
 8007fba:	4276      	negs	r6, r6
 8007fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc0:	485e      	ldr	r0, [pc, #376]	; (800813c <_printf_i+0x244>)
 8007fc2:	230a      	movs	r3, #10
 8007fc4:	e019      	b.n	8007ffa <_printf_i+0x102>
 8007fc6:	680e      	ldr	r6, [r1, #0]
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fce:	bf18      	it	ne
 8007fd0:	b236      	sxthne	r6, r6
 8007fd2:	e7ef      	b.n	8007fb4 <_printf_i+0xbc>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	6820      	ldr	r0, [r4, #0]
 8007fd8:	1d19      	adds	r1, r3, #4
 8007fda:	6029      	str	r1, [r5, #0]
 8007fdc:	0601      	lsls	r1, r0, #24
 8007fde:	d501      	bpl.n	8007fe4 <_printf_i+0xec>
 8007fe0:	681e      	ldr	r6, [r3, #0]
 8007fe2:	e002      	b.n	8007fea <_printf_i+0xf2>
 8007fe4:	0646      	lsls	r6, r0, #25
 8007fe6:	d5fb      	bpl.n	8007fe0 <_printf_i+0xe8>
 8007fe8:	881e      	ldrh	r6, [r3, #0]
 8007fea:	4854      	ldr	r0, [pc, #336]	; (800813c <_printf_i+0x244>)
 8007fec:	2f6f      	cmp	r7, #111	; 0x6f
 8007fee:	bf0c      	ite	eq
 8007ff0:	2308      	moveq	r3, #8
 8007ff2:	230a      	movne	r3, #10
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ffa:	6865      	ldr	r5, [r4, #4]
 8007ffc:	60a5      	str	r5, [r4, #8]
 8007ffe:	2d00      	cmp	r5, #0
 8008000:	bfa2      	ittt	ge
 8008002:	6821      	ldrge	r1, [r4, #0]
 8008004:	f021 0104 	bicge.w	r1, r1, #4
 8008008:	6021      	strge	r1, [r4, #0]
 800800a:	b90e      	cbnz	r6, 8008010 <_printf_i+0x118>
 800800c:	2d00      	cmp	r5, #0
 800800e:	d04d      	beq.n	80080ac <_printf_i+0x1b4>
 8008010:	4615      	mov	r5, r2
 8008012:	fbb6 f1f3 	udiv	r1, r6, r3
 8008016:	fb03 6711 	mls	r7, r3, r1, r6
 800801a:	5dc7      	ldrb	r7, [r0, r7]
 800801c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008020:	4637      	mov	r7, r6
 8008022:	42bb      	cmp	r3, r7
 8008024:	460e      	mov	r6, r1
 8008026:	d9f4      	bls.n	8008012 <_printf_i+0x11a>
 8008028:	2b08      	cmp	r3, #8
 800802a:	d10b      	bne.n	8008044 <_printf_i+0x14c>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	07de      	lsls	r6, r3, #31
 8008030:	d508      	bpl.n	8008044 <_printf_i+0x14c>
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	6861      	ldr	r1, [r4, #4]
 8008036:	4299      	cmp	r1, r3
 8008038:	bfde      	ittt	le
 800803a:	2330      	movle	r3, #48	; 0x30
 800803c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008040:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008044:	1b52      	subs	r2, r2, r5
 8008046:	6122      	str	r2, [r4, #16]
 8008048:	f8cd a000 	str.w	sl, [sp]
 800804c:	464b      	mov	r3, r9
 800804e:	aa03      	add	r2, sp, #12
 8008050:	4621      	mov	r1, r4
 8008052:	4640      	mov	r0, r8
 8008054:	f7ff fee2 	bl	8007e1c <_printf_common>
 8008058:	3001      	adds	r0, #1
 800805a:	d14c      	bne.n	80080f6 <_printf_i+0x1fe>
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	b004      	add	sp, #16
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008066:	4835      	ldr	r0, [pc, #212]	; (800813c <_printf_i+0x244>)
 8008068:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800806c:	6829      	ldr	r1, [r5, #0]
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	f851 6b04 	ldr.w	r6, [r1], #4
 8008074:	6029      	str	r1, [r5, #0]
 8008076:	061d      	lsls	r5, r3, #24
 8008078:	d514      	bpl.n	80080a4 <_printf_i+0x1ac>
 800807a:	07df      	lsls	r7, r3, #31
 800807c:	bf44      	itt	mi
 800807e:	f043 0320 	orrmi.w	r3, r3, #32
 8008082:	6023      	strmi	r3, [r4, #0]
 8008084:	b91e      	cbnz	r6, 800808e <_printf_i+0x196>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	f023 0320 	bic.w	r3, r3, #32
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	2310      	movs	r3, #16
 8008090:	e7b0      	b.n	8007ff4 <_printf_i+0xfc>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	f043 0320 	orr.w	r3, r3, #32
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	2378      	movs	r3, #120	; 0x78
 800809c:	4828      	ldr	r0, [pc, #160]	; (8008140 <_printf_i+0x248>)
 800809e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080a2:	e7e3      	b.n	800806c <_printf_i+0x174>
 80080a4:	0659      	lsls	r1, r3, #25
 80080a6:	bf48      	it	mi
 80080a8:	b2b6      	uxthmi	r6, r6
 80080aa:	e7e6      	b.n	800807a <_printf_i+0x182>
 80080ac:	4615      	mov	r5, r2
 80080ae:	e7bb      	b.n	8008028 <_printf_i+0x130>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	6826      	ldr	r6, [r4, #0]
 80080b4:	6961      	ldr	r1, [r4, #20]
 80080b6:	1d18      	adds	r0, r3, #4
 80080b8:	6028      	str	r0, [r5, #0]
 80080ba:	0635      	lsls	r5, r6, #24
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	d501      	bpl.n	80080c4 <_printf_i+0x1cc>
 80080c0:	6019      	str	r1, [r3, #0]
 80080c2:	e002      	b.n	80080ca <_printf_i+0x1d2>
 80080c4:	0670      	lsls	r0, r6, #25
 80080c6:	d5fb      	bpl.n	80080c0 <_printf_i+0x1c8>
 80080c8:	8019      	strh	r1, [r3, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	4615      	mov	r5, r2
 80080d0:	e7ba      	b.n	8008048 <_printf_i+0x150>
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	1d1a      	adds	r2, r3, #4
 80080d6:	602a      	str	r2, [r5, #0]
 80080d8:	681d      	ldr	r5, [r3, #0]
 80080da:	6862      	ldr	r2, [r4, #4]
 80080dc:	2100      	movs	r1, #0
 80080de:	4628      	mov	r0, r5
 80080e0:	f7f8 f886 	bl	80001f0 <memchr>
 80080e4:	b108      	cbz	r0, 80080ea <_printf_i+0x1f2>
 80080e6:	1b40      	subs	r0, r0, r5
 80080e8:	6060      	str	r0, [r4, #4]
 80080ea:	6863      	ldr	r3, [r4, #4]
 80080ec:	6123      	str	r3, [r4, #16]
 80080ee:	2300      	movs	r3, #0
 80080f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f4:	e7a8      	b.n	8008048 <_printf_i+0x150>
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	462a      	mov	r2, r5
 80080fa:	4649      	mov	r1, r9
 80080fc:	4640      	mov	r0, r8
 80080fe:	47d0      	blx	sl
 8008100:	3001      	adds	r0, #1
 8008102:	d0ab      	beq.n	800805c <_printf_i+0x164>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	079b      	lsls	r3, r3, #30
 8008108:	d413      	bmi.n	8008132 <_printf_i+0x23a>
 800810a:	68e0      	ldr	r0, [r4, #12]
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	4298      	cmp	r0, r3
 8008110:	bfb8      	it	lt
 8008112:	4618      	movlt	r0, r3
 8008114:	e7a4      	b.n	8008060 <_printf_i+0x168>
 8008116:	2301      	movs	r3, #1
 8008118:	4632      	mov	r2, r6
 800811a:	4649      	mov	r1, r9
 800811c:	4640      	mov	r0, r8
 800811e:	47d0      	blx	sl
 8008120:	3001      	adds	r0, #1
 8008122:	d09b      	beq.n	800805c <_printf_i+0x164>
 8008124:	3501      	adds	r5, #1
 8008126:	68e3      	ldr	r3, [r4, #12]
 8008128:	9903      	ldr	r1, [sp, #12]
 800812a:	1a5b      	subs	r3, r3, r1
 800812c:	42ab      	cmp	r3, r5
 800812e:	dcf2      	bgt.n	8008116 <_printf_i+0x21e>
 8008130:	e7eb      	b.n	800810a <_printf_i+0x212>
 8008132:	2500      	movs	r5, #0
 8008134:	f104 0619 	add.w	r6, r4, #25
 8008138:	e7f5      	b.n	8008126 <_printf_i+0x22e>
 800813a:	bf00      	nop
 800813c:	0800a2ee 	.word	0x0800a2ee
 8008140:	0800a2ff 	.word	0x0800a2ff

08008144 <quorem>:
 8008144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	6903      	ldr	r3, [r0, #16]
 800814a:	690c      	ldr	r4, [r1, #16]
 800814c:	42a3      	cmp	r3, r4
 800814e:	4607      	mov	r7, r0
 8008150:	f2c0 8081 	blt.w	8008256 <quorem+0x112>
 8008154:	3c01      	subs	r4, #1
 8008156:	f101 0814 	add.w	r8, r1, #20
 800815a:	f100 0514 	add.w	r5, r0, #20
 800815e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800816c:	3301      	adds	r3, #1
 800816e:	429a      	cmp	r2, r3
 8008170:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008174:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008178:	fbb2 f6f3 	udiv	r6, r2, r3
 800817c:	d331      	bcc.n	80081e2 <quorem+0x9e>
 800817e:	f04f 0e00 	mov.w	lr, #0
 8008182:	4640      	mov	r0, r8
 8008184:	46ac      	mov	ip, r5
 8008186:	46f2      	mov	sl, lr
 8008188:	f850 2b04 	ldr.w	r2, [r0], #4
 800818c:	b293      	uxth	r3, r2
 800818e:	fb06 e303 	mla	r3, r6, r3, lr
 8008192:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008196:	b29b      	uxth	r3, r3
 8008198:	ebaa 0303 	sub.w	r3, sl, r3
 800819c:	f8dc a000 	ldr.w	sl, [ip]
 80081a0:	0c12      	lsrs	r2, r2, #16
 80081a2:	fa13 f38a 	uxtah	r3, r3, sl
 80081a6:	fb06 e202 	mla	r2, r6, r2, lr
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	9b00      	ldr	r3, [sp, #0]
 80081ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081b2:	b292      	uxth	r2, r2
 80081b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80081c0:	4581      	cmp	r9, r0
 80081c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c6:	f84c 3b04 	str.w	r3, [ip], #4
 80081ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081ce:	d2db      	bcs.n	8008188 <quorem+0x44>
 80081d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80081d4:	b92b      	cbnz	r3, 80081e2 <quorem+0x9e>
 80081d6:	9b01      	ldr	r3, [sp, #4]
 80081d8:	3b04      	subs	r3, #4
 80081da:	429d      	cmp	r5, r3
 80081dc:	461a      	mov	r2, r3
 80081de:	d32e      	bcc.n	800823e <quorem+0xfa>
 80081e0:	613c      	str	r4, [r7, #16]
 80081e2:	4638      	mov	r0, r7
 80081e4:	f001 f8c6 	bl	8009374 <__mcmp>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	db24      	blt.n	8008236 <quorem+0xf2>
 80081ec:	3601      	adds	r6, #1
 80081ee:	4628      	mov	r0, r5
 80081f0:	f04f 0c00 	mov.w	ip, #0
 80081f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80081f8:	f8d0 e000 	ldr.w	lr, [r0]
 80081fc:	b293      	uxth	r3, r2
 80081fe:	ebac 0303 	sub.w	r3, ip, r3
 8008202:	0c12      	lsrs	r2, r2, #16
 8008204:	fa13 f38e 	uxtah	r3, r3, lr
 8008208:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800820c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008210:	b29b      	uxth	r3, r3
 8008212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008216:	45c1      	cmp	r9, r8
 8008218:	f840 3b04 	str.w	r3, [r0], #4
 800821c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008220:	d2e8      	bcs.n	80081f4 <quorem+0xb0>
 8008222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800822a:	b922      	cbnz	r2, 8008236 <quorem+0xf2>
 800822c:	3b04      	subs	r3, #4
 800822e:	429d      	cmp	r5, r3
 8008230:	461a      	mov	r2, r3
 8008232:	d30a      	bcc.n	800824a <quorem+0x106>
 8008234:	613c      	str	r4, [r7, #16]
 8008236:	4630      	mov	r0, r6
 8008238:	b003      	add	sp, #12
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	3b04      	subs	r3, #4
 8008242:	2a00      	cmp	r2, #0
 8008244:	d1cc      	bne.n	80081e0 <quorem+0x9c>
 8008246:	3c01      	subs	r4, #1
 8008248:	e7c7      	b.n	80081da <quorem+0x96>
 800824a:	6812      	ldr	r2, [r2, #0]
 800824c:	3b04      	subs	r3, #4
 800824e:	2a00      	cmp	r2, #0
 8008250:	d1f0      	bne.n	8008234 <quorem+0xf0>
 8008252:	3c01      	subs	r4, #1
 8008254:	e7eb      	b.n	800822e <quorem+0xea>
 8008256:	2000      	movs	r0, #0
 8008258:	e7ee      	b.n	8008238 <quorem+0xf4>
 800825a:	0000      	movs	r0, r0
 800825c:	0000      	movs	r0, r0
	...

08008260 <_dtoa_r>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	ed2d 8b04 	vpush	{d8-d9}
 8008268:	ec57 6b10 	vmov	r6, r7, d0
 800826c:	b093      	sub	sp, #76	; 0x4c
 800826e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008274:	9106      	str	r1, [sp, #24]
 8008276:	ee10 aa10 	vmov	sl, s0
 800827a:	4604      	mov	r4, r0
 800827c:	9209      	str	r2, [sp, #36]	; 0x24
 800827e:	930c      	str	r3, [sp, #48]	; 0x30
 8008280:	46bb      	mov	fp, r7
 8008282:	b975      	cbnz	r5, 80082a2 <_dtoa_r+0x42>
 8008284:	2010      	movs	r0, #16
 8008286:	f000 fddd 	bl	8008e44 <malloc>
 800828a:	4602      	mov	r2, r0
 800828c:	6260      	str	r0, [r4, #36]	; 0x24
 800828e:	b920      	cbnz	r0, 800829a <_dtoa_r+0x3a>
 8008290:	4ba7      	ldr	r3, [pc, #668]	; (8008530 <_dtoa_r+0x2d0>)
 8008292:	21ea      	movs	r1, #234	; 0xea
 8008294:	48a7      	ldr	r0, [pc, #668]	; (8008534 <_dtoa_r+0x2d4>)
 8008296:	f001 fa75 	bl	8009784 <__assert_func>
 800829a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800829e:	6005      	str	r5, [r0, #0]
 80082a0:	60c5      	str	r5, [r0, #12]
 80082a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	b151      	cbz	r1, 80082be <_dtoa_r+0x5e>
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	604a      	str	r2, [r1, #4]
 80082ac:	2301      	movs	r3, #1
 80082ae:	4093      	lsls	r3, r2
 80082b0:	608b      	str	r3, [r1, #8]
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 fe1c 	bl	8008ef0 <_Bfree>
 80082b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	1e3b      	subs	r3, r7, #0
 80082c0:	bfaa      	itet	ge
 80082c2:	2300      	movge	r3, #0
 80082c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80082c8:	f8c8 3000 	strge.w	r3, [r8]
 80082cc:	4b9a      	ldr	r3, [pc, #616]	; (8008538 <_dtoa_r+0x2d8>)
 80082ce:	bfbc      	itt	lt
 80082d0:	2201      	movlt	r2, #1
 80082d2:	f8c8 2000 	strlt.w	r2, [r8]
 80082d6:	ea33 030b 	bics.w	r3, r3, fp
 80082da:	d11b      	bne.n	8008314 <_dtoa_r+0xb4>
 80082dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082de:	f242 730f 	movw	r3, #9999	; 0x270f
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082e8:	4333      	orrs	r3, r6
 80082ea:	f000 8592 	beq.w	8008e12 <_dtoa_r+0xbb2>
 80082ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082f0:	b963      	cbnz	r3, 800830c <_dtoa_r+0xac>
 80082f2:	4b92      	ldr	r3, [pc, #584]	; (800853c <_dtoa_r+0x2dc>)
 80082f4:	e022      	b.n	800833c <_dtoa_r+0xdc>
 80082f6:	4b92      	ldr	r3, [pc, #584]	; (8008540 <_dtoa_r+0x2e0>)
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	3308      	adds	r3, #8
 80082fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	9801      	ldr	r0, [sp, #4]
 8008302:	b013      	add	sp, #76	; 0x4c
 8008304:	ecbd 8b04 	vpop	{d8-d9}
 8008308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	4b8b      	ldr	r3, [pc, #556]	; (800853c <_dtoa_r+0x2dc>)
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	3303      	adds	r3, #3
 8008312:	e7f3      	b.n	80082fc <_dtoa_r+0x9c>
 8008314:	2200      	movs	r2, #0
 8008316:	2300      	movs	r3, #0
 8008318:	4650      	mov	r0, sl
 800831a:	4659      	mov	r1, fp
 800831c:	f7f8 fbdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008320:	ec4b ab19 	vmov	d9, sl, fp
 8008324:	4680      	mov	r8, r0
 8008326:	b158      	cbz	r0, 8008340 <_dtoa_r+0xe0>
 8008328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800832a:	2301      	movs	r3, #1
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 856b 	beq.w	8008e0c <_dtoa_r+0xbac>
 8008336:	4883      	ldr	r0, [pc, #524]	; (8008544 <_dtoa_r+0x2e4>)
 8008338:	6018      	str	r0, [r3, #0]
 800833a:	1e43      	subs	r3, r0, #1
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	e7df      	b.n	8008300 <_dtoa_r+0xa0>
 8008340:	ec4b ab10 	vmov	d0, sl, fp
 8008344:	aa10      	add	r2, sp, #64	; 0x40
 8008346:	a911      	add	r1, sp, #68	; 0x44
 8008348:	4620      	mov	r0, r4
 800834a:	f001 f8b9 	bl	80094c0 <__d2b>
 800834e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008352:	ee08 0a10 	vmov	s16, r0
 8008356:	2d00      	cmp	r5, #0
 8008358:	f000 8084 	beq.w	8008464 <_dtoa_r+0x204>
 800835c:	ee19 3a90 	vmov	r3, s19
 8008360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008368:	4656      	mov	r6, sl
 800836a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800836e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008376:	4b74      	ldr	r3, [pc, #464]	; (8008548 <_dtoa_r+0x2e8>)
 8008378:	2200      	movs	r2, #0
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	f7f7 ff8b 	bl	8000298 <__aeabi_dsub>
 8008382:	a365      	add	r3, pc, #404	; (adr r3, 8008518 <_dtoa_r+0x2b8>)
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f7f8 f93e 	bl	8000608 <__aeabi_dmul>
 800838c:	a364      	add	r3, pc, #400	; (adr r3, 8008520 <_dtoa_r+0x2c0>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f7f7 ff83 	bl	800029c <__adddf3>
 8008396:	4606      	mov	r6, r0
 8008398:	4628      	mov	r0, r5
 800839a:	460f      	mov	r7, r1
 800839c:	f7f8 f8ca 	bl	8000534 <__aeabi_i2d>
 80083a0:	a361      	add	r3, pc, #388	; (adr r3, 8008528 <_dtoa_r+0x2c8>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f7f8 f92f 	bl	8000608 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f7 ff73 	bl	800029c <__adddf3>
 80083b6:	4606      	mov	r6, r0
 80083b8:	460f      	mov	r7, r1
 80083ba:	f7f8 fbd5 	bl	8000b68 <__aeabi_d2iz>
 80083be:	2200      	movs	r2, #0
 80083c0:	9000      	str	r0, [sp, #0]
 80083c2:	2300      	movs	r3, #0
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f8 fb90 	bl	8000aec <__aeabi_dcmplt>
 80083cc:	b150      	cbz	r0, 80083e4 <_dtoa_r+0x184>
 80083ce:	9800      	ldr	r0, [sp, #0]
 80083d0:	f7f8 f8b0 	bl	8000534 <__aeabi_i2d>
 80083d4:	4632      	mov	r2, r6
 80083d6:	463b      	mov	r3, r7
 80083d8:	f7f8 fb7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80083dc:	b910      	cbnz	r0, 80083e4 <_dtoa_r+0x184>
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	2b16      	cmp	r3, #22
 80083e8:	d85a      	bhi.n	80084a0 <_dtoa_r+0x240>
 80083ea:	9a00      	ldr	r2, [sp, #0]
 80083ec:	4b57      	ldr	r3, [pc, #348]	; (800854c <_dtoa_r+0x2ec>)
 80083ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	ec51 0b19 	vmov	r0, r1, d9
 80083fa:	f7f8 fb77 	bl	8000aec <__aeabi_dcmplt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d050      	beq.n	80084a4 <_dtoa_r+0x244>
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	3b01      	subs	r3, #1
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2300      	movs	r3, #0
 800840a:	930b      	str	r3, [sp, #44]	; 0x2c
 800840c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800840e:	1b5d      	subs	r5, r3, r5
 8008410:	1e6b      	subs	r3, r5, #1
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	bf45      	ittet	mi
 8008416:	f1c5 0301 	rsbmi	r3, r5, #1
 800841a:	9304      	strmi	r3, [sp, #16]
 800841c:	2300      	movpl	r3, #0
 800841e:	2300      	movmi	r3, #0
 8008420:	bf4c      	ite	mi
 8008422:	9305      	strmi	r3, [sp, #20]
 8008424:	9304      	strpl	r3, [sp, #16]
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	db3d      	blt.n	80084a8 <_dtoa_r+0x248>
 800842c:	9b05      	ldr	r3, [sp, #20]
 800842e:	9a00      	ldr	r2, [sp, #0]
 8008430:	920a      	str	r2, [sp, #40]	; 0x28
 8008432:	4413      	add	r3, r2
 8008434:	9305      	str	r3, [sp, #20]
 8008436:	2300      	movs	r3, #0
 8008438:	9307      	str	r3, [sp, #28]
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	2b09      	cmp	r3, #9
 800843e:	f200 8089 	bhi.w	8008554 <_dtoa_r+0x2f4>
 8008442:	2b05      	cmp	r3, #5
 8008444:	bfc4      	itt	gt
 8008446:	3b04      	subgt	r3, #4
 8008448:	9306      	strgt	r3, [sp, #24]
 800844a:	9b06      	ldr	r3, [sp, #24]
 800844c:	f1a3 0302 	sub.w	r3, r3, #2
 8008450:	bfcc      	ite	gt
 8008452:	2500      	movgt	r5, #0
 8008454:	2501      	movle	r5, #1
 8008456:	2b03      	cmp	r3, #3
 8008458:	f200 8087 	bhi.w	800856a <_dtoa_r+0x30a>
 800845c:	e8df f003 	tbb	[pc, r3]
 8008460:	59383a2d 	.word	0x59383a2d
 8008464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008468:	441d      	add	r5, r3
 800846a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800846e:	2b20      	cmp	r3, #32
 8008470:	bfc1      	itttt	gt
 8008472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800847a:	fa0b f303 	lslgt.w	r3, fp, r3
 800847e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008482:	bfda      	itte	le
 8008484:	f1c3 0320 	rsble	r3, r3, #32
 8008488:	fa06 f003 	lslle.w	r0, r6, r3
 800848c:	4318      	orrgt	r0, r3
 800848e:	f7f8 f841 	bl	8000514 <__aeabi_ui2d>
 8008492:	2301      	movs	r3, #1
 8008494:	4606      	mov	r6, r0
 8008496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800849a:	3d01      	subs	r5, #1
 800849c:	930e      	str	r3, [sp, #56]	; 0x38
 800849e:	e76a      	b.n	8008376 <_dtoa_r+0x116>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e7b2      	b.n	800840a <_dtoa_r+0x1aa>
 80084a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80084a6:	e7b1      	b.n	800840c <_dtoa_r+0x1ac>
 80084a8:	9b04      	ldr	r3, [sp, #16]
 80084aa:	9a00      	ldr	r2, [sp, #0]
 80084ac:	1a9b      	subs	r3, r3, r2
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	4253      	negs	r3, r2
 80084b2:	9307      	str	r3, [sp, #28]
 80084b4:	2300      	movs	r3, #0
 80084b6:	930a      	str	r3, [sp, #40]	; 0x28
 80084b8:	e7bf      	b.n	800843a <_dtoa_r+0x1da>
 80084ba:	2300      	movs	r3, #0
 80084bc:	9308      	str	r3, [sp, #32]
 80084be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dc55      	bgt.n	8008570 <_dtoa_r+0x310>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084ca:	461a      	mov	r2, r3
 80084cc:	9209      	str	r2, [sp, #36]	; 0x24
 80084ce:	e00c      	b.n	80084ea <_dtoa_r+0x28a>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e7f3      	b.n	80084bc <_dtoa_r+0x25c>
 80084d4:	2300      	movs	r3, #0
 80084d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d8:	9308      	str	r3, [sp, #32]
 80084da:	9b00      	ldr	r3, [sp, #0]
 80084dc:	4413      	add	r3, r2
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	3301      	adds	r3, #1
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	9303      	str	r3, [sp, #12]
 80084e6:	bfb8      	it	lt
 80084e8:	2301      	movlt	r3, #1
 80084ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084ec:	2200      	movs	r2, #0
 80084ee:	6042      	str	r2, [r0, #4]
 80084f0:	2204      	movs	r2, #4
 80084f2:	f102 0614 	add.w	r6, r2, #20
 80084f6:	429e      	cmp	r6, r3
 80084f8:	6841      	ldr	r1, [r0, #4]
 80084fa:	d93d      	bls.n	8008578 <_dtoa_r+0x318>
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fcb7 	bl	8008e70 <_Balloc>
 8008502:	9001      	str	r0, [sp, #4]
 8008504:	2800      	cmp	r0, #0
 8008506:	d13b      	bne.n	8008580 <_dtoa_r+0x320>
 8008508:	4b11      	ldr	r3, [pc, #68]	; (8008550 <_dtoa_r+0x2f0>)
 800850a:	4602      	mov	r2, r0
 800850c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008510:	e6c0      	b.n	8008294 <_dtoa_r+0x34>
 8008512:	2301      	movs	r3, #1
 8008514:	e7df      	b.n	80084d6 <_dtoa_r+0x276>
 8008516:	bf00      	nop
 8008518:	636f4361 	.word	0x636f4361
 800851c:	3fd287a7 	.word	0x3fd287a7
 8008520:	8b60c8b3 	.word	0x8b60c8b3
 8008524:	3fc68a28 	.word	0x3fc68a28
 8008528:	509f79fb 	.word	0x509f79fb
 800852c:	3fd34413 	.word	0x3fd34413
 8008530:	0800a31d 	.word	0x0800a31d
 8008534:	0800a334 	.word	0x0800a334
 8008538:	7ff00000 	.word	0x7ff00000
 800853c:	0800a319 	.word	0x0800a319
 8008540:	0800a310 	.word	0x0800a310
 8008544:	0800a2ed 	.word	0x0800a2ed
 8008548:	3ff80000 	.word	0x3ff80000
 800854c:	0800a428 	.word	0x0800a428
 8008550:	0800a38f 	.word	0x0800a38f
 8008554:	2501      	movs	r5, #1
 8008556:	2300      	movs	r3, #0
 8008558:	9306      	str	r3, [sp, #24]
 800855a:	9508      	str	r5, [sp, #32]
 800855c:	f04f 33ff 	mov.w	r3, #4294967295
 8008560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008564:	2200      	movs	r2, #0
 8008566:	2312      	movs	r3, #18
 8008568:	e7b0      	b.n	80084cc <_dtoa_r+0x26c>
 800856a:	2301      	movs	r3, #1
 800856c:	9308      	str	r3, [sp, #32]
 800856e:	e7f5      	b.n	800855c <_dtoa_r+0x2fc>
 8008570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008576:	e7b8      	b.n	80084ea <_dtoa_r+0x28a>
 8008578:	3101      	adds	r1, #1
 800857a:	6041      	str	r1, [r0, #4]
 800857c:	0052      	lsls	r2, r2, #1
 800857e:	e7b8      	b.n	80084f2 <_dtoa_r+0x292>
 8008580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008582:	9a01      	ldr	r2, [sp, #4]
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	9b03      	ldr	r3, [sp, #12]
 8008588:	2b0e      	cmp	r3, #14
 800858a:	f200 809d 	bhi.w	80086c8 <_dtoa_r+0x468>
 800858e:	2d00      	cmp	r5, #0
 8008590:	f000 809a 	beq.w	80086c8 <_dtoa_r+0x468>
 8008594:	9b00      	ldr	r3, [sp, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dd32      	ble.n	8008600 <_dtoa_r+0x3a0>
 800859a:	4ab7      	ldr	r2, [pc, #732]	; (8008878 <_dtoa_r+0x618>)
 800859c:	f003 030f 	and.w	r3, r3, #15
 80085a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085a8:	9b00      	ldr	r3, [sp, #0]
 80085aa:	05d8      	lsls	r0, r3, #23
 80085ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80085b0:	d516      	bpl.n	80085e0 <_dtoa_r+0x380>
 80085b2:	4bb2      	ldr	r3, [pc, #712]	; (800887c <_dtoa_r+0x61c>)
 80085b4:	ec51 0b19 	vmov	r0, r1, d9
 80085b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085bc:	f7f8 f94e 	bl	800085c <__aeabi_ddiv>
 80085c0:	f007 070f 	and.w	r7, r7, #15
 80085c4:	4682      	mov	sl, r0
 80085c6:	468b      	mov	fp, r1
 80085c8:	2503      	movs	r5, #3
 80085ca:	4eac      	ldr	r6, [pc, #688]	; (800887c <_dtoa_r+0x61c>)
 80085cc:	b957      	cbnz	r7, 80085e4 <_dtoa_r+0x384>
 80085ce:	4642      	mov	r2, r8
 80085d0:	464b      	mov	r3, r9
 80085d2:	4650      	mov	r0, sl
 80085d4:	4659      	mov	r1, fp
 80085d6:	f7f8 f941 	bl	800085c <__aeabi_ddiv>
 80085da:	4682      	mov	sl, r0
 80085dc:	468b      	mov	fp, r1
 80085de:	e028      	b.n	8008632 <_dtoa_r+0x3d2>
 80085e0:	2502      	movs	r5, #2
 80085e2:	e7f2      	b.n	80085ca <_dtoa_r+0x36a>
 80085e4:	07f9      	lsls	r1, r7, #31
 80085e6:	d508      	bpl.n	80085fa <_dtoa_r+0x39a>
 80085e8:	4640      	mov	r0, r8
 80085ea:	4649      	mov	r1, r9
 80085ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085f0:	f7f8 f80a 	bl	8000608 <__aeabi_dmul>
 80085f4:	3501      	adds	r5, #1
 80085f6:	4680      	mov	r8, r0
 80085f8:	4689      	mov	r9, r1
 80085fa:	107f      	asrs	r7, r7, #1
 80085fc:	3608      	adds	r6, #8
 80085fe:	e7e5      	b.n	80085cc <_dtoa_r+0x36c>
 8008600:	f000 809b 	beq.w	800873a <_dtoa_r+0x4da>
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	4f9d      	ldr	r7, [pc, #628]	; (800887c <_dtoa_r+0x61c>)
 8008608:	425e      	negs	r6, r3
 800860a:	4b9b      	ldr	r3, [pc, #620]	; (8008878 <_dtoa_r+0x618>)
 800860c:	f006 020f 	and.w	r2, r6, #15
 8008610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	ec51 0b19 	vmov	r0, r1, d9
 800861c:	f7f7 fff4 	bl	8000608 <__aeabi_dmul>
 8008620:	1136      	asrs	r6, r6, #4
 8008622:	4682      	mov	sl, r0
 8008624:	468b      	mov	fp, r1
 8008626:	2300      	movs	r3, #0
 8008628:	2502      	movs	r5, #2
 800862a:	2e00      	cmp	r6, #0
 800862c:	d17a      	bne.n	8008724 <_dtoa_r+0x4c4>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1d3      	bne.n	80085da <_dtoa_r+0x37a>
 8008632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8082 	beq.w	800873e <_dtoa_r+0x4de>
 800863a:	4b91      	ldr	r3, [pc, #580]	; (8008880 <_dtoa_r+0x620>)
 800863c:	2200      	movs	r2, #0
 800863e:	4650      	mov	r0, sl
 8008640:	4659      	mov	r1, fp
 8008642:	f7f8 fa53 	bl	8000aec <__aeabi_dcmplt>
 8008646:	2800      	cmp	r0, #0
 8008648:	d079      	beq.n	800873e <_dtoa_r+0x4de>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d076      	beq.n	800873e <_dtoa_r+0x4de>
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	dd36      	ble.n	80086c4 <_dtoa_r+0x464>
 8008656:	9b00      	ldr	r3, [sp, #0]
 8008658:	4650      	mov	r0, sl
 800865a:	4659      	mov	r1, fp
 800865c:	1e5f      	subs	r7, r3, #1
 800865e:	2200      	movs	r2, #0
 8008660:	4b88      	ldr	r3, [pc, #544]	; (8008884 <_dtoa_r+0x624>)
 8008662:	f7f7 ffd1 	bl	8000608 <__aeabi_dmul>
 8008666:	9e02      	ldr	r6, [sp, #8]
 8008668:	4682      	mov	sl, r0
 800866a:	468b      	mov	fp, r1
 800866c:	3501      	adds	r5, #1
 800866e:	4628      	mov	r0, r5
 8008670:	f7f7 ff60 	bl	8000534 <__aeabi_i2d>
 8008674:	4652      	mov	r2, sl
 8008676:	465b      	mov	r3, fp
 8008678:	f7f7 ffc6 	bl	8000608 <__aeabi_dmul>
 800867c:	4b82      	ldr	r3, [pc, #520]	; (8008888 <_dtoa_r+0x628>)
 800867e:	2200      	movs	r2, #0
 8008680:	f7f7 fe0c 	bl	800029c <__adddf3>
 8008684:	46d0      	mov	r8, sl
 8008686:	46d9      	mov	r9, fp
 8008688:	4682      	mov	sl, r0
 800868a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800868e:	2e00      	cmp	r6, #0
 8008690:	d158      	bne.n	8008744 <_dtoa_r+0x4e4>
 8008692:	4b7e      	ldr	r3, [pc, #504]	; (800888c <_dtoa_r+0x62c>)
 8008694:	2200      	movs	r2, #0
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f7f7 fdfd 	bl	8000298 <__aeabi_dsub>
 800869e:	4652      	mov	r2, sl
 80086a0:	465b      	mov	r3, fp
 80086a2:	4680      	mov	r8, r0
 80086a4:	4689      	mov	r9, r1
 80086a6:	f7f8 fa3f 	bl	8000b28 <__aeabi_dcmpgt>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	f040 8295 	bne.w	8008bda <_dtoa_r+0x97a>
 80086b0:	4652      	mov	r2, sl
 80086b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f8 fa17 	bl	8000aec <__aeabi_dcmplt>
 80086be:	2800      	cmp	r0, #0
 80086c0:	f040 8289 	bne.w	8008bd6 <_dtoa_r+0x976>
 80086c4:	ec5b ab19 	vmov	sl, fp, d9
 80086c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f2c0 8148 	blt.w	8008960 <_dtoa_r+0x700>
 80086d0:	9a00      	ldr	r2, [sp, #0]
 80086d2:	2a0e      	cmp	r2, #14
 80086d4:	f300 8144 	bgt.w	8008960 <_dtoa_r+0x700>
 80086d8:	4b67      	ldr	r3, [pc, #412]	; (8008878 <_dtoa_r+0x618>)
 80086da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f280 80d5 	bge.w	8008894 <_dtoa_r+0x634>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f300 80d1 	bgt.w	8008894 <_dtoa_r+0x634>
 80086f2:	f040 826f 	bne.w	8008bd4 <_dtoa_r+0x974>
 80086f6:	4b65      	ldr	r3, [pc, #404]	; (800888c <_dtoa_r+0x62c>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	4640      	mov	r0, r8
 80086fc:	4649      	mov	r1, r9
 80086fe:	f7f7 ff83 	bl	8000608 <__aeabi_dmul>
 8008702:	4652      	mov	r2, sl
 8008704:	465b      	mov	r3, fp
 8008706:	f7f8 fa05 	bl	8000b14 <__aeabi_dcmpge>
 800870a:	9e03      	ldr	r6, [sp, #12]
 800870c:	4637      	mov	r7, r6
 800870e:	2800      	cmp	r0, #0
 8008710:	f040 8245 	bne.w	8008b9e <_dtoa_r+0x93e>
 8008714:	9d01      	ldr	r5, [sp, #4]
 8008716:	2331      	movs	r3, #49	; 0x31
 8008718:	f805 3b01 	strb.w	r3, [r5], #1
 800871c:	9b00      	ldr	r3, [sp, #0]
 800871e:	3301      	adds	r3, #1
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	e240      	b.n	8008ba6 <_dtoa_r+0x946>
 8008724:	07f2      	lsls	r2, r6, #31
 8008726:	d505      	bpl.n	8008734 <_dtoa_r+0x4d4>
 8008728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872c:	f7f7 ff6c 	bl	8000608 <__aeabi_dmul>
 8008730:	3501      	adds	r5, #1
 8008732:	2301      	movs	r3, #1
 8008734:	1076      	asrs	r6, r6, #1
 8008736:	3708      	adds	r7, #8
 8008738:	e777      	b.n	800862a <_dtoa_r+0x3ca>
 800873a:	2502      	movs	r5, #2
 800873c:	e779      	b.n	8008632 <_dtoa_r+0x3d2>
 800873e:	9f00      	ldr	r7, [sp, #0]
 8008740:	9e03      	ldr	r6, [sp, #12]
 8008742:	e794      	b.n	800866e <_dtoa_r+0x40e>
 8008744:	9901      	ldr	r1, [sp, #4]
 8008746:	4b4c      	ldr	r3, [pc, #304]	; (8008878 <_dtoa_r+0x618>)
 8008748:	4431      	add	r1, r6
 800874a:	910d      	str	r1, [sp, #52]	; 0x34
 800874c:	9908      	ldr	r1, [sp, #32]
 800874e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008756:	2900      	cmp	r1, #0
 8008758:	d043      	beq.n	80087e2 <_dtoa_r+0x582>
 800875a:	494d      	ldr	r1, [pc, #308]	; (8008890 <_dtoa_r+0x630>)
 800875c:	2000      	movs	r0, #0
 800875e:	f7f8 f87d 	bl	800085c <__aeabi_ddiv>
 8008762:	4652      	mov	r2, sl
 8008764:	465b      	mov	r3, fp
 8008766:	f7f7 fd97 	bl	8000298 <__aeabi_dsub>
 800876a:	9d01      	ldr	r5, [sp, #4]
 800876c:	4682      	mov	sl, r0
 800876e:	468b      	mov	fp, r1
 8008770:	4649      	mov	r1, r9
 8008772:	4640      	mov	r0, r8
 8008774:	f7f8 f9f8 	bl	8000b68 <__aeabi_d2iz>
 8008778:	4606      	mov	r6, r0
 800877a:	f7f7 fedb 	bl	8000534 <__aeabi_i2d>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4640      	mov	r0, r8
 8008784:	4649      	mov	r1, r9
 8008786:	f7f7 fd87 	bl	8000298 <__aeabi_dsub>
 800878a:	3630      	adds	r6, #48	; 0x30
 800878c:	f805 6b01 	strb.w	r6, [r5], #1
 8008790:	4652      	mov	r2, sl
 8008792:	465b      	mov	r3, fp
 8008794:	4680      	mov	r8, r0
 8008796:	4689      	mov	r9, r1
 8008798:	f7f8 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800879c:	2800      	cmp	r0, #0
 800879e:	d163      	bne.n	8008868 <_dtoa_r+0x608>
 80087a0:	4642      	mov	r2, r8
 80087a2:	464b      	mov	r3, r9
 80087a4:	4936      	ldr	r1, [pc, #216]	; (8008880 <_dtoa_r+0x620>)
 80087a6:	2000      	movs	r0, #0
 80087a8:	f7f7 fd76 	bl	8000298 <__aeabi_dsub>
 80087ac:	4652      	mov	r2, sl
 80087ae:	465b      	mov	r3, fp
 80087b0:	f7f8 f99c 	bl	8000aec <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f040 80b5 	bne.w	8008924 <_dtoa_r+0x6c4>
 80087ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087bc:	429d      	cmp	r5, r3
 80087be:	d081      	beq.n	80086c4 <_dtoa_r+0x464>
 80087c0:	4b30      	ldr	r3, [pc, #192]	; (8008884 <_dtoa_r+0x624>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	4650      	mov	r0, sl
 80087c6:	4659      	mov	r1, fp
 80087c8:	f7f7 ff1e 	bl	8000608 <__aeabi_dmul>
 80087cc:	4b2d      	ldr	r3, [pc, #180]	; (8008884 <_dtoa_r+0x624>)
 80087ce:	4682      	mov	sl, r0
 80087d0:	468b      	mov	fp, r1
 80087d2:	4640      	mov	r0, r8
 80087d4:	4649      	mov	r1, r9
 80087d6:	2200      	movs	r2, #0
 80087d8:	f7f7 ff16 	bl	8000608 <__aeabi_dmul>
 80087dc:	4680      	mov	r8, r0
 80087de:	4689      	mov	r9, r1
 80087e0:	e7c6      	b.n	8008770 <_dtoa_r+0x510>
 80087e2:	4650      	mov	r0, sl
 80087e4:	4659      	mov	r1, fp
 80087e6:	f7f7 ff0f 	bl	8000608 <__aeabi_dmul>
 80087ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ec:	9d01      	ldr	r5, [sp, #4]
 80087ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80087f0:	4682      	mov	sl, r0
 80087f2:	468b      	mov	fp, r1
 80087f4:	4649      	mov	r1, r9
 80087f6:	4640      	mov	r0, r8
 80087f8:	f7f8 f9b6 	bl	8000b68 <__aeabi_d2iz>
 80087fc:	4606      	mov	r6, r0
 80087fe:	f7f7 fe99 	bl	8000534 <__aeabi_i2d>
 8008802:	3630      	adds	r6, #48	; 0x30
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4640      	mov	r0, r8
 800880a:	4649      	mov	r1, r9
 800880c:	f7f7 fd44 	bl	8000298 <__aeabi_dsub>
 8008810:	f805 6b01 	strb.w	r6, [r5], #1
 8008814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008816:	429d      	cmp	r5, r3
 8008818:	4680      	mov	r8, r0
 800881a:	4689      	mov	r9, r1
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	d124      	bne.n	800886c <_dtoa_r+0x60c>
 8008822:	4b1b      	ldr	r3, [pc, #108]	; (8008890 <_dtoa_r+0x630>)
 8008824:	4650      	mov	r0, sl
 8008826:	4659      	mov	r1, fp
 8008828:	f7f7 fd38 	bl	800029c <__adddf3>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	f7f8 f978 	bl	8000b28 <__aeabi_dcmpgt>
 8008838:	2800      	cmp	r0, #0
 800883a:	d173      	bne.n	8008924 <_dtoa_r+0x6c4>
 800883c:	4652      	mov	r2, sl
 800883e:	465b      	mov	r3, fp
 8008840:	4913      	ldr	r1, [pc, #76]	; (8008890 <_dtoa_r+0x630>)
 8008842:	2000      	movs	r0, #0
 8008844:	f7f7 fd28 	bl	8000298 <__aeabi_dsub>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4640      	mov	r0, r8
 800884e:	4649      	mov	r1, r9
 8008850:	f7f8 f94c 	bl	8000aec <__aeabi_dcmplt>
 8008854:	2800      	cmp	r0, #0
 8008856:	f43f af35 	beq.w	80086c4 <_dtoa_r+0x464>
 800885a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800885c:	1e6b      	subs	r3, r5, #1
 800885e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008864:	2b30      	cmp	r3, #48	; 0x30
 8008866:	d0f8      	beq.n	800885a <_dtoa_r+0x5fa>
 8008868:	9700      	str	r7, [sp, #0]
 800886a:	e049      	b.n	8008900 <_dtoa_r+0x6a0>
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <_dtoa_r+0x624>)
 800886e:	f7f7 fecb 	bl	8000608 <__aeabi_dmul>
 8008872:	4680      	mov	r8, r0
 8008874:	4689      	mov	r9, r1
 8008876:	e7bd      	b.n	80087f4 <_dtoa_r+0x594>
 8008878:	0800a428 	.word	0x0800a428
 800887c:	0800a400 	.word	0x0800a400
 8008880:	3ff00000 	.word	0x3ff00000
 8008884:	40240000 	.word	0x40240000
 8008888:	401c0000 	.word	0x401c0000
 800888c:	40140000 	.word	0x40140000
 8008890:	3fe00000 	.word	0x3fe00000
 8008894:	9d01      	ldr	r5, [sp, #4]
 8008896:	4656      	mov	r6, sl
 8008898:	465f      	mov	r7, fp
 800889a:	4642      	mov	r2, r8
 800889c:	464b      	mov	r3, r9
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 ffdb 	bl	800085c <__aeabi_ddiv>
 80088a6:	f7f8 f95f 	bl	8000b68 <__aeabi_d2iz>
 80088aa:	4682      	mov	sl, r0
 80088ac:	f7f7 fe42 	bl	8000534 <__aeabi_i2d>
 80088b0:	4642      	mov	r2, r8
 80088b2:	464b      	mov	r3, r9
 80088b4:	f7f7 fea8 	bl	8000608 <__aeabi_dmul>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80088c4:	f7f7 fce8 	bl	8000298 <__aeabi_dsub>
 80088c8:	f805 6b01 	strb.w	r6, [r5], #1
 80088cc:	9e01      	ldr	r6, [sp, #4]
 80088ce:	9f03      	ldr	r7, [sp, #12]
 80088d0:	1bae      	subs	r6, r5, r6
 80088d2:	42b7      	cmp	r7, r6
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	d135      	bne.n	8008946 <_dtoa_r+0x6e6>
 80088da:	f7f7 fcdf 	bl	800029c <__adddf3>
 80088de:	4642      	mov	r2, r8
 80088e0:	464b      	mov	r3, r9
 80088e2:	4606      	mov	r6, r0
 80088e4:	460f      	mov	r7, r1
 80088e6:	f7f8 f91f 	bl	8000b28 <__aeabi_dcmpgt>
 80088ea:	b9d0      	cbnz	r0, 8008922 <_dtoa_r+0x6c2>
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	4630      	mov	r0, r6
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f8 f8f0 	bl	8000ad8 <__aeabi_dcmpeq>
 80088f8:	b110      	cbz	r0, 8008900 <_dtoa_r+0x6a0>
 80088fa:	f01a 0f01 	tst.w	sl, #1
 80088fe:	d110      	bne.n	8008922 <_dtoa_r+0x6c2>
 8008900:	4620      	mov	r0, r4
 8008902:	ee18 1a10 	vmov	r1, s16
 8008906:	f000 faf3 	bl	8008ef0 <_Bfree>
 800890a:	2300      	movs	r3, #0
 800890c:	9800      	ldr	r0, [sp, #0]
 800890e:	702b      	strb	r3, [r5, #0]
 8008910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008912:	3001      	adds	r0, #1
 8008914:	6018      	str	r0, [r3, #0]
 8008916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008918:	2b00      	cmp	r3, #0
 800891a:	f43f acf1 	beq.w	8008300 <_dtoa_r+0xa0>
 800891e:	601d      	str	r5, [r3, #0]
 8008920:	e4ee      	b.n	8008300 <_dtoa_r+0xa0>
 8008922:	9f00      	ldr	r7, [sp, #0]
 8008924:	462b      	mov	r3, r5
 8008926:	461d      	mov	r5, r3
 8008928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800892c:	2a39      	cmp	r2, #57	; 0x39
 800892e:	d106      	bne.n	800893e <_dtoa_r+0x6de>
 8008930:	9a01      	ldr	r2, [sp, #4]
 8008932:	429a      	cmp	r2, r3
 8008934:	d1f7      	bne.n	8008926 <_dtoa_r+0x6c6>
 8008936:	9901      	ldr	r1, [sp, #4]
 8008938:	2230      	movs	r2, #48	; 0x30
 800893a:	3701      	adds	r7, #1
 800893c:	700a      	strb	r2, [r1, #0]
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	3201      	adds	r2, #1
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	e790      	b.n	8008868 <_dtoa_r+0x608>
 8008946:	4ba6      	ldr	r3, [pc, #664]	; (8008be0 <_dtoa_r+0x980>)
 8008948:	2200      	movs	r2, #0
 800894a:	f7f7 fe5d 	bl	8000608 <__aeabi_dmul>
 800894e:	2200      	movs	r2, #0
 8008950:	2300      	movs	r3, #0
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	f7f8 f8bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800895a:	2800      	cmp	r0, #0
 800895c:	d09d      	beq.n	800889a <_dtoa_r+0x63a>
 800895e:	e7cf      	b.n	8008900 <_dtoa_r+0x6a0>
 8008960:	9a08      	ldr	r2, [sp, #32]
 8008962:	2a00      	cmp	r2, #0
 8008964:	f000 80d7 	beq.w	8008b16 <_dtoa_r+0x8b6>
 8008968:	9a06      	ldr	r2, [sp, #24]
 800896a:	2a01      	cmp	r2, #1
 800896c:	f300 80ba 	bgt.w	8008ae4 <_dtoa_r+0x884>
 8008970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008972:	2a00      	cmp	r2, #0
 8008974:	f000 80b2 	beq.w	8008adc <_dtoa_r+0x87c>
 8008978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800897c:	9e07      	ldr	r6, [sp, #28]
 800897e:	9d04      	ldr	r5, [sp, #16]
 8008980:	9a04      	ldr	r2, [sp, #16]
 8008982:	441a      	add	r2, r3
 8008984:	9204      	str	r2, [sp, #16]
 8008986:	9a05      	ldr	r2, [sp, #20]
 8008988:	2101      	movs	r1, #1
 800898a:	441a      	add	r2, r3
 800898c:	4620      	mov	r0, r4
 800898e:	9205      	str	r2, [sp, #20]
 8008990:	f000 fb66 	bl	8009060 <__i2b>
 8008994:	4607      	mov	r7, r0
 8008996:	2d00      	cmp	r5, #0
 8008998:	dd0c      	ble.n	80089b4 <_dtoa_r+0x754>
 800899a:	9b05      	ldr	r3, [sp, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	dd09      	ble.n	80089b4 <_dtoa_r+0x754>
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	9a04      	ldr	r2, [sp, #16]
 80089a4:	bfa8      	it	ge
 80089a6:	462b      	movge	r3, r5
 80089a8:	1ad2      	subs	r2, r2, r3
 80089aa:	9204      	str	r2, [sp, #16]
 80089ac:	9a05      	ldr	r2, [sp, #20]
 80089ae:	1aed      	subs	r5, r5, r3
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	9305      	str	r3, [sp, #20]
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	b31b      	cbz	r3, 8008a00 <_dtoa_r+0x7a0>
 80089b8:	9b08      	ldr	r3, [sp, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 80af 	beq.w	8008b1e <_dtoa_r+0x8be>
 80089c0:	2e00      	cmp	r6, #0
 80089c2:	dd13      	ble.n	80089ec <_dtoa_r+0x78c>
 80089c4:	4639      	mov	r1, r7
 80089c6:	4632      	mov	r2, r6
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fc09 	bl	80091e0 <__pow5mult>
 80089ce:	ee18 2a10 	vmov	r2, s16
 80089d2:	4601      	mov	r1, r0
 80089d4:	4607      	mov	r7, r0
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 fb58 	bl	800908c <__multiply>
 80089dc:	ee18 1a10 	vmov	r1, s16
 80089e0:	4680      	mov	r8, r0
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fa84 	bl	8008ef0 <_Bfree>
 80089e8:	ee08 8a10 	vmov	s16, r8
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	1b9a      	subs	r2, r3, r6
 80089f0:	d006      	beq.n	8008a00 <_dtoa_r+0x7a0>
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 fbf2 	bl	80091e0 <__pow5mult>
 80089fc:	ee08 0a10 	vmov	s16, r0
 8008a00:	2101      	movs	r1, #1
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 fb2c 	bl	8009060 <__i2b>
 8008a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	f340 8088 	ble.w	8008b22 <_dtoa_r+0x8c2>
 8008a12:	461a      	mov	r2, r3
 8008a14:	4601      	mov	r1, r0
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 fbe2 	bl	80091e0 <__pow5mult>
 8008a1c:	9b06      	ldr	r3, [sp, #24]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	4606      	mov	r6, r0
 8008a22:	f340 8081 	ble.w	8008b28 <_dtoa_r+0x8c8>
 8008a26:	f04f 0800 	mov.w	r8, #0
 8008a2a:	6933      	ldr	r3, [r6, #16]
 8008a2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a30:	6918      	ldr	r0, [r3, #16]
 8008a32:	f000 fac5 	bl	8008fc0 <__hi0bits>
 8008a36:	f1c0 0020 	rsb	r0, r0, #32
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	4418      	add	r0, r3
 8008a3e:	f010 001f 	ands.w	r0, r0, #31
 8008a42:	f000 8092 	beq.w	8008b6a <_dtoa_r+0x90a>
 8008a46:	f1c0 0320 	rsb	r3, r0, #32
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	f340 808a 	ble.w	8008b64 <_dtoa_r+0x904>
 8008a50:	f1c0 001c 	rsb	r0, r0, #28
 8008a54:	9b04      	ldr	r3, [sp, #16]
 8008a56:	4403      	add	r3, r0
 8008a58:	9304      	str	r3, [sp, #16]
 8008a5a:	9b05      	ldr	r3, [sp, #20]
 8008a5c:	4403      	add	r3, r0
 8008a5e:	4405      	add	r5, r0
 8008a60:	9305      	str	r3, [sp, #20]
 8008a62:	9b04      	ldr	r3, [sp, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dd07      	ble.n	8008a78 <_dtoa_r+0x818>
 8008a68:	ee18 1a10 	vmov	r1, s16
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 fc10 	bl	8009294 <__lshift>
 8008a74:	ee08 0a10 	vmov	s16, r0
 8008a78:	9b05      	ldr	r3, [sp, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dd05      	ble.n	8008a8a <_dtoa_r+0x82a>
 8008a7e:	4631      	mov	r1, r6
 8008a80:	461a      	mov	r2, r3
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fc06 	bl	8009294 <__lshift>
 8008a88:	4606      	mov	r6, r0
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d06e      	beq.n	8008b6e <_dtoa_r+0x90e>
 8008a90:	ee18 0a10 	vmov	r0, s16
 8008a94:	4631      	mov	r1, r6
 8008a96:	f000 fc6d 	bl	8009374 <__mcmp>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	da67      	bge.n	8008b6e <_dtoa_r+0x90e>
 8008a9e:	9b00      	ldr	r3, [sp, #0]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	ee18 1a10 	vmov	r1, s16
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	220a      	movs	r2, #10
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 fa41 	bl	8008f34 <__multadd>
 8008ab2:	9b08      	ldr	r3, [sp, #32]
 8008ab4:	ee08 0a10 	vmov	s16, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 81b1 	beq.w	8008e20 <_dtoa_r+0xbc0>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 fa35 	bl	8008f34 <__multadd>
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	4607      	mov	r7, r0
 8008ad0:	f300 808e 	bgt.w	8008bf0 <_dtoa_r+0x990>
 8008ad4:	9b06      	ldr	r3, [sp, #24]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	dc51      	bgt.n	8008b7e <_dtoa_r+0x91e>
 8008ada:	e089      	b.n	8008bf0 <_dtoa_r+0x990>
 8008adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ae2:	e74b      	b.n	800897c <_dtoa_r+0x71c>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	1e5e      	subs	r6, r3, #1
 8008ae8:	9b07      	ldr	r3, [sp, #28]
 8008aea:	42b3      	cmp	r3, r6
 8008aec:	bfbf      	itttt	lt
 8008aee:	9b07      	ldrlt	r3, [sp, #28]
 8008af0:	9607      	strlt	r6, [sp, #28]
 8008af2:	1af2      	sublt	r2, r6, r3
 8008af4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008af6:	bfb6      	itet	lt
 8008af8:	189b      	addlt	r3, r3, r2
 8008afa:	1b9e      	subge	r6, r3, r6
 8008afc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008afe:	9b03      	ldr	r3, [sp, #12]
 8008b00:	bfb8      	it	lt
 8008b02:	2600      	movlt	r6, #0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bfb7      	itett	lt
 8008b08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b10:	1a9d      	sublt	r5, r3, r2
 8008b12:	2300      	movlt	r3, #0
 8008b14:	e734      	b.n	8008980 <_dtoa_r+0x720>
 8008b16:	9e07      	ldr	r6, [sp, #28]
 8008b18:	9d04      	ldr	r5, [sp, #16]
 8008b1a:	9f08      	ldr	r7, [sp, #32]
 8008b1c:	e73b      	b.n	8008996 <_dtoa_r+0x736>
 8008b1e:	9a07      	ldr	r2, [sp, #28]
 8008b20:	e767      	b.n	80089f2 <_dtoa_r+0x792>
 8008b22:	9b06      	ldr	r3, [sp, #24]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	dc18      	bgt.n	8008b5a <_dtoa_r+0x8fa>
 8008b28:	f1ba 0f00 	cmp.w	sl, #0
 8008b2c:	d115      	bne.n	8008b5a <_dtoa_r+0x8fa>
 8008b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b32:	b993      	cbnz	r3, 8008b5a <_dtoa_r+0x8fa>
 8008b34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b38:	0d1b      	lsrs	r3, r3, #20
 8008b3a:	051b      	lsls	r3, r3, #20
 8008b3c:	b183      	cbz	r3, 8008b60 <_dtoa_r+0x900>
 8008b3e:	9b04      	ldr	r3, [sp, #16]
 8008b40:	3301      	adds	r3, #1
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	9b05      	ldr	r3, [sp, #20]
 8008b46:	3301      	adds	r3, #1
 8008b48:	9305      	str	r3, [sp, #20]
 8008b4a:	f04f 0801 	mov.w	r8, #1
 8008b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f47f af6a 	bne.w	8008a2a <_dtoa_r+0x7ca>
 8008b56:	2001      	movs	r0, #1
 8008b58:	e76f      	b.n	8008a3a <_dtoa_r+0x7da>
 8008b5a:	f04f 0800 	mov.w	r8, #0
 8008b5e:	e7f6      	b.n	8008b4e <_dtoa_r+0x8ee>
 8008b60:	4698      	mov	r8, r3
 8008b62:	e7f4      	b.n	8008b4e <_dtoa_r+0x8ee>
 8008b64:	f43f af7d 	beq.w	8008a62 <_dtoa_r+0x802>
 8008b68:	4618      	mov	r0, r3
 8008b6a:	301c      	adds	r0, #28
 8008b6c:	e772      	b.n	8008a54 <_dtoa_r+0x7f4>
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dc37      	bgt.n	8008be4 <_dtoa_r+0x984>
 8008b74:	9b06      	ldr	r3, [sp, #24]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	dd34      	ble.n	8008be4 <_dtoa_r+0x984>
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	9302      	str	r3, [sp, #8]
 8008b7e:	9b02      	ldr	r3, [sp, #8]
 8008b80:	b96b      	cbnz	r3, 8008b9e <_dtoa_r+0x93e>
 8008b82:	4631      	mov	r1, r6
 8008b84:	2205      	movs	r2, #5
 8008b86:	4620      	mov	r0, r4
 8008b88:	f000 f9d4 	bl	8008f34 <__multadd>
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	4606      	mov	r6, r0
 8008b90:	ee18 0a10 	vmov	r0, s16
 8008b94:	f000 fbee 	bl	8009374 <__mcmp>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	f73f adbb 	bgt.w	8008714 <_dtoa_r+0x4b4>
 8008b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba0:	9d01      	ldr	r5, [sp, #4]
 8008ba2:	43db      	mvns	r3, r3
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	4631      	mov	r1, r6
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 f99f 	bl	8008ef0 <_Bfree>
 8008bb2:	2f00      	cmp	r7, #0
 8008bb4:	f43f aea4 	beq.w	8008900 <_dtoa_r+0x6a0>
 8008bb8:	f1b8 0f00 	cmp.w	r8, #0
 8008bbc:	d005      	beq.n	8008bca <_dtoa_r+0x96a>
 8008bbe:	45b8      	cmp	r8, r7
 8008bc0:	d003      	beq.n	8008bca <_dtoa_r+0x96a>
 8008bc2:	4641      	mov	r1, r8
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 f993 	bl	8008ef0 <_Bfree>
 8008bca:	4639      	mov	r1, r7
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 f98f 	bl	8008ef0 <_Bfree>
 8008bd2:	e695      	b.n	8008900 <_dtoa_r+0x6a0>
 8008bd4:	2600      	movs	r6, #0
 8008bd6:	4637      	mov	r7, r6
 8008bd8:	e7e1      	b.n	8008b9e <_dtoa_r+0x93e>
 8008bda:	9700      	str	r7, [sp, #0]
 8008bdc:	4637      	mov	r7, r6
 8008bde:	e599      	b.n	8008714 <_dtoa_r+0x4b4>
 8008be0:	40240000 	.word	0x40240000
 8008be4:	9b08      	ldr	r3, [sp, #32]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 80ca 	beq.w	8008d80 <_dtoa_r+0xb20>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	dd05      	ble.n	8008c00 <_dtoa_r+0x9a0>
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	462a      	mov	r2, r5
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fb4b 	bl	8009294 <__lshift>
 8008bfe:	4607      	mov	r7, r0
 8008c00:	f1b8 0f00 	cmp.w	r8, #0
 8008c04:	d05b      	beq.n	8008cbe <_dtoa_r+0xa5e>
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 f931 	bl	8008e70 <_Balloc>
 8008c0e:	4605      	mov	r5, r0
 8008c10:	b928      	cbnz	r0, 8008c1e <_dtoa_r+0x9be>
 8008c12:	4b87      	ldr	r3, [pc, #540]	; (8008e30 <_dtoa_r+0xbd0>)
 8008c14:	4602      	mov	r2, r0
 8008c16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c1a:	f7ff bb3b 	b.w	8008294 <_dtoa_r+0x34>
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	3202      	adds	r2, #2
 8008c22:	0092      	lsls	r2, r2, #2
 8008c24:	f107 010c 	add.w	r1, r7, #12
 8008c28:	300c      	adds	r0, #12
 8008c2a:	f000 f913 	bl	8008e54 <memcpy>
 8008c2e:	2201      	movs	r2, #1
 8008c30:	4629      	mov	r1, r5
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 fb2e 	bl	8009294 <__lshift>
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	f103 0901 	add.w	r9, r3, #1
 8008c3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008c42:	4413      	add	r3, r2
 8008c44:	9305      	str	r3, [sp, #20]
 8008c46:	f00a 0301 	and.w	r3, sl, #1
 8008c4a:	46b8      	mov	r8, r7
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	4607      	mov	r7, r0
 8008c50:	4631      	mov	r1, r6
 8008c52:	ee18 0a10 	vmov	r0, s16
 8008c56:	f7ff fa75 	bl	8008144 <quorem>
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	9002      	str	r0, [sp, #8]
 8008c5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c62:	ee18 0a10 	vmov	r0, s16
 8008c66:	f000 fb85 	bl	8009374 <__mcmp>
 8008c6a:	463a      	mov	r2, r7
 8008c6c:	9003      	str	r0, [sp, #12]
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fb9b 	bl	80093ac <__mdiff>
 8008c76:	68c2      	ldr	r2, [r0, #12]
 8008c78:	f109 3bff 	add.w	fp, r9, #4294967295
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	bb02      	cbnz	r2, 8008cc2 <_dtoa_r+0xa62>
 8008c80:	4601      	mov	r1, r0
 8008c82:	ee18 0a10 	vmov	r0, s16
 8008c86:	f000 fb75 	bl	8009374 <__mcmp>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	4620      	mov	r0, r4
 8008c90:	9207      	str	r2, [sp, #28]
 8008c92:	f000 f92d 	bl	8008ef0 <_Bfree>
 8008c96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c9a:	ea43 0102 	orr.w	r1, r3, r2
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	464d      	mov	r5, r9
 8008ca4:	d10f      	bne.n	8008cc6 <_dtoa_r+0xa66>
 8008ca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008caa:	d02a      	beq.n	8008d02 <_dtoa_r+0xaa2>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	dd02      	ble.n	8008cb8 <_dtoa_r+0xa58>
 8008cb2:	9b02      	ldr	r3, [sp, #8]
 8008cb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008cb8:	f88b a000 	strb.w	sl, [fp]
 8008cbc:	e775      	b.n	8008baa <_dtoa_r+0x94a>
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	e7ba      	b.n	8008c38 <_dtoa_r+0x9d8>
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	e7e2      	b.n	8008c8c <_dtoa_r+0xa2c>
 8008cc6:	9b03      	ldr	r3, [sp, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	db04      	blt.n	8008cd6 <_dtoa_r+0xa76>
 8008ccc:	9906      	ldr	r1, [sp, #24]
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	9904      	ldr	r1, [sp, #16]
 8008cd2:	430b      	orrs	r3, r1
 8008cd4:	d122      	bne.n	8008d1c <_dtoa_r+0xabc>
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	ddee      	ble.n	8008cb8 <_dtoa_r+0xa58>
 8008cda:	ee18 1a10 	vmov	r1, s16
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 fad7 	bl	8009294 <__lshift>
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	ee08 0a10 	vmov	s16, r0
 8008cec:	f000 fb42 	bl	8009374 <__mcmp>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	dc03      	bgt.n	8008cfc <_dtoa_r+0xa9c>
 8008cf4:	d1e0      	bne.n	8008cb8 <_dtoa_r+0xa58>
 8008cf6:	f01a 0f01 	tst.w	sl, #1
 8008cfa:	d0dd      	beq.n	8008cb8 <_dtoa_r+0xa58>
 8008cfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d00:	d1d7      	bne.n	8008cb2 <_dtoa_r+0xa52>
 8008d02:	2339      	movs	r3, #57	; 0x39
 8008d04:	f88b 3000 	strb.w	r3, [fp]
 8008d08:	462b      	mov	r3, r5
 8008d0a:	461d      	mov	r5, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d12:	2a39      	cmp	r2, #57	; 0x39
 8008d14:	d071      	beq.n	8008dfa <_dtoa_r+0xb9a>
 8008d16:	3201      	adds	r2, #1
 8008d18:	701a      	strb	r2, [r3, #0]
 8008d1a:	e746      	b.n	8008baa <_dtoa_r+0x94a>
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	dd07      	ble.n	8008d30 <_dtoa_r+0xad0>
 8008d20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d24:	d0ed      	beq.n	8008d02 <_dtoa_r+0xaa2>
 8008d26:	f10a 0301 	add.w	r3, sl, #1
 8008d2a:	f88b 3000 	strb.w	r3, [fp]
 8008d2e:	e73c      	b.n	8008baa <_dtoa_r+0x94a>
 8008d30:	9b05      	ldr	r3, [sp, #20]
 8008d32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d36:	4599      	cmp	r9, r3
 8008d38:	d047      	beq.n	8008dca <_dtoa_r+0xb6a>
 8008d3a:	ee18 1a10 	vmov	r1, s16
 8008d3e:	2300      	movs	r3, #0
 8008d40:	220a      	movs	r2, #10
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 f8f6 	bl	8008f34 <__multadd>
 8008d48:	45b8      	cmp	r8, r7
 8008d4a:	ee08 0a10 	vmov	s16, r0
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	f04f 020a 	mov.w	r2, #10
 8008d56:	4641      	mov	r1, r8
 8008d58:	4620      	mov	r0, r4
 8008d5a:	d106      	bne.n	8008d6a <_dtoa_r+0xb0a>
 8008d5c:	f000 f8ea 	bl	8008f34 <__multadd>
 8008d60:	4680      	mov	r8, r0
 8008d62:	4607      	mov	r7, r0
 8008d64:	f109 0901 	add.w	r9, r9, #1
 8008d68:	e772      	b.n	8008c50 <_dtoa_r+0x9f0>
 8008d6a:	f000 f8e3 	bl	8008f34 <__multadd>
 8008d6e:	4639      	mov	r1, r7
 8008d70:	4680      	mov	r8, r0
 8008d72:	2300      	movs	r3, #0
 8008d74:	220a      	movs	r2, #10
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 f8dc 	bl	8008f34 <__multadd>
 8008d7c:	4607      	mov	r7, r0
 8008d7e:	e7f1      	b.n	8008d64 <_dtoa_r+0xb04>
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	9302      	str	r3, [sp, #8]
 8008d84:	9d01      	ldr	r5, [sp, #4]
 8008d86:	ee18 0a10 	vmov	r0, s16
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	f7ff f9da 	bl	8008144 <quorem>
 8008d90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d94:	9b01      	ldr	r3, [sp, #4]
 8008d96:	f805 ab01 	strb.w	sl, [r5], #1
 8008d9a:	1aea      	subs	r2, r5, r3
 8008d9c:	9b02      	ldr	r3, [sp, #8]
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	dd09      	ble.n	8008db6 <_dtoa_r+0xb56>
 8008da2:	ee18 1a10 	vmov	r1, s16
 8008da6:	2300      	movs	r3, #0
 8008da8:	220a      	movs	r2, #10
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f8c2 	bl	8008f34 <__multadd>
 8008db0:	ee08 0a10 	vmov	s16, r0
 8008db4:	e7e7      	b.n	8008d86 <_dtoa_r+0xb26>
 8008db6:	9b02      	ldr	r3, [sp, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bfc8      	it	gt
 8008dbc:	461d      	movgt	r5, r3
 8008dbe:	9b01      	ldr	r3, [sp, #4]
 8008dc0:	bfd8      	it	le
 8008dc2:	2501      	movle	r5, #1
 8008dc4:	441d      	add	r5, r3
 8008dc6:	f04f 0800 	mov.w	r8, #0
 8008dca:	ee18 1a10 	vmov	r1, s16
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 fa5f 	bl	8009294 <__lshift>
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	ee08 0a10 	vmov	s16, r0
 8008ddc:	f000 faca 	bl	8009374 <__mcmp>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	dc91      	bgt.n	8008d08 <_dtoa_r+0xaa8>
 8008de4:	d102      	bne.n	8008dec <_dtoa_r+0xb8c>
 8008de6:	f01a 0f01 	tst.w	sl, #1
 8008dea:	d18d      	bne.n	8008d08 <_dtoa_r+0xaa8>
 8008dec:	462b      	mov	r3, r5
 8008dee:	461d      	mov	r5, r3
 8008df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008df4:	2a30      	cmp	r2, #48	; 0x30
 8008df6:	d0fa      	beq.n	8008dee <_dtoa_r+0xb8e>
 8008df8:	e6d7      	b.n	8008baa <_dtoa_r+0x94a>
 8008dfa:	9a01      	ldr	r2, [sp, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d184      	bne.n	8008d0a <_dtoa_r+0xaaa>
 8008e00:	9b00      	ldr	r3, [sp, #0]
 8008e02:	3301      	adds	r3, #1
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	2331      	movs	r3, #49	; 0x31
 8008e08:	7013      	strb	r3, [r2, #0]
 8008e0a:	e6ce      	b.n	8008baa <_dtoa_r+0x94a>
 8008e0c:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <_dtoa_r+0xbd4>)
 8008e0e:	f7ff ba95 	b.w	800833c <_dtoa_r+0xdc>
 8008e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f47f aa6e 	bne.w	80082f6 <_dtoa_r+0x96>
 8008e1a:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <_dtoa_r+0xbd8>)
 8008e1c:	f7ff ba8e 	b.w	800833c <_dtoa_r+0xdc>
 8008e20:	9b02      	ldr	r3, [sp, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	dcae      	bgt.n	8008d84 <_dtoa_r+0xb24>
 8008e26:	9b06      	ldr	r3, [sp, #24]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	f73f aea8 	bgt.w	8008b7e <_dtoa_r+0x91e>
 8008e2e:	e7a9      	b.n	8008d84 <_dtoa_r+0xb24>
 8008e30:	0800a38f 	.word	0x0800a38f
 8008e34:	0800a2ec 	.word	0x0800a2ec
 8008e38:	0800a310 	.word	0x0800a310

08008e3c <_localeconv_r>:
 8008e3c:	4800      	ldr	r0, [pc, #0]	; (8008e40 <_localeconv_r+0x4>)
 8008e3e:	4770      	bx	lr
 8008e40:	20000160 	.word	0x20000160

08008e44 <malloc>:
 8008e44:	4b02      	ldr	r3, [pc, #8]	; (8008e50 <malloc+0xc>)
 8008e46:	4601      	mov	r1, r0
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f000 bc17 	b.w	800967c <_malloc_r>
 8008e4e:	bf00      	nop
 8008e50:	2000000c 	.word	0x2000000c

08008e54 <memcpy>:
 8008e54:	440a      	add	r2, r1
 8008e56:	4291      	cmp	r1, r2
 8008e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e5c:	d100      	bne.n	8008e60 <memcpy+0xc>
 8008e5e:	4770      	bx	lr
 8008e60:	b510      	push	{r4, lr}
 8008e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	d1f9      	bne.n	8008e62 <memcpy+0xe>
 8008e6e:	bd10      	pop	{r4, pc}

08008e70 <_Balloc>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e74:	4604      	mov	r4, r0
 8008e76:	460d      	mov	r5, r1
 8008e78:	b976      	cbnz	r6, 8008e98 <_Balloc+0x28>
 8008e7a:	2010      	movs	r0, #16
 8008e7c:	f7ff ffe2 	bl	8008e44 <malloc>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6260      	str	r0, [r4, #36]	; 0x24
 8008e84:	b920      	cbnz	r0, 8008e90 <_Balloc+0x20>
 8008e86:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <_Balloc+0x78>)
 8008e88:	4818      	ldr	r0, [pc, #96]	; (8008eec <_Balloc+0x7c>)
 8008e8a:	2166      	movs	r1, #102	; 0x66
 8008e8c:	f000 fc7a 	bl	8009784 <__assert_func>
 8008e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e94:	6006      	str	r6, [r0, #0]
 8008e96:	60c6      	str	r6, [r0, #12]
 8008e98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e9a:	68f3      	ldr	r3, [r6, #12]
 8008e9c:	b183      	cbz	r3, 8008ec0 <_Balloc+0x50>
 8008e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ea6:	b9b8      	cbnz	r0, 8008ed8 <_Balloc+0x68>
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8008eae:	1d72      	adds	r2, r6, #5
 8008eb0:	0092      	lsls	r2, r2, #2
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 fb60 	bl	8009578 <_calloc_r>
 8008eb8:	b160      	cbz	r0, 8008ed4 <_Balloc+0x64>
 8008eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ebe:	e00e      	b.n	8008ede <_Balloc+0x6e>
 8008ec0:	2221      	movs	r2, #33	; 0x21
 8008ec2:	2104      	movs	r1, #4
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 fb57 	bl	8009578 <_calloc_r>
 8008eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ecc:	60f0      	str	r0, [r6, #12]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e4      	bne.n	8008e9e <_Balloc+0x2e>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	6802      	ldr	r2, [r0, #0]
 8008eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ee4:	e7f7      	b.n	8008ed6 <_Balloc+0x66>
 8008ee6:	bf00      	nop
 8008ee8:	0800a31d 	.word	0x0800a31d
 8008eec:	0800a3a0 	.word	0x0800a3a0

08008ef0 <_Bfree>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ef4:	4605      	mov	r5, r0
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	b976      	cbnz	r6, 8008f18 <_Bfree+0x28>
 8008efa:	2010      	movs	r0, #16
 8008efc:	f7ff ffa2 	bl	8008e44 <malloc>
 8008f00:	4602      	mov	r2, r0
 8008f02:	6268      	str	r0, [r5, #36]	; 0x24
 8008f04:	b920      	cbnz	r0, 8008f10 <_Bfree+0x20>
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <_Bfree+0x3c>)
 8008f08:	4809      	ldr	r0, [pc, #36]	; (8008f30 <_Bfree+0x40>)
 8008f0a:	218a      	movs	r1, #138	; 0x8a
 8008f0c:	f000 fc3a 	bl	8009784 <__assert_func>
 8008f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f14:	6006      	str	r6, [r0, #0]
 8008f16:	60c6      	str	r6, [r0, #12]
 8008f18:	b13c      	cbz	r4, 8008f2a <_Bfree+0x3a>
 8008f1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f1c:	6862      	ldr	r2, [r4, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f24:	6021      	str	r1, [r4, #0]
 8008f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	0800a31d 	.word	0x0800a31d
 8008f30:	0800a3a0 	.word	0x0800a3a0

08008f34 <__multadd>:
 8008f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f38:	690d      	ldr	r5, [r1, #16]
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	461e      	mov	r6, r3
 8008f40:	f101 0c14 	add.w	ip, r1, #20
 8008f44:	2000      	movs	r0, #0
 8008f46:	f8dc 3000 	ldr.w	r3, [ip]
 8008f4a:	b299      	uxth	r1, r3
 8008f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8008f50:	0c1e      	lsrs	r6, r3, #16
 8008f52:	0c0b      	lsrs	r3, r1, #16
 8008f54:	fb02 3306 	mla	r3, r2, r6, r3
 8008f58:	b289      	uxth	r1, r1
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f60:	4285      	cmp	r5, r0
 8008f62:	f84c 1b04 	str.w	r1, [ip], #4
 8008f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f6a:	dcec      	bgt.n	8008f46 <__multadd+0x12>
 8008f6c:	b30e      	cbz	r6, 8008fb2 <__multadd+0x7e>
 8008f6e:	68a3      	ldr	r3, [r4, #8]
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	dc19      	bgt.n	8008fa8 <__multadd+0x74>
 8008f74:	6861      	ldr	r1, [r4, #4]
 8008f76:	4638      	mov	r0, r7
 8008f78:	3101      	adds	r1, #1
 8008f7a:	f7ff ff79 	bl	8008e70 <_Balloc>
 8008f7e:	4680      	mov	r8, r0
 8008f80:	b928      	cbnz	r0, 8008f8e <__multadd+0x5a>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <__multadd+0x84>)
 8008f86:	480d      	ldr	r0, [pc, #52]	; (8008fbc <__multadd+0x88>)
 8008f88:	21b5      	movs	r1, #181	; 0xb5
 8008f8a:	f000 fbfb 	bl	8009784 <__assert_func>
 8008f8e:	6922      	ldr	r2, [r4, #16]
 8008f90:	3202      	adds	r2, #2
 8008f92:	f104 010c 	add.w	r1, r4, #12
 8008f96:	0092      	lsls	r2, r2, #2
 8008f98:	300c      	adds	r0, #12
 8008f9a:	f7ff ff5b 	bl	8008e54 <memcpy>
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f7ff ffa5 	bl	8008ef0 <_Bfree>
 8008fa6:	4644      	mov	r4, r8
 8008fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fac:	3501      	adds	r5, #1
 8008fae:	615e      	str	r6, [r3, #20]
 8008fb0:	6125      	str	r5, [r4, #16]
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb8:	0800a38f 	.word	0x0800a38f
 8008fbc:	0800a3a0 	.word	0x0800a3a0

08008fc0 <__hi0bits>:
 8008fc0:	0c03      	lsrs	r3, r0, #16
 8008fc2:	041b      	lsls	r3, r3, #16
 8008fc4:	b9d3      	cbnz	r3, 8008ffc <__hi0bits+0x3c>
 8008fc6:	0400      	lsls	r0, r0, #16
 8008fc8:	2310      	movs	r3, #16
 8008fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fce:	bf04      	itt	eq
 8008fd0:	0200      	lsleq	r0, r0, #8
 8008fd2:	3308      	addeq	r3, #8
 8008fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008fd8:	bf04      	itt	eq
 8008fda:	0100      	lsleq	r0, r0, #4
 8008fdc:	3304      	addeq	r3, #4
 8008fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008fe2:	bf04      	itt	eq
 8008fe4:	0080      	lsleq	r0, r0, #2
 8008fe6:	3302      	addeq	r3, #2
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	db05      	blt.n	8008ff8 <__hi0bits+0x38>
 8008fec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ff0:	f103 0301 	add.w	r3, r3, #1
 8008ff4:	bf08      	it	eq
 8008ff6:	2320      	moveq	r3, #32
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	4770      	bx	lr
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e7e4      	b.n	8008fca <__hi0bits+0xa>

08009000 <__lo0bits>:
 8009000:	6803      	ldr	r3, [r0, #0]
 8009002:	f013 0207 	ands.w	r2, r3, #7
 8009006:	4601      	mov	r1, r0
 8009008:	d00b      	beq.n	8009022 <__lo0bits+0x22>
 800900a:	07da      	lsls	r2, r3, #31
 800900c:	d423      	bmi.n	8009056 <__lo0bits+0x56>
 800900e:	0798      	lsls	r0, r3, #30
 8009010:	bf49      	itett	mi
 8009012:	085b      	lsrmi	r3, r3, #1
 8009014:	089b      	lsrpl	r3, r3, #2
 8009016:	2001      	movmi	r0, #1
 8009018:	600b      	strmi	r3, [r1, #0]
 800901a:	bf5c      	itt	pl
 800901c:	600b      	strpl	r3, [r1, #0]
 800901e:	2002      	movpl	r0, #2
 8009020:	4770      	bx	lr
 8009022:	b298      	uxth	r0, r3
 8009024:	b9a8      	cbnz	r0, 8009052 <__lo0bits+0x52>
 8009026:	0c1b      	lsrs	r3, r3, #16
 8009028:	2010      	movs	r0, #16
 800902a:	b2da      	uxtb	r2, r3
 800902c:	b90a      	cbnz	r2, 8009032 <__lo0bits+0x32>
 800902e:	3008      	adds	r0, #8
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	071a      	lsls	r2, r3, #28
 8009034:	bf04      	itt	eq
 8009036:	091b      	lsreq	r3, r3, #4
 8009038:	3004      	addeq	r0, #4
 800903a:	079a      	lsls	r2, r3, #30
 800903c:	bf04      	itt	eq
 800903e:	089b      	lsreq	r3, r3, #2
 8009040:	3002      	addeq	r0, #2
 8009042:	07da      	lsls	r2, r3, #31
 8009044:	d403      	bmi.n	800904e <__lo0bits+0x4e>
 8009046:	085b      	lsrs	r3, r3, #1
 8009048:	f100 0001 	add.w	r0, r0, #1
 800904c:	d005      	beq.n	800905a <__lo0bits+0x5a>
 800904e:	600b      	str	r3, [r1, #0]
 8009050:	4770      	bx	lr
 8009052:	4610      	mov	r0, r2
 8009054:	e7e9      	b.n	800902a <__lo0bits+0x2a>
 8009056:	2000      	movs	r0, #0
 8009058:	4770      	bx	lr
 800905a:	2020      	movs	r0, #32
 800905c:	4770      	bx	lr
	...

08009060 <__i2b>:
 8009060:	b510      	push	{r4, lr}
 8009062:	460c      	mov	r4, r1
 8009064:	2101      	movs	r1, #1
 8009066:	f7ff ff03 	bl	8008e70 <_Balloc>
 800906a:	4602      	mov	r2, r0
 800906c:	b928      	cbnz	r0, 800907a <__i2b+0x1a>
 800906e:	4b05      	ldr	r3, [pc, #20]	; (8009084 <__i2b+0x24>)
 8009070:	4805      	ldr	r0, [pc, #20]	; (8009088 <__i2b+0x28>)
 8009072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009076:	f000 fb85 	bl	8009784 <__assert_func>
 800907a:	2301      	movs	r3, #1
 800907c:	6144      	str	r4, [r0, #20]
 800907e:	6103      	str	r3, [r0, #16]
 8009080:	bd10      	pop	{r4, pc}
 8009082:	bf00      	nop
 8009084:	0800a38f 	.word	0x0800a38f
 8009088:	0800a3a0 	.word	0x0800a3a0

0800908c <__multiply>:
 800908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009090:	4691      	mov	r9, r2
 8009092:	690a      	ldr	r2, [r1, #16]
 8009094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009098:	429a      	cmp	r2, r3
 800909a:	bfb8      	it	lt
 800909c:	460b      	movlt	r3, r1
 800909e:	460c      	mov	r4, r1
 80090a0:	bfbc      	itt	lt
 80090a2:	464c      	movlt	r4, r9
 80090a4:	4699      	movlt	r9, r3
 80090a6:	6927      	ldr	r7, [r4, #16]
 80090a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090ac:	68a3      	ldr	r3, [r4, #8]
 80090ae:	6861      	ldr	r1, [r4, #4]
 80090b0:	eb07 060a 	add.w	r6, r7, sl
 80090b4:	42b3      	cmp	r3, r6
 80090b6:	b085      	sub	sp, #20
 80090b8:	bfb8      	it	lt
 80090ba:	3101      	addlt	r1, #1
 80090bc:	f7ff fed8 	bl	8008e70 <_Balloc>
 80090c0:	b930      	cbnz	r0, 80090d0 <__multiply+0x44>
 80090c2:	4602      	mov	r2, r0
 80090c4:	4b44      	ldr	r3, [pc, #272]	; (80091d8 <__multiply+0x14c>)
 80090c6:	4845      	ldr	r0, [pc, #276]	; (80091dc <__multiply+0x150>)
 80090c8:	f240 115d 	movw	r1, #349	; 0x15d
 80090cc:	f000 fb5a 	bl	8009784 <__assert_func>
 80090d0:	f100 0514 	add.w	r5, r0, #20
 80090d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090d8:	462b      	mov	r3, r5
 80090da:	2200      	movs	r2, #0
 80090dc:	4543      	cmp	r3, r8
 80090de:	d321      	bcc.n	8009124 <__multiply+0x98>
 80090e0:	f104 0314 	add.w	r3, r4, #20
 80090e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090e8:	f109 0314 	add.w	r3, r9, #20
 80090ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090f0:	9202      	str	r2, [sp, #8]
 80090f2:	1b3a      	subs	r2, r7, r4
 80090f4:	3a15      	subs	r2, #21
 80090f6:	f022 0203 	bic.w	r2, r2, #3
 80090fa:	3204      	adds	r2, #4
 80090fc:	f104 0115 	add.w	r1, r4, #21
 8009100:	428f      	cmp	r7, r1
 8009102:	bf38      	it	cc
 8009104:	2204      	movcc	r2, #4
 8009106:	9201      	str	r2, [sp, #4]
 8009108:	9a02      	ldr	r2, [sp, #8]
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	429a      	cmp	r2, r3
 800910e:	d80c      	bhi.n	800912a <__multiply+0x9e>
 8009110:	2e00      	cmp	r6, #0
 8009112:	dd03      	ble.n	800911c <__multiply+0x90>
 8009114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009118:	2b00      	cmp	r3, #0
 800911a:	d05a      	beq.n	80091d2 <__multiply+0x146>
 800911c:	6106      	str	r6, [r0, #16]
 800911e:	b005      	add	sp, #20
 8009120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009124:	f843 2b04 	str.w	r2, [r3], #4
 8009128:	e7d8      	b.n	80090dc <__multiply+0x50>
 800912a:	f8b3 a000 	ldrh.w	sl, [r3]
 800912e:	f1ba 0f00 	cmp.w	sl, #0
 8009132:	d024      	beq.n	800917e <__multiply+0xf2>
 8009134:	f104 0e14 	add.w	lr, r4, #20
 8009138:	46a9      	mov	r9, r5
 800913a:	f04f 0c00 	mov.w	ip, #0
 800913e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009142:	f8d9 1000 	ldr.w	r1, [r9]
 8009146:	fa1f fb82 	uxth.w	fp, r2
 800914a:	b289      	uxth	r1, r1
 800914c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009154:	f8d9 2000 	ldr.w	r2, [r9]
 8009158:	4461      	add	r1, ip
 800915a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800915e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009166:	b289      	uxth	r1, r1
 8009168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800916c:	4577      	cmp	r7, lr
 800916e:	f849 1b04 	str.w	r1, [r9], #4
 8009172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009176:	d8e2      	bhi.n	800913e <__multiply+0xb2>
 8009178:	9a01      	ldr	r2, [sp, #4]
 800917a:	f845 c002 	str.w	ip, [r5, r2]
 800917e:	9a03      	ldr	r2, [sp, #12]
 8009180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009184:	3304      	adds	r3, #4
 8009186:	f1b9 0f00 	cmp.w	r9, #0
 800918a:	d020      	beq.n	80091ce <__multiply+0x142>
 800918c:	6829      	ldr	r1, [r5, #0]
 800918e:	f104 0c14 	add.w	ip, r4, #20
 8009192:	46ae      	mov	lr, r5
 8009194:	f04f 0a00 	mov.w	sl, #0
 8009198:	f8bc b000 	ldrh.w	fp, [ip]
 800919c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091a0:	fb09 220b 	mla	r2, r9, fp, r2
 80091a4:	4492      	add	sl, r2
 80091a6:	b289      	uxth	r1, r1
 80091a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091ac:	f84e 1b04 	str.w	r1, [lr], #4
 80091b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091b4:	f8be 1000 	ldrh.w	r1, [lr]
 80091b8:	0c12      	lsrs	r2, r2, #16
 80091ba:	fb09 1102 	mla	r1, r9, r2, r1
 80091be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091c2:	4567      	cmp	r7, ip
 80091c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091c8:	d8e6      	bhi.n	8009198 <__multiply+0x10c>
 80091ca:	9a01      	ldr	r2, [sp, #4]
 80091cc:	50a9      	str	r1, [r5, r2]
 80091ce:	3504      	adds	r5, #4
 80091d0:	e79a      	b.n	8009108 <__multiply+0x7c>
 80091d2:	3e01      	subs	r6, #1
 80091d4:	e79c      	b.n	8009110 <__multiply+0x84>
 80091d6:	bf00      	nop
 80091d8:	0800a38f 	.word	0x0800a38f
 80091dc:	0800a3a0 	.word	0x0800a3a0

080091e0 <__pow5mult>:
 80091e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e4:	4615      	mov	r5, r2
 80091e6:	f012 0203 	ands.w	r2, r2, #3
 80091ea:	4606      	mov	r6, r0
 80091ec:	460f      	mov	r7, r1
 80091ee:	d007      	beq.n	8009200 <__pow5mult+0x20>
 80091f0:	4c25      	ldr	r4, [pc, #148]	; (8009288 <__pow5mult+0xa8>)
 80091f2:	3a01      	subs	r2, #1
 80091f4:	2300      	movs	r3, #0
 80091f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091fa:	f7ff fe9b 	bl	8008f34 <__multadd>
 80091fe:	4607      	mov	r7, r0
 8009200:	10ad      	asrs	r5, r5, #2
 8009202:	d03d      	beq.n	8009280 <__pow5mult+0xa0>
 8009204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009206:	b97c      	cbnz	r4, 8009228 <__pow5mult+0x48>
 8009208:	2010      	movs	r0, #16
 800920a:	f7ff fe1b 	bl	8008e44 <malloc>
 800920e:	4602      	mov	r2, r0
 8009210:	6270      	str	r0, [r6, #36]	; 0x24
 8009212:	b928      	cbnz	r0, 8009220 <__pow5mult+0x40>
 8009214:	4b1d      	ldr	r3, [pc, #116]	; (800928c <__pow5mult+0xac>)
 8009216:	481e      	ldr	r0, [pc, #120]	; (8009290 <__pow5mult+0xb0>)
 8009218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800921c:	f000 fab2 	bl	8009784 <__assert_func>
 8009220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009224:	6004      	str	r4, [r0, #0]
 8009226:	60c4      	str	r4, [r0, #12]
 8009228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800922c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009230:	b94c      	cbnz	r4, 8009246 <__pow5mult+0x66>
 8009232:	f240 2171 	movw	r1, #625	; 0x271
 8009236:	4630      	mov	r0, r6
 8009238:	f7ff ff12 	bl	8009060 <__i2b>
 800923c:	2300      	movs	r3, #0
 800923e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009242:	4604      	mov	r4, r0
 8009244:	6003      	str	r3, [r0, #0]
 8009246:	f04f 0900 	mov.w	r9, #0
 800924a:	07eb      	lsls	r3, r5, #31
 800924c:	d50a      	bpl.n	8009264 <__pow5mult+0x84>
 800924e:	4639      	mov	r1, r7
 8009250:	4622      	mov	r2, r4
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ff1a 	bl	800908c <__multiply>
 8009258:	4639      	mov	r1, r7
 800925a:	4680      	mov	r8, r0
 800925c:	4630      	mov	r0, r6
 800925e:	f7ff fe47 	bl	8008ef0 <_Bfree>
 8009262:	4647      	mov	r7, r8
 8009264:	106d      	asrs	r5, r5, #1
 8009266:	d00b      	beq.n	8009280 <__pow5mult+0xa0>
 8009268:	6820      	ldr	r0, [r4, #0]
 800926a:	b938      	cbnz	r0, 800927c <__pow5mult+0x9c>
 800926c:	4622      	mov	r2, r4
 800926e:	4621      	mov	r1, r4
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff ff0b 	bl	800908c <__multiply>
 8009276:	6020      	str	r0, [r4, #0]
 8009278:	f8c0 9000 	str.w	r9, [r0]
 800927c:	4604      	mov	r4, r0
 800927e:	e7e4      	b.n	800924a <__pow5mult+0x6a>
 8009280:	4638      	mov	r0, r7
 8009282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009286:	bf00      	nop
 8009288:	0800a4f0 	.word	0x0800a4f0
 800928c:	0800a31d 	.word	0x0800a31d
 8009290:	0800a3a0 	.word	0x0800a3a0

08009294 <__lshift>:
 8009294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009298:	460c      	mov	r4, r1
 800929a:	6849      	ldr	r1, [r1, #4]
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092a2:	68a3      	ldr	r3, [r4, #8]
 80092a4:	4607      	mov	r7, r0
 80092a6:	4691      	mov	r9, r2
 80092a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092ac:	f108 0601 	add.w	r6, r8, #1
 80092b0:	42b3      	cmp	r3, r6
 80092b2:	db0b      	blt.n	80092cc <__lshift+0x38>
 80092b4:	4638      	mov	r0, r7
 80092b6:	f7ff fddb 	bl	8008e70 <_Balloc>
 80092ba:	4605      	mov	r5, r0
 80092bc:	b948      	cbnz	r0, 80092d2 <__lshift+0x3e>
 80092be:	4602      	mov	r2, r0
 80092c0:	4b2a      	ldr	r3, [pc, #168]	; (800936c <__lshift+0xd8>)
 80092c2:	482b      	ldr	r0, [pc, #172]	; (8009370 <__lshift+0xdc>)
 80092c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092c8:	f000 fa5c 	bl	8009784 <__assert_func>
 80092cc:	3101      	adds	r1, #1
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	e7ee      	b.n	80092b0 <__lshift+0x1c>
 80092d2:	2300      	movs	r3, #0
 80092d4:	f100 0114 	add.w	r1, r0, #20
 80092d8:	f100 0210 	add.w	r2, r0, #16
 80092dc:	4618      	mov	r0, r3
 80092de:	4553      	cmp	r3, sl
 80092e0:	db37      	blt.n	8009352 <__lshift+0xbe>
 80092e2:	6920      	ldr	r0, [r4, #16]
 80092e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092e8:	f104 0314 	add.w	r3, r4, #20
 80092ec:	f019 091f 	ands.w	r9, r9, #31
 80092f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80092f8:	d02f      	beq.n	800935a <__lshift+0xc6>
 80092fa:	f1c9 0e20 	rsb	lr, r9, #32
 80092fe:	468a      	mov	sl, r1
 8009300:	f04f 0c00 	mov.w	ip, #0
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	fa02 f209 	lsl.w	r2, r2, r9
 800930a:	ea42 020c 	orr.w	r2, r2, ip
 800930e:	f84a 2b04 	str.w	r2, [sl], #4
 8009312:	f853 2b04 	ldr.w	r2, [r3], #4
 8009316:	4298      	cmp	r0, r3
 8009318:	fa22 fc0e 	lsr.w	ip, r2, lr
 800931c:	d8f2      	bhi.n	8009304 <__lshift+0x70>
 800931e:	1b03      	subs	r3, r0, r4
 8009320:	3b15      	subs	r3, #21
 8009322:	f023 0303 	bic.w	r3, r3, #3
 8009326:	3304      	adds	r3, #4
 8009328:	f104 0215 	add.w	r2, r4, #21
 800932c:	4290      	cmp	r0, r2
 800932e:	bf38      	it	cc
 8009330:	2304      	movcc	r3, #4
 8009332:	f841 c003 	str.w	ip, [r1, r3]
 8009336:	f1bc 0f00 	cmp.w	ip, #0
 800933a:	d001      	beq.n	8009340 <__lshift+0xac>
 800933c:	f108 0602 	add.w	r6, r8, #2
 8009340:	3e01      	subs	r6, #1
 8009342:	4638      	mov	r0, r7
 8009344:	612e      	str	r6, [r5, #16]
 8009346:	4621      	mov	r1, r4
 8009348:	f7ff fdd2 	bl	8008ef0 <_Bfree>
 800934c:	4628      	mov	r0, r5
 800934e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009352:	f842 0f04 	str.w	r0, [r2, #4]!
 8009356:	3301      	adds	r3, #1
 8009358:	e7c1      	b.n	80092de <__lshift+0x4a>
 800935a:	3904      	subs	r1, #4
 800935c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009360:	f841 2f04 	str.w	r2, [r1, #4]!
 8009364:	4298      	cmp	r0, r3
 8009366:	d8f9      	bhi.n	800935c <__lshift+0xc8>
 8009368:	e7ea      	b.n	8009340 <__lshift+0xac>
 800936a:	bf00      	nop
 800936c:	0800a38f 	.word	0x0800a38f
 8009370:	0800a3a0 	.word	0x0800a3a0

08009374 <__mcmp>:
 8009374:	b530      	push	{r4, r5, lr}
 8009376:	6902      	ldr	r2, [r0, #16]
 8009378:	690c      	ldr	r4, [r1, #16]
 800937a:	1b12      	subs	r2, r2, r4
 800937c:	d10e      	bne.n	800939c <__mcmp+0x28>
 800937e:	f100 0314 	add.w	r3, r0, #20
 8009382:	3114      	adds	r1, #20
 8009384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800938c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009394:	42a5      	cmp	r5, r4
 8009396:	d003      	beq.n	80093a0 <__mcmp+0x2c>
 8009398:	d305      	bcc.n	80093a6 <__mcmp+0x32>
 800939a:	2201      	movs	r2, #1
 800939c:	4610      	mov	r0, r2
 800939e:	bd30      	pop	{r4, r5, pc}
 80093a0:	4283      	cmp	r3, r0
 80093a2:	d3f3      	bcc.n	800938c <__mcmp+0x18>
 80093a4:	e7fa      	b.n	800939c <__mcmp+0x28>
 80093a6:	f04f 32ff 	mov.w	r2, #4294967295
 80093aa:	e7f7      	b.n	800939c <__mcmp+0x28>

080093ac <__mdiff>:
 80093ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	460c      	mov	r4, r1
 80093b2:	4606      	mov	r6, r0
 80093b4:	4611      	mov	r1, r2
 80093b6:	4620      	mov	r0, r4
 80093b8:	4690      	mov	r8, r2
 80093ba:	f7ff ffdb 	bl	8009374 <__mcmp>
 80093be:	1e05      	subs	r5, r0, #0
 80093c0:	d110      	bne.n	80093e4 <__mdiff+0x38>
 80093c2:	4629      	mov	r1, r5
 80093c4:	4630      	mov	r0, r6
 80093c6:	f7ff fd53 	bl	8008e70 <_Balloc>
 80093ca:	b930      	cbnz	r0, 80093da <__mdiff+0x2e>
 80093cc:	4b3a      	ldr	r3, [pc, #232]	; (80094b8 <__mdiff+0x10c>)
 80093ce:	4602      	mov	r2, r0
 80093d0:	f240 2132 	movw	r1, #562	; 0x232
 80093d4:	4839      	ldr	r0, [pc, #228]	; (80094bc <__mdiff+0x110>)
 80093d6:	f000 f9d5 	bl	8009784 <__assert_func>
 80093da:	2301      	movs	r3, #1
 80093dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	bfa4      	itt	ge
 80093e6:	4643      	movge	r3, r8
 80093e8:	46a0      	movge	r8, r4
 80093ea:	4630      	mov	r0, r6
 80093ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093f0:	bfa6      	itte	ge
 80093f2:	461c      	movge	r4, r3
 80093f4:	2500      	movge	r5, #0
 80093f6:	2501      	movlt	r5, #1
 80093f8:	f7ff fd3a 	bl	8008e70 <_Balloc>
 80093fc:	b920      	cbnz	r0, 8009408 <__mdiff+0x5c>
 80093fe:	4b2e      	ldr	r3, [pc, #184]	; (80094b8 <__mdiff+0x10c>)
 8009400:	4602      	mov	r2, r0
 8009402:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009406:	e7e5      	b.n	80093d4 <__mdiff+0x28>
 8009408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800940c:	6926      	ldr	r6, [r4, #16]
 800940e:	60c5      	str	r5, [r0, #12]
 8009410:	f104 0914 	add.w	r9, r4, #20
 8009414:	f108 0514 	add.w	r5, r8, #20
 8009418:	f100 0e14 	add.w	lr, r0, #20
 800941c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009424:	f108 0210 	add.w	r2, r8, #16
 8009428:	46f2      	mov	sl, lr
 800942a:	2100      	movs	r1, #0
 800942c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009434:	fa1f f883 	uxth.w	r8, r3
 8009438:	fa11 f18b 	uxtah	r1, r1, fp
 800943c:	0c1b      	lsrs	r3, r3, #16
 800943e:	eba1 0808 	sub.w	r8, r1, r8
 8009442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009446:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800944a:	fa1f f888 	uxth.w	r8, r8
 800944e:	1419      	asrs	r1, r3, #16
 8009450:	454e      	cmp	r6, r9
 8009452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009456:	f84a 3b04 	str.w	r3, [sl], #4
 800945a:	d8e7      	bhi.n	800942c <__mdiff+0x80>
 800945c:	1b33      	subs	r3, r6, r4
 800945e:	3b15      	subs	r3, #21
 8009460:	f023 0303 	bic.w	r3, r3, #3
 8009464:	3304      	adds	r3, #4
 8009466:	3415      	adds	r4, #21
 8009468:	42a6      	cmp	r6, r4
 800946a:	bf38      	it	cc
 800946c:	2304      	movcc	r3, #4
 800946e:	441d      	add	r5, r3
 8009470:	4473      	add	r3, lr
 8009472:	469e      	mov	lr, r3
 8009474:	462e      	mov	r6, r5
 8009476:	4566      	cmp	r6, ip
 8009478:	d30e      	bcc.n	8009498 <__mdiff+0xec>
 800947a:	f10c 0203 	add.w	r2, ip, #3
 800947e:	1b52      	subs	r2, r2, r5
 8009480:	f022 0203 	bic.w	r2, r2, #3
 8009484:	3d03      	subs	r5, #3
 8009486:	45ac      	cmp	ip, r5
 8009488:	bf38      	it	cc
 800948a:	2200      	movcc	r2, #0
 800948c:	441a      	add	r2, r3
 800948e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009492:	b17b      	cbz	r3, 80094b4 <__mdiff+0x108>
 8009494:	6107      	str	r7, [r0, #16]
 8009496:	e7a3      	b.n	80093e0 <__mdiff+0x34>
 8009498:	f856 8b04 	ldr.w	r8, [r6], #4
 800949c:	fa11 f288 	uxtah	r2, r1, r8
 80094a0:	1414      	asrs	r4, r2, #16
 80094a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094a6:	b292      	uxth	r2, r2
 80094a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094ac:	f84e 2b04 	str.w	r2, [lr], #4
 80094b0:	1421      	asrs	r1, r4, #16
 80094b2:	e7e0      	b.n	8009476 <__mdiff+0xca>
 80094b4:	3f01      	subs	r7, #1
 80094b6:	e7ea      	b.n	800948e <__mdiff+0xe2>
 80094b8:	0800a38f 	.word	0x0800a38f
 80094bc:	0800a3a0 	.word	0x0800a3a0

080094c0 <__d2b>:
 80094c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094c4:	4689      	mov	r9, r1
 80094c6:	2101      	movs	r1, #1
 80094c8:	ec57 6b10 	vmov	r6, r7, d0
 80094cc:	4690      	mov	r8, r2
 80094ce:	f7ff fccf 	bl	8008e70 <_Balloc>
 80094d2:	4604      	mov	r4, r0
 80094d4:	b930      	cbnz	r0, 80094e4 <__d2b+0x24>
 80094d6:	4602      	mov	r2, r0
 80094d8:	4b25      	ldr	r3, [pc, #148]	; (8009570 <__d2b+0xb0>)
 80094da:	4826      	ldr	r0, [pc, #152]	; (8009574 <__d2b+0xb4>)
 80094dc:	f240 310a 	movw	r1, #778	; 0x30a
 80094e0:	f000 f950 	bl	8009784 <__assert_func>
 80094e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80094e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094ec:	bb35      	cbnz	r5, 800953c <__d2b+0x7c>
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	d028      	beq.n	8009546 <__d2b+0x86>
 80094f4:	4668      	mov	r0, sp
 80094f6:	9600      	str	r6, [sp, #0]
 80094f8:	f7ff fd82 	bl	8009000 <__lo0bits>
 80094fc:	9900      	ldr	r1, [sp, #0]
 80094fe:	b300      	cbz	r0, 8009542 <__d2b+0x82>
 8009500:	9a01      	ldr	r2, [sp, #4]
 8009502:	f1c0 0320 	rsb	r3, r0, #32
 8009506:	fa02 f303 	lsl.w	r3, r2, r3
 800950a:	430b      	orrs	r3, r1
 800950c:	40c2      	lsrs	r2, r0
 800950e:	6163      	str	r3, [r4, #20]
 8009510:	9201      	str	r2, [sp, #4]
 8009512:	9b01      	ldr	r3, [sp, #4]
 8009514:	61a3      	str	r3, [r4, #24]
 8009516:	2b00      	cmp	r3, #0
 8009518:	bf14      	ite	ne
 800951a:	2202      	movne	r2, #2
 800951c:	2201      	moveq	r2, #1
 800951e:	6122      	str	r2, [r4, #16]
 8009520:	b1d5      	cbz	r5, 8009558 <__d2b+0x98>
 8009522:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009526:	4405      	add	r5, r0
 8009528:	f8c9 5000 	str.w	r5, [r9]
 800952c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009530:	f8c8 0000 	str.w	r0, [r8]
 8009534:	4620      	mov	r0, r4
 8009536:	b003      	add	sp, #12
 8009538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800953c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009540:	e7d5      	b.n	80094ee <__d2b+0x2e>
 8009542:	6161      	str	r1, [r4, #20]
 8009544:	e7e5      	b.n	8009512 <__d2b+0x52>
 8009546:	a801      	add	r0, sp, #4
 8009548:	f7ff fd5a 	bl	8009000 <__lo0bits>
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	6163      	str	r3, [r4, #20]
 8009550:	2201      	movs	r2, #1
 8009552:	6122      	str	r2, [r4, #16]
 8009554:	3020      	adds	r0, #32
 8009556:	e7e3      	b.n	8009520 <__d2b+0x60>
 8009558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800955c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009560:	f8c9 0000 	str.w	r0, [r9]
 8009564:	6918      	ldr	r0, [r3, #16]
 8009566:	f7ff fd2b 	bl	8008fc0 <__hi0bits>
 800956a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800956e:	e7df      	b.n	8009530 <__d2b+0x70>
 8009570:	0800a38f 	.word	0x0800a38f
 8009574:	0800a3a0 	.word	0x0800a3a0

08009578 <_calloc_r>:
 8009578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800957a:	fba1 2402 	umull	r2, r4, r1, r2
 800957e:	b94c      	cbnz	r4, 8009594 <_calloc_r+0x1c>
 8009580:	4611      	mov	r1, r2
 8009582:	9201      	str	r2, [sp, #4]
 8009584:	f000 f87a 	bl	800967c <_malloc_r>
 8009588:	9a01      	ldr	r2, [sp, #4]
 800958a:	4605      	mov	r5, r0
 800958c:	b930      	cbnz	r0, 800959c <_calloc_r+0x24>
 800958e:	4628      	mov	r0, r5
 8009590:	b003      	add	sp, #12
 8009592:	bd30      	pop	{r4, r5, pc}
 8009594:	220c      	movs	r2, #12
 8009596:	6002      	str	r2, [r0, #0]
 8009598:	2500      	movs	r5, #0
 800959a:	e7f8      	b.n	800958e <_calloc_r+0x16>
 800959c:	4621      	mov	r1, r4
 800959e:	f7fe f95f 	bl	8007860 <memset>
 80095a2:	e7f4      	b.n	800958e <_calloc_r+0x16>

080095a4 <_free_r>:
 80095a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095a6:	2900      	cmp	r1, #0
 80095a8:	d044      	beq.n	8009634 <_free_r+0x90>
 80095aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ae:	9001      	str	r0, [sp, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f1a1 0404 	sub.w	r4, r1, #4
 80095b6:	bfb8      	it	lt
 80095b8:	18e4      	addlt	r4, r4, r3
 80095ba:	f000 f925 	bl	8009808 <__malloc_lock>
 80095be:	4a1e      	ldr	r2, [pc, #120]	; (8009638 <_free_r+0x94>)
 80095c0:	9801      	ldr	r0, [sp, #4]
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	b933      	cbnz	r3, 80095d4 <_free_r+0x30>
 80095c6:	6063      	str	r3, [r4, #4]
 80095c8:	6014      	str	r4, [r2, #0]
 80095ca:	b003      	add	sp, #12
 80095cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095d0:	f000 b920 	b.w	8009814 <__malloc_unlock>
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	d908      	bls.n	80095ea <_free_r+0x46>
 80095d8:	6825      	ldr	r5, [r4, #0]
 80095da:	1961      	adds	r1, r4, r5
 80095dc:	428b      	cmp	r3, r1
 80095de:	bf01      	itttt	eq
 80095e0:	6819      	ldreq	r1, [r3, #0]
 80095e2:	685b      	ldreq	r3, [r3, #4]
 80095e4:	1949      	addeq	r1, r1, r5
 80095e6:	6021      	streq	r1, [r4, #0]
 80095e8:	e7ed      	b.n	80095c6 <_free_r+0x22>
 80095ea:	461a      	mov	r2, r3
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	b10b      	cbz	r3, 80095f4 <_free_r+0x50>
 80095f0:	42a3      	cmp	r3, r4
 80095f2:	d9fa      	bls.n	80095ea <_free_r+0x46>
 80095f4:	6811      	ldr	r1, [r2, #0]
 80095f6:	1855      	adds	r5, r2, r1
 80095f8:	42a5      	cmp	r5, r4
 80095fa:	d10b      	bne.n	8009614 <_free_r+0x70>
 80095fc:	6824      	ldr	r4, [r4, #0]
 80095fe:	4421      	add	r1, r4
 8009600:	1854      	adds	r4, r2, r1
 8009602:	42a3      	cmp	r3, r4
 8009604:	6011      	str	r1, [r2, #0]
 8009606:	d1e0      	bne.n	80095ca <_free_r+0x26>
 8009608:	681c      	ldr	r4, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	6053      	str	r3, [r2, #4]
 800960e:	4421      	add	r1, r4
 8009610:	6011      	str	r1, [r2, #0]
 8009612:	e7da      	b.n	80095ca <_free_r+0x26>
 8009614:	d902      	bls.n	800961c <_free_r+0x78>
 8009616:	230c      	movs	r3, #12
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	e7d6      	b.n	80095ca <_free_r+0x26>
 800961c:	6825      	ldr	r5, [r4, #0]
 800961e:	1961      	adds	r1, r4, r5
 8009620:	428b      	cmp	r3, r1
 8009622:	bf04      	itt	eq
 8009624:	6819      	ldreq	r1, [r3, #0]
 8009626:	685b      	ldreq	r3, [r3, #4]
 8009628:	6063      	str	r3, [r4, #4]
 800962a:	bf04      	itt	eq
 800962c:	1949      	addeq	r1, r1, r5
 800962e:	6021      	streq	r1, [r4, #0]
 8009630:	6054      	str	r4, [r2, #4]
 8009632:	e7ca      	b.n	80095ca <_free_r+0x26>
 8009634:	b003      	add	sp, #12
 8009636:	bd30      	pop	{r4, r5, pc}
 8009638:	200004c4 	.word	0x200004c4

0800963c <sbrk_aligned>:
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	4e0e      	ldr	r6, [pc, #56]	; (8009678 <sbrk_aligned+0x3c>)
 8009640:	460c      	mov	r4, r1
 8009642:	6831      	ldr	r1, [r6, #0]
 8009644:	4605      	mov	r5, r0
 8009646:	b911      	cbnz	r1, 800964e <sbrk_aligned+0x12>
 8009648:	f000 f88c 	bl	8009764 <_sbrk_r>
 800964c:	6030      	str	r0, [r6, #0]
 800964e:	4621      	mov	r1, r4
 8009650:	4628      	mov	r0, r5
 8009652:	f000 f887 	bl	8009764 <_sbrk_r>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	d00a      	beq.n	8009670 <sbrk_aligned+0x34>
 800965a:	1cc4      	adds	r4, r0, #3
 800965c:	f024 0403 	bic.w	r4, r4, #3
 8009660:	42a0      	cmp	r0, r4
 8009662:	d007      	beq.n	8009674 <sbrk_aligned+0x38>
 8009664:	1a21      	subs	r1, r4, r0
 8009666:	4628      	mov	r0, r5
 8009668:	f000 f87c 	bl	8009764 <_sbrk_r>
 800966c:	3001      	adds	r0, #1
 800966e:	d101      	bne.n	8009674 <sbrk_aligned+0x38>
 8009670:	f04f 34ff 	mov.w	r4, #4294967295
 8009674:	4620      	mov	r0, r4
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	200004c8 	.word	0x200004c8

0800967c <_malloc_r>:
 800967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009680:	1ccd      	adds	r5, r1, #3
 8009682:	f025 0503 	bic.w	r5, r5, #3
 8009686:	3508      	adds	r5, #8
 8009688:	2d0c      	cmp	r5, #12
 800968a:	bf38      	it	cc
 800968c:	250c      	movcc	r5, #12
 800968e:	2d00      	cmp	r5, #0
 8009690:	4607      	mov	r7, r0
 8009692:	db01      	blt.n	8009698 <_malloc_r+0x1c>
 8009694:	42a9      	cmp	r1, r5
 8009696:	d905      	bls.n	80096a4 <_malloc_r+0x28>
 8009698:	230c      	movs	r3, #12
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	2600      	movs	r6, #0
 800969e:	4630      	mov	r0, r6
 80096a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a4:	4e2e      	ldr	r6, [pc, #184]	; (8009760 <_malloc_r+0xe4>)
 80096a6:	f000 f8af 	bl	8009808 <__malloc_lock>
 80096aa:	6833      	ldr	r3, [r6, #0]
 80096ac:	461c      	mov	r4, r3
 80096ae:	bb34      	cbnz	r4, 80096fe <_malloc_r+0x82>
 80096b0:	4629      	mov	r1, r5
 80096b2:	4638      	mov	r0, r7
 80096b4:	f7ff ffc2 	bl	800963c <sbrk_aligned>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	4604      	mov	r4, r0
 80096bc:	d14d      	bne.n	800975a <_malloc_r+0xde>
 80096be:	6834      	ldr	r4, [r6, #0]
 80096c0:	4626      	mov	r6, r4
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	d140      	bne.n	8009748 <_malloc_r+0xcc>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	4631      	mov	r1, r6
 80096ca:	4638      	mov	r0, r7
 80096cc:	eb04 0803 	add.w	r8, r4, r3
 80096d0:	f000 f848 	bl	8009764 <_sbrk_r>
 80096d4:	4580      	cmp	r8, r0
 80096d6:	d13a      	bne.n	800974e <_malloc_r+0xd2>
 80096d8:	6821      	ldr	r1, [r4, #0]
 80096da:	3503      	adds	r5, #3
 80096dc:	1a6d      	subs	r5, r5, r1
 80096de:	f025 0503 	bic.w	r5, r5, #3
 80096e2:	3508      	adds	r5, #8
 80096e4:	2d0c      	cmp	r5, #12
 80096e6:	bf38      	it	cc
 80096e8:	250c      	movcc	r5, #12
 80096ea:	4629      	mov	r1, r5
 80096ec:	4638      	mov	r0, r7
 80096ee:	f7ff ffa5 	bl	800963c <sbrk_aligned>
 80096f2:	3001      	adds	r0, #1
 80096f4:	d02b      	beq.n	800974e <_malloc_r+0xd2>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	442b      	add	r3, r5
 80096fa:	6023      	str	r3, [r4, #0]
 80096fc:	e00e      	b.n	800971c <_malloc_r+0xa0>
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	1b52      	subs	r2, r2, r5
 8009702:	d41e      	bmi.n	8009742 <_malloc_r+0xc6>
 8009704:	2a0b      	cmp	r2, #11
 8009706:	d916      	bls.n	8009736 <_malloc_r+0xba>
 8009708:	1961      	adds	r1, r4, r5
 800970a:	42a3      	cmp	r3, r4
 800970c:	6025      	str	r5, [r4, #0]
 800970e:	bf18      	it	ne
 8009710:	6059      	strne	r1, [r3, #4]
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	bf08      	it	eq
 8009716:	6031      	streq	r1, [r6, #0]
 8009718:	5162      	str	r2, [r4, r5]
 800971a:	604b      	str	r3, [r1, #4]
 800971c:	4638      	mov	r0, r7
 800971e:	f104 060b 	add.w	r6, r4, #11
 8009722:	f000 f877 	bl	8009814 <__malloc_unlock>
 8009726:	f026 0607 	bic.w	r6, r6, #7
 800972a:	1d23      	adds	r3, r4, #4
 800972c:	1af2      	subs	r2, r6, r3
 800972e:	d0b6      	beq.n	800969e <_malloc_r+0x22>
 8009730:	1b9b      	subs	r3, r3, r6
 8009732:	50a3      	str	r3, [r4, r2]
 8009734:	e7b3      	b.n	800969e <_malloc_r+0x22>
 8009736:	6862      	ldr	r2, [r4, #4]
 8009738:	42a3      	cmp	r3, r4
 800973a:	bf0c      	ite	eq
 800973c:	6032      	streq	r2, [r6, #0]
 800973e:	605a      	strne	r2, [r3, #4]
 8009740:	e7ec      	b.n	800971c <_malloc_r+0xa0>
 8009742:	4623      	mov	r3, r4
 8009744:	6864      	ldr	r4, [r4, #4]
 8009746:	e7b2      	b.n	80096ae <_malloc_r+0x32>
 8009748:	4634      	mov	r4, r6
 800974a:	6876      	ldr	r6, [r6, #4]
 800974c:	e7b9      	b.n	80096c2 <_malloc_r+0x46>
 800974e:	230c      	movs	r3, #12
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	4638      	mov	r0, r7
 8009754:	f000 f85e 	bl	8009814 <__malloc_unlock>
 8009758:	e7a1      	b.n	800969e <_malloc_r+0x22>
 800975a:	6025      	str	r5, [r4, #0]
 800975c:	e7de      	b.n	800971c <_malloc_r+0xa0>
 800975e:	bf00      	nop
 8009760:	200004c4 	.word	0x200004c4

08009764 <_sbrk_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d06      	ldr	r5, [pc, #24]	; (8009780 <_sbrk_r+0x1c>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7f8 ff2e 	bl	80025d0 <_sbrk>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_sbrk_r+0x1a>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_sbrk_r+0x1a>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	200004cc 	.word	0x200004cc

08009784 <__assert_func>:
 8009784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009786:	4614      	mov	r4, r2
 8009788:	461a      	mov	r2, r3
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <__assert_func+0x2c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4605      	mov	r5, r0
 8009790:	68d8      	ldr	r0, [r3, #12]
 8009792:	b14c      	cbz	r4, 80097a8 <__assert_func+0x24>
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <__assert_func+0x30>)
 8009796:	9100      	str	r1, [sp, #0]
 8009798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800979c:	4906      	ldr	r1, [pc, #24]	; (80097b8 <__assert_func+0x34>)
 800979e:	462b      	mov	r3, r5
 80097a0:	f000 f80e 	bl	80097c0 <fiprintf>
 80097a4:	f000 fa64 	bl	8009c70 <abort>
 80097a8:	4b04      	ldr	r3, [pc, #16]	; (80097bc <__assert_func+0x38>)
 80097aa:	461c      	mov	r4, r3
 80097ac:	e7f3      	b.n	8009796 <__assert_func+0x12>
 80097ae:	bf00      	nop
 80097b0:	2000000c 	.word	0x2000000c
 80097b4:	0800a4fc 	.word	0x0800a4fc
 80097b8:	0800a509 	.word	0x0800a509
 80097bc:	0800a537 	.word	0x0800a537

080097c0 <fiprintf>:
 80097c0:	b40e      	push	{r1, r2, r3}
 80097c2:	b503      	push	{r0, r1, lr}
 80097c4:	4601      	mov	r1, r0
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	4805      	ldr	r0, [pc, #20]	; (80097e0 <fiprintf+0x20>)
 80097ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ce:	6800      	ldr	r0, [r0, #0]
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	f000 f84f 	bl	8009874 <_vfiprintf_r>
 80097d6:	b002      	add	sp, #8
 80097d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097dc:	b003      	add	sp, #12
 80097de:	4770      	bx	lr
 80097e0:	2000000c 	.word	0x2000000c

080097e4 <__ascii_mbtowc>:
 80097e4:	b082      	sub	sp, #8
 80097e6:	b901      	cbnz	r1, 80097ea <__ascii_mbtowc+0x6>
 80097e8:	a901      	add	r1, sp, #4
 80097ea:	b142      	cbz	r2, 80097fe <__ascii_mbtowc+0x1a>
 80097ec:	b14b      	cbz	r3, 8009802 <__ascii_mbtowc+0x1e>
 80097ee:	7813      	ldrb	r3, [r2, #0]
 80097f0:	600b      	str	r3, [r1, #0]
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	1e10      	subs	r0, r2, #0
 80097f6:	bf18      	it	ne
 80097f8:	2001      	movne	r0, #1
 80097fa:	b002      	add	sp, #8
 80097fc:	4770      	bx	lr
 80097fe:	4610      	mov	r0, r2
 8009800:	e7fb      	b.n	80097fa <__ascii_mbtowc+0x16>
 8009802:	f06f 0001 	mvn.w	r0, #1
 8009806:	e7f8      	b.n	80097fa <__ascii_mbtowc+0x16>

08009808 <__malloc_lock>:
 8009808:	4801      	ldr	r0, [pc, #4]	; (8009810 <__malloc_lock+0x8>)
 800980a:	f000 bbf1 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 800980e:	bf00      	nop
 8009810:	200004d0 	.word	0x200004d0

08009814 <__malloc_unlock>:
 8009814:	4801      	ldr	r0, [pc, #4]	; (800981c <__malloc_unlock+0x8>)
 8009816:	f000 bbec 	b.w	8009ff2 <__retarget_lock_release_recursive>
 800981a:	bf00      	nop
 800981c:	200004d0 	.word	0x200004d0

08009820 <__sfputc_r>:
 8009820:	6893      	ldr	r3, [r2, #8]
 8009822:	3b01      	subs	r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	b410      	push	{r4}
 8009828:	6093      	str	r3, [r2, #8]
 800982a:	da08      	bge.n	800983e <__sfputc_r+0x1e>
 800982c:	6994      	ldr	r4, [r2, #24]
 800982e:	42a3      	cmp	r3, r4
 8009830:	db01      	blt.n	8009836 <__sfputc_r+0x16>
 8009832:	290a      	cmp	r1, #10
 8009834:	d103      	bne.n	800983e <__sfputc_r+0x1e>
 8009836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800983a:	f000 b94b 	b.w	8009ad4 <__swbuf_r>
 800983e:	6813      	ldr	r3, [r2, #0]
 8009840:	1c58      	adds	r0, r3, #1
 8009842:	6010      	str	r0, [r2, #0]
 8009844:	7019      	strb	r1, [r3, #0]
 8009846:	4608      	mov	r0, r1
 8009848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800984c:	4770      	bx	lr

0800984e <__sfputs_r>:
 800984e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009850:	4606      	mov	r6, r0
 8009852:	460f      	mov	r7, r1
 8009854:	4614      	mov	r4, r2
 8009856:	18d5      	adds	r5, r2, r3
 8009858:	42ac      	cmp	r4, r5
 800985a:	d101      	bne.n	8009860 <__sfputs_r+0x12>
 800985c:	2000      	movs	r0, #0
 800985e:	e007      	b.n	8009870 <__sfputs_r+0x22>
 8009860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009864:	463a      	mov	r2, r7
 8009866:	4630      	mov	r0, r6
 8009868:	f7ff ffda 	bl	8009820 <__sfputc_r>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d1f3      	bne.n	8009858 <__sfputs_r+0xa>
 8009870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009874 <_vfiprintf_r>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	460d      	mov	r5, r1
 800987a:	b09d      	sub	sp, #116	; 0x74
 800987c:	4614      	mov	r4, r2
 800987e:	4698      	mov	r8, r3
 8009880:	4606      	mov	r6, r0
 8009882:	b118      	cbz	r0, 800988c <_vfiprintf_r+0x18>
 8009884:	6983      	ldr	r3, [r0, #24]
 8009886:	b90b      	cbnz	r3, 800988c <_vfiprintf_r+0x18>
 8009888:	f000 fb14 	bl	8009eb4 <__sinit>
 800988c:	4b89      	ldr	r3, [pc, #548]	; (8009ab4 <_vfiprintf_r+0x240>)
 800988e:	429d      	cmp	r5, r3
 8009890:	d11b      	bne.n	80098ca <_vfiprintf_r+0x56>
 8009892:	6875      	ldr	r5, [r6, #4]
 8009894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009896:	07d9      	lsls	r1, r3, #31
 8009898:	d405      	bmi.n	80098a6 <_vfiprintf_r+0x32>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	059a      	lsls	r2, r3, #22
 800989e:	d402      	bmi.n	80098a6 <_vfiprintf_r+0x32>
 80098a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a2:	f000 fba5 	bl	8009ff0 <__retarget_lock_acquire_recursive>
 80098a6:	89ab      	ldrh	r3, [r5, #12]
 80098a8:	071b      	lsls	r3, r3, #28
 80098aa:	d501      	bpl.n	80098b0 <_vfiprintf_r+0x3c>
 80098ac:	692b      	ldr	r3, [r5, #16]
 80098ae:	b9eb      	cbnz	r3, 80098ec <_vfiprintf_r+0x78>
 80098b0:	4629      	mov	r1, r5
 80098b2:	4630      	mov	r0, r6
 80098b4:	f000 f96e 	bl	8009b94 <__swsetup_r>
 80098b8:	b1c0      	cbz	r0, 80098ec <_vfiprintf_r+0x78>
 80098ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098bc:	07dc      	lsls	r4, r3, #31
 80098be:	d50e      	bpl.n	80098de <_vfiprintf_r+0x6a>
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	b01d      	add	sp, #116	; 0x74
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	4b7b      	ldr	r3, [pc, #492]	; (8009ab8 <_vfiprintf_r+0x244>)
 80098cc:	429d      	cmp	r5, r3
 80098ce:	d101      	bne.n	80098d4 <_vfiprintf_r+0x60>
 80098d0:	68b5      	ldr	r5, [r6, #8]
 80098d2:	e7df      	b.n	8009894 <_vfiprintf_r+0x20>
 80098d4:	4b79      	ldr	r3, [pc, #484]	; (8009abc <_vfiprintf_r+0x248>)
 80098d6:	429d      	cmp	r5, r3
 80098d8:	bf08      	it	eq
 80098da:	68f5      	ldreq	r5, [r6, #12]
 80098dc:	e7da      	b.n	8009894 <_vfiprintf_r+0x20>
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	0598      	lsls	r0, r3, #22
 80098e2:	d4ed      	bmi.n	80098c0 <_vfiprintf_r+0x4c>
 80098e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e6:	f000 fb84 	bl	8009ff2 <__retarget_lock_release_recursive>
 80098ea:	e7e9      	b.n	80098c0 <_vfiprintf_r+0x4c>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	2320      	movs	r3, #32
 80098f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fa:	2330      	movs	r3, #48	; 0x30
 80098fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ac0 <_vfiprintf_r+0x24c>
 8009900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009904:	f04f 0901 	mov.w	r9, #1
 8009908:	4623      	mov	r3, r4
 800990a:	469a      	mov	sl, r3
 800990c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009910:	b10a      	cbz	r2, 8009916 <_vfiprintf_r+0xa2>
 8009912:	2a25      	cmp	r2, #37	; 0x25
 8009914:	d1f9      	bne.n	800990a <_vfiprintf_r+0x96>
 8009916:	ebba 0b04 	subs.w	fp, sl, r4
 800991a:	d00b      	beq.n	8009934 <_vfiprintf_r+0xc0>
 800991c:	465b      	mov	r3, fp
 800991e:	4622      	mov	r2, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ff93 	bl	800984e <__sfputs_r>
 8009928:	3001      	adds	r0, #1
 800992a:	f000 80aa 	beq.w	8009a82 <_vfiprintf_r+0x20e>
 800992e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009930:	445a      	add	r2, fp
 8009932:	9209      	str	r2, [sp, #36]	; 0x24
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80a2 	beq.w	8009a82 <_vfiprintf_r+0x20e>
 800993e:	2300      	movs	r3, #0
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009954:	931a      	str	r3, [sp, #104]	; 0x68
 8009956:	4654      	mov	r4, sl
 8009958:	2205      	movs	r2, #5
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4858      	ldr	r0, [pc, #352]	; (8009ac0 <_vfiprintf_r+0x24c>)
 8009960:	f7f6 fc46 	bl	80001f0 <memchr>
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	b9d8      	cbnz	r0, 80099a0 <_vfiprintf_r+0x12c>
 8009968:	06d1      	lsls	r1, r2, #27
 800996a:	bf44      	itt	mi
 800996c:	2320      	movmi	r3, #32
 800996e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009972:	0713      	lsls	r3, r2, #28
 8009974:	bf44      	itt	mi
 8009976:	232b      	movmi	r3, #43	; 0x2b
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b2a      	cmp	r3, #42	; 0x2a
 8009982:	d015      	beq.n	80099b0 <_vfiprintf_r+0x13c>
 8009984:	9a07      	ldr	r2, [sp, #28]
 8009986:	4654      	mov	r4, sl
 8009988:	2000      	movs	r0, #0
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4621      	mov	r1, r4
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	; 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94e      	bls.n	8009a38 <_vfiprintf_r+0x1c4>
 800999a:	b1b0      	cbz	r0, 80099ca <_vfiprintf_r+0x156>
 800999c:	9207      	str	r2, [sp, #28]
 800999e:	e014      	b.n	80099ca <_vfiprintf_r+0x156>
 80099a0:	eba0 0308 	sub.w	r3, r0, r8
 80099a4:	fa09 f303 	lsl.w	r3, r9, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	46a2      	mov	sl, r4
 80099ae:	e7d2      	b.n	8009956 <_vfiprintf_r+0xe2>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9103      	str	r1, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfbb      	ittet	lt
 80099bc:	425b      	neglt	r3, r3
 80099be:	f042 0202 	orrlt.w	r2, r2, #2
 80099c2:	9307      	strge	r3, [sp, #28]
 80099c4:	9307      	strlt	r3, [sp, #28]
 80099c6:	bfb8      	it	lt
 80099c8:	9204      	strlt	r2, [sp, #16]
 80099ca:	7823      	ldrb	r3, [r4, #0]
 80099cc:	2b2e      	cmp	r3, #46	; 0x2e
 80099ce:	d10c      	bne.n	80099ea <_vfiprintf_r+0x176>
 80099d0:	7863      	ldrb	r3, [r4, #1]
 80099d2:	2b2a      	cmp	r3, #42	; 0x2a
 80099d4:	d135      	bne.n	8009a42 <_vfiprintf_r+0x1ce>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	9203      	str	r2, [sp, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bfb8      	it	lt
 80099e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e6:	3402      	adds	r4, #2
 80099e8:	9305      	str	r3, [sp, #20]
 80099ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ad0 <_vfiprintf_r+0x25c>
 80099ee:	7821      	ldrb	r1, [r4, #0]
 80099f0:	2203      	movs	r2, #3
 80099f2:	4650      	mov	r0, sl
 80099f4:	f7f6 fbfc 	bl	80001f0 <memchr>
 80099f8:	b140      	cbz	r0, 8009a0c <_vfiprintf_r+0x198>
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	eba0 000a 	sub.w	r0, r0, sl
 8009a00:	fa03 f000 	lsl.w	r0, r3, r0
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	4303      	orrs	r3, r0
 8009a08:	3401      	adds	r4, #1
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	482c      	ldr	r0, [pc, #176]	; (8009ac4 <_vfiprintf_r+0x250>)
 8009a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a16:	2206      	movs	r2, #6
 8009a18:	f7f6 fbea 	bl	80001f0 <memchr>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d03f      	beq.n	8009aa0 <_vfiprintf_r+0x22c>
 8009a20:	4b29      	ldr	r3, [pc, #164]	; (8009ac8 <_vfiprintf_r+0x254>)
 8009a22:	bb1b      	cbnz	r3, 8009a6c <_vfiprintf_r+0x1f8>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	3307      	adds	r3, #7
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a32:	443b      	add	r3, r7
 8009a34:	9309      	str	r3, [sp, #36]	; 0x24
 8009a36:	e767      	b.n	8009908 <_vfiprintf_r+0x94>
 8009a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e7a5      	b.n	800998e <_vfiprintf_r+0x11a>
 8009a42:	2300      	movs	r3, #0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0c0a 	mov.w	ip, #10
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a54:	3a30      	subs	r2, #48	; 0x30
 8009a56:	2a09      	cmp	r2, #9
 8009a58:	d903      	bls.n	8009a62 <_vfiprintf_r+0x1ee>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0c5      	beq.n	80099ea <_vfiprintf_r+0x176>
 8009a5e:	9105      	str	r1, [sp, #20]
 8009a60:	e7c3      	b.n	80099ea <_vfiprintf_r+0x176>
 8009a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a66:	4604      	mov	r4, r0
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7f0      	b.n	8009a4e <_vfiprintf_r+0x1da>
 8009a6c:	ab03      	add	r3, sp, #12
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4b16      	ldr	r3, [pc, #88]	; (8009acc <_vfiprintf_r+0x258>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7fd ff9a 	bl	80079b0 <_printf_float>
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	1c78      	adds	r0, r7, #1
 8009a80:	d1d6      	bne.n	8009a30 <_vfiprintf_r+0x1bc>
 8009a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a84:	07d9      	lsls	r1, r3, #31
 8009a86:	d405      	bmi.n	8009a94 <_vfiprintf_r+0x220>
 8009a88:	89ab      	ldrh	r3, [r5, #12]
 8009a8a:	059a      	lsls	r2, r3, #22
 8009a8c:	d402      	bmi.n	8009a94 <_vfiprintf_r+0x220>
 8009a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a90:	f000 faaf 	bl	8009ff2 <__retarget_lock_release_recursive>
 8009a94:	89ab      	ldrh	r3, [r5, #12]
 8009a96:	065b      	lsls	r3, r3, #25
 8009a98:	f53f af12 	bmi.w	80098c0 <_vfiprintf_r+0x4c>
 8009a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9e:	e711      	b.n	80098c4 <_vfiprintf_r+0x50>
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <_vfiprintf_r+0x258>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f7fe fa24 	bl	8007ef8 <_printf_i>
 8009ab0:	e7e4      	b.n	8009a7c <_vfiprintf_r+0x208>
 8009ab2:	bf00      	nop
 8009ab4:	0800a674 	.word	0x0800a674
 8009ab8:	0800a694 	.word	0x0800a694
 8009abc:	0800a654 	.word	0x0800a654
 8009ac0:	0800a542 	.word	0x0800a542
 8009ac4:	0800a54c 	.word	0x0800a54c
 8009ac8:	080079b1 	.word	0x080079b1
 8009acc:	0800984f 	.word	0x0800984f
 8009ad0:	0800a548 	.word	0x0800a548

08009ad4 <__swbuf_r>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	460e      	mov	r6, r1
 8009ad8:	4614      	mov	r4, r2
 8009ada:	4605      	mov	r5, r0
 8009adc:	b118      	cbz	r0, 8009ae6 <__swbuf_r+0x12>
 8009ade:	6983      	ldr	r3, [r0, #24]
 8009ae0:	b90b      	cbnz	r3, 8009ae6 <__swbuf_r+0x12>
 8009ae2:	f000 f9e7 	bl	8009eb4 <__sinit>
 8009ae6:	4b21      	ldr	r3, [pc, #132]	; (8009b6c <__swbuf_r+0x98>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	d12b      	bne.n	8009b44 <__swbuf_r+0x70>
 8009aec:	686c      	ldr	r4, [r5, #4]
 8009aee:	69a3      	ldr	r3, [r4, #24]
 8009af0:	60a3      	str	r3, [r4, #8]
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	071a      	lsls	r2, r3, #28
 8009af6:	d52f      	bpl.n	8009b58 <__swbuf_r+0x84>
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	b36b      	cbz	r3, 8009b58 <__swbuf_r+0x84>
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	1ac0      	subs	r0, r0, r3
 8009b02:	6963      	ldr	r3, [r4, #20]
 8009b04:	b2f6      	uxtb	r6, r6
 8009b06:	4283      	cmp	r3, r0
 8009b08:	4637      	mov	r7, r6
 8009b0a:	dc04      	bgt.n	8009b16 <__swbuf_r+0x42>
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f93c 	bl	8009d8c <_fflush_r>
 8009b14:	bb30      	cbnz	r0, 8009b64 <__swbuf_r+0x90>
 8009b16:	68a3      	ldr	r3, [r4, #8]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	60a3      	str	r3, [r4, #8]
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	6022      	str	r2, [r4, #0]
 8009b22:	701e      	strb	r6, [r3, #0]
 8009b24:	6963      	ldr	r3, [r4, #20]
 8009b26:	3001      	adds	r0, #1
 8009b28:	4283      	cmp	r3, r0
 8009b2a:	d004      	beq.n	8009b36 <__swbuf_r+0x62>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	07db      	lsls	r3, r3, #31
 8009b30:	d506      	bpl.n	8009b40 <__swbuf_r+0x6c>
 8009b32:	2e0a      	cmp	r6, #10
 8009b34:	d104      	bne.n	8009b40 <__swbuf_r+0x6c>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f000 f927 	bl	8009d8c <_fflush_r>
 8009b3e:	b988      	cbnz	r0, 8009b64 <__swbuf_r+0x90>
 8009b40:	4638      	mov	r0, r7
 8009b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b44:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <__swbuf_r+0x9c>)
 8009b46:	429c      	cmp	r4, r3
 8009b48:	d101      	bne.n	8009b4e <__swbuf_r+0x7a>
 8009b4a:	68ac      	ldr	r4, [r5, #8]
 8009b4c:	e7cf      	b.n	8009aee <__swbuf_r+0x1a>
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <__swbuf_r+0xa0>)
 8009b50:	429c      	cmp	r4, r3
 8009b52:	bf08      	it	eq
 8009b54:	68ec      	ldreq	r4, [r5, #12]
 8009b56:	e7ca      	b.n	8009aee <__swbuf_r+0x1a>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f000 f81a 	bl	8009b94 <__swsetup_r>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d0cb      	beq.n	8009afc <__swbuf_r+0x28>
 8009b64:	f04f 37ff 	mov.w	r7, #4294967295
 8009b68:	e7ea      	b.n	8009b40 <__swbuf_r+0x6c>
 8009b6a:	bf00      	nop
 8009b6c:	0800a674 	.word	0x0800a674
 8009b70:	0800a694 	.word	0x0800a694
 8009b74:	0800a654 	.word	0x0800a654

08009b78 <__ascii_wctomb>:
 8009b78:	b149      	cbz	r1, 8009b8e <__ascii_wctomb+0x16>
 8009b7a:	2aff      	cmp	r2, #255	; 0xff
 8009b7c:	bf85      	ittet	hi
 8009b7e:	238a      	movhi	r3, #138	; 0x8a
 8009b80:	6003      	strhi	r3, [r0, #0]
 8009b82:	700a      	strbls	r2, [r1, #0]
 8009b84:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b88:	bf98      	it	ls
 8009b8a:	2001      	movls	r0, #1
 8009b8c:	4770      	bx	lr
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4770      	bx	lr
	...

08009b94 <__swsetup_r>:
 8009b94:	4b32      	ldr	r3, [pc, #200]	; (8009c60 <__swsetup_r+0xcc>)
 8009b96:	b570      	push	{r4, r5, r6, lr}
 8009b98:	681d      	ldr	r5, [r3, #0]
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	b125      	cbz	r5, 8009baa <__swsetup_r+0x16>
 8009ba0:	69ab      	ldr	r3, [r5, #24]
 8009ba2:	b913      	cbnz	r3, 8009baa <__swsetup_r+0x16>
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 f985 	bl	8009eb4 <__sinit>
 8009baa:	4b2e      	ldr	r3, [pc, #184]	; (8009c64 <__swsetup_r+0xd0>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	d10f      	bne.n	8009bd0 <__swsetup_r+0x3c>
 8009bb0:	686c      	ldr	r4, [r5, #4]
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bb8:	0719      	lsls	r1, r3, #28
 8009bba:	d42c      	bmi.n	8009c16 <__swsetup_r+0x82>
 8009bbc:	06dd      	lsls	r5, r3, #27
 8009bbe:	d411      	bmi.n	8009be4 <__swsetup_r+0x50>
 8009bc0:	2309      	movs	r3, #9
 8009bc2:	6033      	str	r3, [r6, #0]
 8009bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295
 8009bce:	e03e      	b.n	8009c4e <__swsetup_r+0xba>
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <__swsetup_r+0xd4>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d101      	bne.n	8009bda <__swsetup_r+0x46>
 8009bd6:	68ac      	ldr	r4, [r5, #8]
 8009bd8:	e7eb      	b.n	8009bb2 <__swsetup_r+0x1e>
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <__swsetup_r+0xd8>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	bf08      	it	eq
 8009be0:	68ec      	ldreq	r4, [r5, #12]
 8009be2:	e7e6      	b.n	8009bb2 <__swsetup_r+0x1e>
 8009be4:	0758      	lsls	r0, r3, #29
 8009be6:	d512      	bpl.n	8009c0e <__swsetup_r+0x7a>
 8009be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bea:	b141      	cbz	r1, 8009bfe <__swsetup_r+0x6a>
 8009bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d002      	beq.n	8009bfa <__swsetup_r+0x66>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff fcd5 	bl	80095a4 <_free_r>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	2300      	movs	r3, #0
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	f043 0308 	orr.w	r3, r3, #8
 8009c14:	81a3      	strh	r3, [r4, #12]
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	b94b      	cbnz	r3, 8009c2e <__swsetup_r+0x9a>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c24:	d003      	beq.n	8009c2e <__swsetup_r+0x9a>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 fa09 	bl	800a040 <__smakebuf_r>
 8009c2e:	89a0      	ldrh	r0, [r4, #12]
 8009c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c34:	f010 0301 	ands.w	r3, r0, #1
 8009c38:	d00a      	beq.n	8009c50 <__swsetup_r+0xbc>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60a3      	str	r3, [r4, #8]
 8009c3e:	6963      	ldr	r3, [r4, #20]
 8009c40:	425b      	negs	r3, r3
 8009c42:	61a3      	str	r3, [r4, #24]
 8009c44:	6923      	ldr	r3, [r4, #16]
 8009c46:	b943      	cbnz	r3, 8009c5a <__swsetup_r+0xc6>
 8009c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c4c:	d1ba      	bne.n	8009bc4 <__swsetup_r+0x30>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	0781      	lsls	r1, r0, #30
 8009c52:	bf58      	it	pl
 8009c54:	6963      	ldrpl	r3, [r4, #20]
 8009c56:	60a3      	str	r3, [r4, #8]
 8009c58:	e7f4      	b.n	8009c44 <__swsetup_r+0xb0>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e7f7      	b.n	8009c4e <__swsetup_r+0xba>
 8009c5e:	bf00      	nop
 8009c60:	2000000c 	.word	0x2000000c
 8009c64:	0800a674 	.word	0x0800a674
 8009c68:	0800a694 	.word	0x0800a694
 8009c6c:	0800a654 	.word	0x0800a654

08009c70 <abort>:
 8009c70:	b508      	push	{r3, lr}
 8009c72:	2006      	movs	r0, #6
 8009c74:	f000 fa4c 	bl	800a110 <raise>
 8009c78:	2001      	movs	r0, #1
 8009c7a:	f7f8 fc31 	bl	80024e0 <_exit>
	...

08009c80 <__sflush_r>:
 8009c80:	898a      	ldrh	r2, [r1, #12]
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	4605      	mov	r5, r0
 8009c88:	0710      	lsls	r0, r2, #28
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	d458      	bmi.n	8009d40 <__sflush_r+0xc0>
 8009c8e:	684b      	ldr	r3, [r1, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dc05      	bgt.n	8009ca0 <__sflush_r+0x20>
 8009c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dc02      	bgt.n	8009ca0 <__sflush_r+0x20>
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d0f9      	beq.n	8009c9a <__sflush_r+0x1a>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cac:	682f      	ldr	r7, [r5, #0]
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	d032      	beq.n	8009d18 <__sflush_r+0x98>
 8009cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	075a      	lsls	r2, r3, #29
 8009cb8:	d505      	bpl.n	8009cc6 <__sflush_r+0x46>
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cc0:	b10b      	cbz	r3, 8009cc6 <__sflush_r+0x46>
 8009cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cc4:	1ac0      	subs	r0, r0, r3
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ccc:	6a21      	ldr	r1, [r4, #32]
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b0      	blx	r6
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	d106      	bne.n	8009ce6 <__sflush_r+0x66>
 8009cd8:	6829      	ldr	r1, [r5, #0]
 8009cda:	291d      	cmp	r1, #29
 8009cdc:	d82c      	bhi.n	8009d38 <__sflush_r+0xb8>
 8009cde:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <__sflush_r+0x108>)
 8009ce0:	40ca      	lsrs	r2, r1
 8009ce2:	07d6      	lsls	r6, r2, #31
 8009ce4:	d528      	bpl.n	8009d38 <__sflush_r+0xb8>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	6062      	str	r2, [r4, #4]
 8009cea:	04d9      	lsls	r1, r3, #19
 8009cec:	6922      	ldr	r2, [r4, #16]
 8009cee:	6022      	str	r2, [r4, #0]
 8009cf0:	d504      	bpl.n	8009cfc <__sflush_r+0x7c>
 8009cf2:	1c42      	adds	r2, r0, #1
 8009cf4:	d101      	bne.n	8009cfa <__sflush_r+0x7a>
 8009cf6:	682b      	ldr	r3, [r5, #0]
 8009cf8:	b903      	cbnz	r3, 8009cfc <__sflush_r+0x7c>
 8009cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8009cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfe:	602f      	str	r7, [r5, #0]
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d0ca      	beq.n	8009c9a <__sflush_r+0x1a>
 8009d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d002      	beq.n	8009d12 <__sflush_r+0x92>
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f7ff fc49 	bl	80095a4 <_free_r>
 8009d12:	2000      	movs	r0, #0
 8009d14:	6360      	str	r0, [r4, #52]	; 0x34
 8009d16:	e7c1      	b.n	8009c9c <__sflush_r+0x1c>
 8009d18:	6a21      	ldr	r1, [r4, #32]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b0      	blx	r6
 8009d20:	1c41      	adds	r1, r0, #1
 8009d22:	d1c7      	bne.n	8009cb4 <__sflush_r+0x34>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0c4      	beq.n	8009cb4 <__sflush_r+0x34>
 8009d2a:	2b1d      	cmp	r3, #29
 8009d2c:	d001      	beq.n	8009d32 <__sflush_r+0xb2>
 8009d2e:	2b16      	cmp	r3, #22
 8009d30:	d101      	bne.n	8009d36 <__sflush_r+0xb6>
 8009d32:	602f      	str	r7, [r5, #0]
 8009d34:	e7b1      	b.n	8009c9a <__sflush_r+0x1a>
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	e7ad      	b.n	8009c9c <__sflush_r+0x1c>
 8009d40:	690f      	ldr	r7, [r1, #16]
 8009d42:	2f00      	cmp	r7, #0
 8009d44:	d0a9      	beq.n	8009c9a <__sflush_r+0x1a>
 8009d46:	0793      	lsls	r3, r2, #30
 8009d48:	680e      	ldr	r6, [r1, #0]
 8009d4a:	bf08      	it	eq
 8009d4c:	694b      	ldreq	r3, [r1, #20]
 8009d4e:	600f      	str	r7, [r1, #0]
 8009d50:	bf18      	it	ne
 8009d52:	2300      	movne	r3, #0
 8009d54:	eba6 0807 	sub.w	r8, r6, r7
 8009d58:	608b      	str	r3, [r1, #8]
 8009d5a:	f1b8 0f00 	cmp.w	r8, #0
 8009d5e:	dd9c      	ble.n	8009c9a <__sflush_r+0x1a>
 8009d60:	6a21      	ldr	r1, [r4, #32]
 8009d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d64:	4643      	mov	r3, r8
 8009d66:	463a      	mov	r2, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b0      	blx	r6
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	dc06      	bgt.n	8009d7e <__sflush_r+0xfe>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7c:	e78e      	b.n	8009c9c <__sflush_r+0x1c>
 8009d7e:	4407      	add	r7, r0
 8009d80:	eba8 0800 	sub.w	r8, r8, r0
 8009d84:	e7e9      	b.n	8009d5a <__sflush_r+0xda>
 8009d86:	bf00      	nop
 8009d88:	20400001 	.word	0x20400001

08009d8c <_fflush_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	690b      	ldr	r3, [r1, #16]
 8009d90:	4605      	mov	r5, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	b913      	cbnz	r3, 8009d9c <_fflush_r+0x10>
 8009d96:	2500      	movs	r5, #0
 8009d98:	4628      	mov	r0, r5
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	b118      	cbz	r0, 8009da6 <_fflush_r+0x1a>
 8009d9e:	6983      	ldr	r3, [r0, #24]
 8009da0:	b90b      	cbnz	r3, 8009da6 <_fflush_r+0x1a>
 8009da2:	f000 f887 	bl	8009eb4 <__sinit>
 8009da6:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <_fflush_r+0x6c>)
 8009da8:	429c      	cmp	r4, r3
 8009daa:	d11b      	bne.n	8009de4 <_fflush_r+0x58>
 8009dac:	686c      	ldr	r4, [r5, #4]
 8009dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d0ef      	beq.n	8009d96 <_fflush_r+0xa>
 8009db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009db8:	07d0      	lsls	r0, r2, #31
 8009dba:	d404      	bmi.n	8009dc6 <_fflush_r+0x3a>
 8009dbc:	0599      	lsls	r1, r3, #22
 8009dbe:	d402      	bmi.n	8009dc6 <_fflush_r+0x3a>
 8009dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc2:	f000 f915 	bl	8009ff0 <__retarget_lock_acquire_recursive>
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	4621      	mov	r1, r4
 8009dca:	f7ff ff59 	bl	8009c80 <__sflush_r>
 8009dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd0:	07da      	lsls	r2, r3, #31
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	d4e0      	bmi.n	8009d98 <_fflush_r+0xc>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	059b      	lsls	r3, r3, #22
 8009dda:	d4dd      	bmi.n	8009d98 <_fflush_r+0xc>
 8009ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dde:	f000 f908 	bl	8009ff2 <__retarget_lock_release_recursive>
 8009de2:	e7d9      	b.n	8009d98 <_fflush_r+0xc>
 8009de4:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <_fflush_r+0x70>)
 8009de6:	429c      	cmp	r4, r3
 8009de8:	d101      	bne.n	8009dee <_fflush_r+0x62>
 8009dea:	68ac      	ldr	r4, [r5, #8]
 8009dec:	e7df      	b.n	8009dae <_fflush_r+0x22>
 8009dee:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <_fflush_r+0x74>)
 8009df0:	429c      	cmp	r4, r3
 8009df2:	bf08      	it	eq
 8009df4:	68ec      	ldreq	r4, [r5, #12]
 8009df6:	e7da      	b.n	8009dae <_fflush_r+0x22>
 8009df8:	0800a674 	.word	0x0800a674
 8009dfc:	0800a694 	.word	0x0800a694
 8009e00:	0800a654 	.word	0x0800a654

08009e04 <std>:
 8009e04:	2300      	movs	r3, #0
 8009e06:	b510      	push	{r4, lr}
 8009e08:	4604      	mov	r4, r0
 8009e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e12:	6083      	str	r3, [r0, #8]
 8009e14:	8181      	strh	r1, [r0, #12]
 8009e16:	6643      	str	r3, [r0, #100]	; 0x64
 8009e18:	81c2      	strh	r2, [r0, #14]
 8009e1a:	6183      	str	r3, [r0, #24]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	2208      	movs	r2, #8
 8009e20:	305c      	adds	r0, #92	; 0x5c
 8009e22:	f7fd fd1d 	bl	8007860 <memset>
 8009e26:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <std+0x38>)
 8009e28:	6263      	str	r3, [r4, #36]	; 0x24
 8009e2a:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <std+0x3c>)
 8009e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <std+0x40>)
 8009e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <std+0x44>)
 8009e34:	6224      	str	r4, [r4, #32]
 8009e36:	6323      	str	r3, [r4, #48]	; 0x30
 8009e38:	bd10      	pop	{r4, pc}
 8009e3a:	bf00      	nop
 8009e3c:	0800a149 	.word	0x0800a149
 8009e40:	0800a16b 	.word	0x0800a16b
 8009e44:	0800a1a3 	.word	0x0800a1a3
 8009e48:	0800a1c7 	.word	0x0800a1c7

08009e4c <_cleanup_r>:
 8009e4c:	4901      	ldr	r1, [pc, #4]	; (8009e54 <_cleanup_r+0x8>)
 8009e4e:	f000 b8af 	b.w	8009fb0 <_fwalk_reent>
 8009e52:	bf00      	nop
 8009e54:	08009d8d 	.word	0x08009d8d

08009e58 <__sfmoreglue>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	2268      	movs	r2, #104	; 0x68
 8009e5c:	1e4d      	subs	r5, r1, #1
 8009e5e:	4355      	muls	r5, r2
 8009e60:	460e      	mov	r6, r1
 8009e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e66:	f7ff fc09 	bl	800967c <_malloc_r>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	b140      	cbz	r0, 8009e80 <__sfmoreglue+0x28>
 8009e6e:	2100      	movs	r1, #0
 8009e70:	e9c0 1600 	strd	r1, r6, [r0]
 8009e74:	300c      	adds	r0, #12
 8009e76:	60a0      	str	r0, [r4, #8]
 8009e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e7c:	f7fd fcf0 	bl	8007860 <memset>
 8009e80:	4620      	mov	r0, r4
 8009e82:	bd70      	pop	{r4, r5, r6, pc}

08009e84 <__sfp_lock_acquire>:
 8009e84:	4801      	ldr	r0, [pc, #4]	; (8009e8c <__sfp_lock_acquire+0x8>)
 8009e86:	f000 b8b3 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	200004d1 	.word	0x200004d1

08009e90 <__sfp_lock_release>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__sfp_lock_release+0x8>)
 8009e92:	f000 b8ae 	b.w	8009ff2 <__retarget_lock_release_recursive>
 8009e96:	bf00      	nop
 8009e98:	200004d1 	.word	0x200004d1

08009e9c <__sinit_lock_acquire>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	; (8009ea4 <__sinit_lock_acquire+0x8>)
 8009e9e:	f000 b8a7 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	200004d2 	.word	0x200004d2

08009ea8 <__sinit_lock_release>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	; (8009eb0 <__sinit_lock_release+0x8>)
 8009eaa:	f000 b8a2 	b.w	8009ff2 <__retarget_lock_release_recursive>
 8009eae:	bf00      	nop
 8009eb0:	200004d2 	.word	0x200004d2

08009eb4 <__sinit>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	f7ff fff0 	bl	8009e9c <__sinit_lock_acquire>
 8009ebc:	69a3      	ldr	r3, [r4, #24]
 8009ebe:	b11b      	cbz	r3, 8009ec8 <__sinit+0x14>
 8009ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ec4:	f7ff bff0 	b.w	8009ea8 <__sinit_lock_release>
 8009ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <__sinit+0x68>)
 8009ed0:	4a13      	ldr	r2, [pc, #76]	; (8009f20 <__sinit+0x6c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	bf04      	itt	eq
 8009eda:	2301      	moveq	r3, #1
 8009edc:	61a3      	streq	r3, [r4, #24]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f820 	bl	8009f24 <__sfp>
 8009ee4:	6060      	str	r0, [r4, #4]
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f000 f81c 	bl	8009f24 <__sfp>
 8009eec:	60a0      	str	r0, [r4, #8]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 f818 	bl	8009f24 <__sfp>
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	60e0      	str	r0, [r4, #12]
 8009ef8:	2104      	movs	r1, #4
 8009efa:	6860      	ldr	r0, [r4, #4]
 8009efc:	f7ff ff82 	bl	8009e04 <std>
 8009f00:	68a0      	ldr	r0, [r4, #8]
 8009f02:	2201      	movs	r2, #1
 8009f04:	2109      	movs	r1, #9
 8009f06:	f7ff ff7d 	bl	8009e04 <std>
 8009f0a:	68e0      	ldr	r0, [r4, #12]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	2112      	movs	r1, #18
 8009f10:	f7ff ff78 	bl	8009e04 <std>
 8009f14:	2301      	movs	r3, #1
 8009f16:	61a3      	str	r3, [r4, #24]
 8009f18:	e7d2      	b.n	8009ec0 <__sinit+0xc>
 8009f1a:	bf00      	nop
 8009f1c:	0800a2d8 	.word	0x0800a2d8
 8009f20:	08009e4d 	.word	0x08009e4d

08009f24 <__sfp>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	4607      	mov	r7, r0
 8009f28:	f7ff ffac 	bl	8009e84 <__sfp_lock_acquire>
 8009f2c:	4b1e      	ldr	r3, [pc, #120]	; (8009fa8 <__sfp+0x84>)
 8009f2e:	681e      	ldr	r6, [r3, #0]
 8009f30:	69b3      	ldr	r3, [r6, #24]
 8009f32:	b913      	cbnz	r3, 8009f3a <__sfp+0x16>
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7ff ffbd 	bl	8009eb4 <__sinit>
 8009f3a:	3648      	adds	r6, #72	; 0x48
 8009f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	d503      	bpl.n	8009f4c <__sfp+0x28>
 8009f44:	6833      	ldr	r3, [r6, #0]
 8009f46:	b30b      	cbz	r3, 8009f8c <__sfp+0x68>
 8009f48:	6836      	ldr	r6, [r6, #0]
 8009f4a:	e7f7      	b.n	8009f3c <__sfp+0x18>
 8009f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f50:	b9d5      	cbnz	r5, 8009f88 <__sfp+0x64>
 8009f52:	4b16      	ldr	r3, [pc, #88]	; (8009fac <__sfp+0x88>)
 8009f54:	60e3      	str	r3, [r4, #12]
 8009f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8009f5c:	f000 f847 	bl	8009fee <__retarget_lock_init_recursive>
 8009f60:	f7ff ff96 	bl	8009e90 <__sfp_lock_release>
 8009f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f6c:	6025      	str	r5, [r4, #0]
 8009f6e:	61a5      	str	r5, [r4, #24]
 8009f70:	2208      	movs	r2, #8
 8009f72:	4629      	mov	r1, r5
 8009f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f78:	f7fd fc72 	bl	8007860 <memset>
 8009f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f84:	4620      	mov	r0, r4
 8009f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f88:	3468      	adds	r4, #104	; 0x68
 8009f8a:	e7d9      	b.n	8009f40 <__sfp+0x1c>
 8009f8c:	2104      	movs	r1, #4
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7ff ff62 	bl	8009e58 <__sfmoreglue>
 8009f94:	4604      	mov	r4, r0
 8009f96:	6030      	str	r0, [r6, #0]
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d1d5      	bne.n	8009f48 <__sfp+0x24>
 8009f9c:	f7ff ff78 	bl	8009e90 <__sfp_lock_release>
 8009fa0:	230c      	movs	r3, #12
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	e7ee      	b.n	8009f84 <__sfp+0x60>
 8009fa6:	bf00      	nop
 8009fa8:	0800a2d8 	.word	0x0800a2d8
 8009fac:	ffff0001 	.word	0xffff0001

08009fb0 <_fwalk_reent>:
 8009fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	4688      	mov	r8, r1
 8009fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fbc:	2700      	movs	r7, #0
 8009fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8009fc6:	d505      	bpl.n	8009fd4 <_fwalk_reent+0x24>
 8009fc8:	6824      	ldr	r4, [r4, #0]
 8009fca:	2c00      	cmp	r4, #0
 8009fcc:	d1f7      	bne.n	8009fbe <_fwalk_reent+0xe>
 8009fce:	4638      	mov	r0, r7
 8009fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd4:	89ab      	ldrh	r3, [r5, #12]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d907      	bls.n	8009fea <_fwalk_reent+0x3a>
 8009fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	d003      	beq.n	8009fea <_fwalk_reent+0x3a>
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	47c0      	blx	r8
 8009fe8:	4307      	orrs	r7, r0
 8009fea:	3568      	adds	r5, #104	; 0x68
 8009fec:	e7e9      	b.n	8009fc2 <_fwalk_reent+0x12>

08009fee <__retarget_lock_init_recursive>:
 8009fee:	4770      	bx	lr

08009ff0 <__retarget_lock_acquire_recursive>:
 8009ff0:	4770      	bx	lr

08009ff2 <__retarget_lock_release_recursive>:
 8009ff2:	4770      	bx	lr

08009ff4 <__swhatbuf_r>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	460e      	mov	r6, r1
 8009ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	b096      	sub	sp, #88	; 0x58
 800a000:	4614      	mov	r4, r2
 800a002:	461d      	mov	r5, r3
 800a004:	da08      	bge.n	800a018 <__swhatbuf_r+0x24>
 800a006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	602a      	str	r2, [r5, #0]
 800a00e:	061a      	lsls	r2, r3, #24
 800a010:	d410      	bmi.n	800a034 <__swhatbuf_r+0x40>
 800a012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a016:	e00e      	b.n	800a036 <__swhatbuf_r+0x42>
 800a018:	466a      	mov	r2, sp
 800a01a:	f000 f8fb 	bl	800a214 <_fstat_r>
 800a01e:	2800      	cmp	r0, #0
 800a020:	dbf1      	blt.n	800a006 <__swhatbuf_r+0x12>
 800a022:	9a01      	ldr	r2, [sp, #4]
 800a024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a02c:	425a      	negs	r2, r3
 800a02e:	415a      	adcs	r2, r3
 800a030:	602a      	str	r2, [r5, #0]
 800a032:	e7ee      	b.n	800a012 <__swhatbuf_r+0x1e>
 800a034:	2340      	movs	r3, #64	; 0x40
 800a036:	2000      	movs	r0, #0
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	b016      	add	sp, #88	; 0x58
 800a03c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a040 <__smakebuf_r>:
 800a040:	898b      	ldrh	r3, [r1, #12]
 800a042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a044:	079d      	lsls	r5, r3, #30
 800a046:	4606      	mov	r6, r0
 800a048:	460c      	mov	r4, r1
 800a04a:	d507      	bpl.n	800a05c <__smakebuf_r+0x1c>
 800a04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	2301      	movs	r3, #1
 800a056:	6163      	str	r3, [r4, #20]
 800a058:	b002      	add	sp, #8
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	ab01      	add	r3, sp, #4
 800a05e:	466a      	mov	r2, sp
 800a060:	f7ff ffc8 	bl	8009ff4 <__swhatbuf_r>
 800a064:	9900      	ldr	r1, [sp, #0]
 800a066:	4605      	mov	r5, r0
 800a068:	4630      	mov	r0, r6
 800a06a:	f7ff fb07 	bl	800967c <_malloc_r>
 800a06e:	b948      	cbnz	r0, 800a084 <__smakebuf_r+0x44>
 800a070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a074:	059a      	lsls	r2, r3, #22
 800a076:	d4ef      	bmi.n	800a058 <__smakebuf_r+0x18>
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	e7e3      	b.n	800a04c <__smakebuf_r+0xc>
 800a084:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <__smakebuf_r+0x7c>)
 800a086:	62b3      	str	r3, [r6, #40]	; 0x28
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	6020      	str	r0, [r4, #0]
 800a08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	6163      	str	r3, [r4, #20]
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	6120      	str	r0, [r4, #16]
 800a09a:	b15b      	cbz	r3, 800a0b4 <__smakebuf_r+0x74>
 800a09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 f8c9 	bl	800a238 <_isatty_r>
 800a0a6:	b128      	cbz	r0, 800a0b4 <__smakebuf_r+0x74>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	f043 0301 	orr.w	r3, r3, #1
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	89a0      	ldrh	r0, [r4, #12]
 800a0b6:	4305      	orrs	r5, r0
 800a0b8:	81a5      	strh	r5, [r4, #12]
 800a0ba:	e7cd      	b.n	800a058 <__smakebuf_r+0x18>
 800a0bc:	08009e4d 	.word	0x08009e4d

0800a0c0 <_raise_r>:
 800a0c0:	291f      	cmp	r1, #31
 800a0c2:	b538      	push	{r3, r4, r5, lr}
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	d904      	bls.n	800a0d4 <_raise_r+0x14>
 800a0ca:	2316      	movs	r3, #22
 800a0cc:	6003      	str	r3, [r0, #0]
 800a0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0d6:	b112      	cbz	r2, 800a0de <_raise_r+0x1e>
 800a0d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0dc:	b94b      	cbnz	r3, 800a0f2 <_raise_r+0x32>
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f000 f830 	bl	800a144 <_getpid_r>
 800a0e4:	462a      	mov	r2, r5
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ee:	f000 b817 	b.w	800a120 <_kill_r>
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d00a      	beq.n	800a10c <_raise_r+0x4c>
 800a0f6:	1c59      	adds	r1, r3, #1
 800a0f8:	d103      	bne.n	800a102 <_raise_r+0x42>
 800a0fa:	2316      	movs	r3, #22
 800a0fc:	6003      	str	r3, [r0, #0]
 800a0fe:	2001      	movs	r0, #1
 800a100:	e7e7      	b.n	800a0d2 <_raise_r+0x12>
 800a102:	2400      	movs	r4, #0
 800a104:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a108:	4628      	mov	r0, r5
 800a10a:	4798      	blx	r3
 800a10c:	2000      	movs	r0, #0
 800a10e:	e7e0      	b.n	800a0d2 <_raise_r+0x12>

0800a110 <raise>:
 800a110:	4b02      	ldr	r3, [pc, #8]	; (800a11c <raise+0xc>)
 800a112:	4601      	mov	r1, r0
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	f7ff bfd3 	b.w	800a0c0 <_raise_r>
 800a11a:	bf00      	nop
 800a11c:	2000000c 	.word	0x2000000c

0800a120 <_kill_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d07      	ldr	r5, [pc, #28]	; (800a140 <_kill_r+0x20>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	4611      	mov	r1, r2
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	f7f8 f9c7 	bl	80024c0 <_kill>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d102      	bne.n	800a13c <_kill_r+0x1c>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	b103      	cbz	r3, 800a13c <_kill_r+0x1c>
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	bd38      	pop	{r3, r4, r5, pc}
 800a13e:	bf00      	nop
 800a140:	200004cc 	.word	0x200004cc

0800a144 <_getpid_r>:
 800a144:	f7f8 b9b4 	b.w	80024b0 <_getpid>

0800a148 <__sread>:
 800a148:	b510      	push	{r4, lr}
 800a14a:	460c      	mov	r4, r1
 800a14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a150:	f000 f894 	bl	800a27c <_read_r>
 800a154:	2800      	cmp	r0, #0
 800a156:	bfab      	itete	ge
 800a158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a15a:	89a3      	ldrhlt	r3, [r4, #12]
 800a15c:	181b      	addge	r3, r3, r0
 800a15e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a162:	bfac      	ite	ge
 800a164:	6563      	strge	r3, [r4, #84]	; 0x54
 800a166:	81a3      	strhlt	r3, [r4, #12]
 800a168:	bd10      	pop	{r4, pc}

0800a16a <__swrite>:
 800a16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16e:	461f      	mov	r7, r3
 800a170:	898b      	ldrh	r3, [r1, #12]
 800a172:	05db      	lsls	r3, r3, #23
 800a174:	4605      	mov	r5, r0
 800a176:	460c      	mov	r4, r1
 800a178:	4616      	mov	r6, r2
 800a17a:	d505      	bpl.n	800a188 <__swrite+0x1e>
 800a17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a180:	2302      	movs	r3, #2
 800a182:	2200      	movs	r2, #0
 800a184:	f000 f868 	bl	800a258 <_lseek_r>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a18e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	4632      	mov	r2, r6
 800a196:	463b      	mov	r3, r7
 800a198:	4628      	mov	r0, r5
 800a19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a19e:	f000 b817 	b.w	800a1d0 <_write_r>

0800a1a2 <__sseek>:
 800a1a2:	b510      	push	{r4, lr}
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1aa:	f000 f855 	bl	800a258 <_lseek_r>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	bf15      	itete	ne
 800a1b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1be:	81a3      	strheq	r3, [r4, #12]
 800a1c0:	bf18      	it	ne
 800a1c2:	81a3      	strhne	r3, [r4, #12]
 800a1c4:	bd10      	pop	{r4, pc}

0800a1c6 <__sclose>:
 800a1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ca:	f000 b813 	b.w	800a1f4 <_close_r>
	...

0800a1d0 <_write_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d07      	ldr	r5, [pc, #28]	; (800a1f0 <_write_r+0x20>)
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	4611      	mov	r1, r2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	602a      	str	r2, [r5, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f7f8 f9a5 	bl	800252e <_write>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_write_r+0x1e>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_write_r+0x1e>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	200004cc 	.word	0x200004cc

0800a1f4 <_close_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d06      	ldr	r5, [pc, #24]	; (800a210 <_close_r+0x1c>)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	f7f8 f9b1 	bl	8002566 <_close>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_close_r+0x1a>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_close_r+0x1a>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	200004cc 	.word	0x200004cc

0800a214 <_fstat_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	; (800a234 <_fstat_r+0x20>)
 800a218:	2300      	movs	r3, #0
 800a21a:	4604      	mov	r4, r0
 800a21c:	4608      	mov	r0, r1
 800a21e:	4611      	mov	r1, r2
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	f7f8 f9ac 	bl	800257e <_fstat>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d102      	bne.n	800a230 <_fstat_r+0x1c>
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	b103      	cbz	r3, 800a230 <_fstat_r+0x1c>
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	bd38      	pop	{r3, r4, r5, pc}
 800a232:	bf00      	nop
 800a234:	200004cc 	.word	0x200004cc

0800a238 <_isatty_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d06      	ldr	r5, [pc, #24]	; (800a254 <_isatty_r+0x1c>)
 800a23c:	2300      	movs	r3, #0
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	f7f8 f9ab 	bl	800259e <_isatty>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_isatty_r+0x1a>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_isatty_r+0x1a>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	200004cc 	.word	0x200004cc

0800a258 <_lseek_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d07      	ldr	r5, [pc, #28]	; (800a278 <_lseek_r+0x20>)
 800a25c:	4604      	mov	r4, r0
 800a25e:	4608      	mov	r0, r1
 800a260:	4611      	mov	r1, r2
 800a262:	2200      	movs	r2, #0
 800a264:	602a      	str	r2, [r5, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	f7f8 f9a4 	bl	80025b4 <_lseek>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_lseek_r+0x1e>
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	b103      	cbz	r3, 800a276 <_lseek_r+0x1e>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	200004cc 	.word	0x200004cc

0800a27c <_read_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d07      	ldr	r5, [pc, #28]	; (800a29c <_read_r+0x20>)
 800a280:	4604      	mov	r4, r0
 800a282:	4608      	mov	r0, r1
 800a284:	4611      	mov	r1, r2
 800a286:	2200      	movs	r2, #0
 800a288:	602a      	str	r2, [r5, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f7f8 f932 	bl	80024f4 <_read>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_read_r+0x1e>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_read_r+0x1e>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	200004cc 	.word	0x200004cc

0800a2a0 <_init>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	bf00      	nop
 800a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a6:	bc08      	pop	{r3}
 800a2a8:	469e      	mov	lr, r3
 800a2aa:	4770      	bx	lr

0800a2ac <_fini>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	bf00      	nop
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr
